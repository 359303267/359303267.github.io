<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>加载驱动报Unknown symbol device_create错误解决（小梅哥ZYNQ-7010）</title>
      <link href="/%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8%E6%8A%A5Unknown%20symbol%20device_create%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E6%A2%85%E5%93%A5ZYNQ-7010%EF%BC%89/"/>
      <url>/%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8%E6%8A%A5Unknown%20symbol%20device_create%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E6%A2%85%E5%93%A5ZYNQ-7010%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="加载驱动报Unknown-symbol-device-create错误解决（小梅哥ZYNQ-7010）"><a href="#加载驱动报Unknown-symbol-device-create错误解决（小梅哥ZYNQ-7010）" class="headerlink" title="加载驱动报Unknown symbol device_create错误解决（小梅哥ZYNQ-7010）"></a>加载驱动报Unknown symbol device_create错误解决（小梅哥ZYNQ-7010）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>今天根据正点原子的教程编写newchrdev驱动时，在使用modprobe命令加载ko文件时，报了Unknown symbol device_create错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ACZ702_System:/# modprobe leddev<br>leddev: loading out-of-tree module taints kernel.<br>leddev: disagrees about version of symbol device_create<br>leddev: Unknown symbol device_create (err -22)<br>leddev: disagrees about version of symbol device_destroy<br>leddev: Unknown symbol device_destroy (err -22)<br>modprobe: can&#x27;t load module leddev (leddev.ko): Invalid argument<br></code></pre></td></tr></table></figure><p>经过查找，找到原因是开发板使用的内核与编译驱动时的内核不是同一个，虽然版本相同，所以之前加载其他驱动时没有报错，加载这个驱动就报找不到符号的错误。解决方法就是再将这个内核编译一遍，然后让开发板使用新编译的内核就解决了</p><p>经过内核替换之后，使用相同的命令加载驱动，就会发现错误已经没有了，驱动可以正常加载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ACZ702_System:/lib/modules# modprobe newchrled.ko<br>newcheled major=245,minor=0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> NFS </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TFTP启动Linux内核（小梅哥ZYNQ-7010）</title>
      <link href="/%E4%BD%BF%E7%94%A8TFTP%E5%90%AF%E5%8A%A8Linux%E5%86%85%E6%A0%B8%EF%BC%88%E5%B0%8F%E6%A2%85%E5%93%A5ZYNQ-7010%EF%BC%89/"/>
      <url>/%E4%BD%BF%E7%94%A8TFTP%E5%90%AF%E5%8A%A8Linux%E5%86%85%E6%A0%B8%EF%BC%88%E5%B0%8F%E6%A2%85%E5%93%A5ZYNQ-7010%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用TFTP启动Linux内核（小梅哥ZYNQ-7010）"><a href="#使用TFTP启动Linux内核（小梅哥ZYNQ-7010）" class="headerlink" title="使用TFTP启动Linux内核（小梅哥ZYNQ-7010）"></a>使用TFTP启动Linux内核（小梅哥ZYNQ-7010）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p><strong>ZYNQ的启动与普通的LINUX芯片不太一样，需要在启动内核之前通过u-boot加载比特流文件，否则会因为没有FPGA的程序导致外设无法正常运行。</strong></p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>在<strong>Ubuntu</strong>虚拟机中，安装TFTP服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install tftpd-hpa<br></code></pre></td></tr></table></figure><p>然后将内核文件复制到**/tftpboot**目录中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp zImage /tftpboot<br><span class="hljs-meta">#</span><span class="bash"> 在Ubuntu 20.04中，tftpd-hpa的默认路径改为：/srv/tftp</span><br></code></pre></td></tr></table></figure><p>复制设备树文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp zynq-zc702.dtb /tftpboot<br></code></pre></td></tr></table></figure><p>测试服务端是否正常（可以忽略）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">tftp localhost<br>tftp&gt; get zImage<br>Received 7574653 bytes in 1.7 seconds<br></code></pre></td></tr></table></figure><h2 id="开发板配置"><a href="#开发板配置" class="headerlink" title="开发板配置"></a>开发板配置</h2><p>进入U-boot命令，从TFTP服务器获取比特流文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">#ZYNQ的U-boot环境中没有tftp命令，使用bootp命令代替<br>bootp 0x00100000 system.bit<br></code></pre></td></tr></table></figure><p>加载比特流文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">fpga loadb 0 0x100000 0x300000<br>#loadb [dev] [address] [size]  Load device from bitstream buffer (Xilinx only)<br></code></pre></td></tr></table></figure><p>正常情况下，比特流文件加载之后，FPGA程序就开始正常跑了，u-boot会有如下输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">Bytes transferred &#x3D; 2083866 (1fcc1a hex)<br>  design filename &#x3D; &quot;system_wrapper;UserID&#x3D;0XFFFFFFFF;Version&#x3D;2018.3_AR71948_AR71948&quot;<br>  part number &#x3D; &quot;7z010clg400&quot;<br>  date &#x3D; &quot;2022&#x2F;06&#x2F;27&quot;<br>  time &#x3D; &quot;15:53:54&quot;<br>  bytes in bitstream &#x3D; 2083740<br>zynq_align_dma_buffer: Align buffer at 10007e to fff80(swap 1)<br></code></pre></td></tr></table></figure><p>获取内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">bootp 0x08000000 zImage<br>#这里使用gzip压缩的zImage，也可以使用uImage<br></code></pre></td></tr></table></figure><p>下载设备树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">bootp 0x09000000 zynq-zc702.dtb<br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">bootz 0x08000000 - 0x09000000<br>#使用uImage格式的内核，需要将bootz命令改为bootm<br></code></pre></td></tr></table></figure><p>测试可以启动。</p><p>为了避免每次启动都输入这么多命令，可以将这些命令保存成变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">env set tftpboot &#39;bootp 0x100000 system.bit;fpga loadb 0 0x100000 0x300000;bootp 0x08000000 zImage;bootp 0x09000000 zynq-zc702.dtb;bootz 0x08000000 - 0x09000000&#39;<br></code></pre></td></tr></table></figure><p>保存变量到Flash中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">env save<br># saveenv    命令也可以<br></code></pre></td></tr></table></figure><p>保存过后，需要启动的时候只需要在U-boot中输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">run tftpboot<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> NFS </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决DaVinci Resolve 17剪辑软件在Windows高DPI下的缩放问题</title>
      <link href="/%E8%A7%A3%E5%86%B3DaVinci-Resolve%E5%89%AA%E8%BE%91%E8%BD%AF%E4%BB%B6%E5%9C%A8Windows%E9%AB%98DPI%E4%B8%8B%E7%9A%84%E7%BC%A9%E6%94%BE%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%A7%A3%E5%86%B3DaVinci-Resolve%E5%89%AA%E8%BE%91%E8%BD%AF%E4%BB%B6%E5%9C%A8Windows%E9%AB%98DPI%E4%B8%8B%E7%9A%84%E7%BC%A9%E6%94%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="解决DaVinci-Resolve-17剪辑软件在Windows高DPI下的缩放问题"><a href="#解决DaVinci-Resolve-17剪辑软件在Windows高DPI下的缩放问题" class="headerlink" title="解决DaVinci Resolve 17剪辑软件在Windows高DPI下的缩放问题"></a>解决DaVinci Resolve 17剪辑软件在Windows高DPI下的缩放问题</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>最近在学习达芬奇17剪辑软件，由于我使用的是15.6寸2.5K笔记本电脑来剪辑视频，达芬奇17软件默认情况下界面的字体没有进行缩放，因此看起来字体非常小，这给我使用带来了不小的困扰。</p><p>经过我在网上查找，找了了这两种解决达芬奇17软件缩放问题的方法：</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在达芬奇17的软件图标上，右击点击属性按钮，然后“<strong>兼容性=&gt;更改高DPI设置=&gt;打勾替代高DPI缩放行为=&gt;下拉选择系统=&gt;应用设置</strong>”<br>这种方法虽然在一定程度上解决了达芬奇17的缩放问题，但是缩放后字体边缘发虚，这在高DPI屏幕下的体验并不好，因此不推荐使用这种方法。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>需要先关闭方法一中的设置，<strong>关闭替代高DPI缩放行为</strong>。</p></li><li><p>在软件快捷方式的图标上<strong>右击</strong>，点击<strong>属性</strong>，选择<strong>快捷方式选项卡</strong>，在目标中，用下面的代码替换原来的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">powershell.exe -WindowStyle Hidden &quot; $Env:QT_SCALE_FACTOR&#x3D;1.5;start &#39;D:\Program Files\Blackmagic Design\DaVinci Resolve\Resolve.exe&#39;&quot;<br></code></pre></td></tr></table></figure><p>其中<strong>QT_SCALE_FACTOR=1.5</strong>表示软件缩放1.5倍，1.5可以根据自己的屏幕做相应调整。然后再次打开达芬奇17软件，可以发现字体变大了，并且字体没有发虚的现象，体验非常好。下面还有另外几个QT的环境变量，可以自己根据屏幕的情况去选择和开启，直接替换上面代码中的<strong>QT_SCALE_FACTOR</strong>即可，这里不再赘述。</p></li></ol><p>PS： QT环境变量</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>QT_AUTO_SCREEN_SCALE_FACTOR [boolean]</td><td>基于显示器的像素密度实现自动缩放。 这不会改变点大小字体的大小，因为点是物理单位。 多个屏幕可能会获得不同的比例因子</td></tr><tr><td>QT_SCALE_FACTOR [numeric]</td><td>定义整个应用程序的全局比例因子，包括点大小的字体。</td></tr><tr><td>QT_SCREEN_SCALE_FACTORS [list]</td><td>定每个屏幕的比例因子。 这不会改变点大小字体的大小。 此环境变量主要用于调试，或者用于具有错误的 EDID information 的显示器（扩展显示标识数据）。格式可以是分号分隔的比例因子列表，它们与 QGuiApplication::screens 的顺序相同，也可以是分号分隔的 name = value 对列表，其名称与 QScreen::name 相同。</td></tr></tbody></table><p>B乎居然还有人说你用错了屏幕，这屏幕不是给剪辑用的。真是无语，我就是偶尔使用笔记本电脑临时剪剪视频，寻找一个让达芬奇可用的方法，我要真是专业剪辑师，还轮得到你指指点点？B乎的用户质量真的是差了很多。</p><h2 id="2022-06-11发现的问题"><a href="#2022-06-11发现的问题" class="headerlink" title="2022-06-11发现的问题"></a>2022-06-11发现的问题</h2><p>在使用达芬奇17软件调音时，发现1.5倍缩放后调音面板变成了这样：</p><p><img src="/images/%E8%A7%A3%E5%86%B3DaVinci-Resolve%E5%89%AA%E8%BE%91%E8%BD%AF%E4%BB%B6%E5%9C%A8Windows%E9%AB%98DPI%E4%B8%8B%E7%9A%84%E7%BC%A9%E6%94%BE%E9%97%AE%E9%A2%98/Snipaste_2022-06-11_00-27-09.png" alt="Snipaste_2022-06-11_00-27-09.png"></p><p>界面中的声音轨道显示出了问题，且控件显示和实际位置对应不上，经过测试发现2倍整数缩放没有这个问题，猜测应该是调音面板使用旧版QT编写导致。如果需要分数缩放，还需要使用方法一才能够正常调音。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.jianshu.com/p/269462ea4540">Qt 对高 DPI 显示器的支持简介 - 简书 (jianshu.com)</a></p><p>[2] <a href="https://blog.himbeer.me/2020/03/07/fixing-davinci-resolve-high-dpi-scaling-on-windows/">Fixing DaVinci Resolve high-DPI scaling on Windows – Himbeer’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> DaVinciResolve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 视频剪辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华清远见FS-MP1A编译内核移植5寸MIPI屏幕不显示的解决方法</title>
      <link href="/%E5%8D%8E%E6%B8%85%E8%BF%9C%E8%A7%81FS-MP1A%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D5%E5%AF%B8MIPI%E5%B1%8F%E5%B9%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/%E5%8D%8E%E6%B8%85%E8%BF%9C%E8%A7%81FS-MP1A%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D5%E5%AF%B8MIPI%E5%B1%8F%E5%B9%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="华清远见FS-MP1A编译内核移植5寸MIPI屏幕不显示的解决方法"><a href="#华清远见FS-MP1A编译内核移植5寸MIPI屏幕不显示的解决方法" class="headerlink" title="华清远见FS-MP1A编译内核移植5寸MIPI屏幕不显示的解决方法"></a>华清远见FS-MP1A编译内核移植5寸MIPI屏幕不显示的解决方法</h1><p><strong>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</strong></p><p>我在学习和编译华清远见FS-MP1A开发板的内核时，根据教程移植5寸MIPI LCD的驱动，结果发现屏幕并不能够正常显示，具体表现为白屏。</p><p>开始我还以为是我某个地方操作不对，试了一遍又一遍，屏幕就是不能显示，编译也无报错。后来发现使用官方移植好的uImage文件，还是不能够正常显示，这就奇怪了，明明镜像里的uImage文件能够正常驱动屏幕，而官方提供的移植文件夹中的内核却不行呢？</p><p>后来我又发现，在ubuntu源码中提供的ubuntu内核源码可以正常驱动屏幕，于是我使用VSCode对.config文件进行比较，最后发现官方教程里少了一个步骤，导致屏幕不能够正常驱动。</p><p>解决方法：在内核中开启<strong>Enable legacy fbdev support for your modesetting driver</strong>就好了<strong>，Overallocation of the fbdev buffer</strong>选项保持默认100。再次编译内核，发现屏幕能够进入tty命令行了。</p><p>另外，如果发现屏幕有显示但不正确，应该是<strong>panel-sitronix-st7701.c</strong>文件没有替换正确，需要重新替换屏幕驱动文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">--- Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)        │ │  <br>  │ │    [ ]   DRM DP AUX Interface                                                 │ │  <br>  │ │    [ ]   Insert extra checks and debug info into the DRM range managers       │ │  <br>  │ │    &lt; &gt;   kselftests for DRM                                                   │ │  <br>  │ │    [*]   Enable legacy fbdev support for your modesetting driver              │ │  <br>  │ │    (100)   Overallocation of the fbdev buffer                                 │ │  <br>  │ │    [ ]     Shamelessly allow leaking of fbdev physical address (DANGEROUS)    │ │  <br>  │ │    [ ]   Allow to specify an EDID data set instead of probing for it<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内核 </tag>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> 驱动移植 </tag>
            
            <tag> MIPI LCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移植QT 5.11.3 EGLFS文件系统（STM32MP157）</title>
      <link href="/%E7%A7%BB%E6%A4%8DQT%205.11.3%20EGLFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E7%A7%BB%E6%A4%8DQT%205.11.3%20EGLFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="移植QT-5-11-3-EGLFS文件系统（STM32MP157）"><a href="#移植QT-5-11-3-EGLFS文件系统（STM32MP157）" class="headerlink" title="移植QT 5.11.3 EGLFS文件系统（STM32MP157）"></a>移植QT 5.11.3 EGLFS文件系统（STM32MP157）</h1><p>正在研究，更新中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt install libgles2-mesa-dev<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs plain">.&#x2F;configure \<br>     -prefix &#x2F;opt&#x2F;qt-armhf-5.11.3 \<br>     -xplatform linux-arm-gnueabi-g++ \<br>     -release \<br>     -opensource \<br>     -confirm-license \<br>     -opengl es2 \<br>     -eglfs \<br>     -no-openssl \<br>     -no-xcb \<br>     -no-compile-examples \<br>     -no-pkg-config \<br>     -no-iconv \<br>     -no-glib \<br>     -skip qt3d \<br>     -skip qtactiveqt \<br>     -skip qtandroidextras \<br>     -skip qtcanvas3d \<br>     -skip qtconnectivity \<br>     -skip qtdatavis3d \<br>     -skip qtdoc \<br>     -skip qtgamepad \<br>     -skip qtlocation \<br>     -skip qtmacextras \<br>     -skip qtnetworkauth \<br>     -skip qtpurchasing \<br>     -skip qtremoteobjects \<br>     -skip qtscript \<br>     -skip qtscxml \<br>     -skip qtsensors \<br>     -skip qtspeech \<br>     -skip qtsvg \<br>     -skip qttools \<br>     -skip qttranslations \<br>     -skip qtwayland \<br>     -skip qtwebengine \<br>     -skip qtwebview \<br>     -skip qtwinextras \<br>     -skip qtx11extras \<br>     -skip qtxmlpatterns \<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移植QT 5.11.3 linuxfb文件系统（STM32MP157）</title>
      <link href="/%E7%A7%BB%E6%A4%8DQT%205.11.3%20linuxfb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E7%A7%BB%E6%A4%8DQT%205.11.3%20linuxfb%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="移植QT-5-11-3-linuxfb文件系统（STM32MP157）"><a href="#移植QT-5-11-3-linuxfb文件系统（STM32MP157）" class="headerlink" title="移植QT 5.11.3 linuxfb文件系统（STM32MP157）"></a>移植QT 5.11.3 linuxfb文件系统（STM32MP157）</h1><p><strong>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</strong></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>解压<strong>qt-everywhere-src-5.11.3.tar.xz</strong>到/opt目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo tar -xvf qt-everywhere-src-5.11.3.tar.xz -C /opt<br></code></pre></td></tr></table></figure><p>进入/opt/qt-everywhere-src-5.11.3目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd &#x2F;opt&#x2F;qt-everywhere-src-5.11.3<br></code></pre></td></tr></table></figure><p>安装依赖（参考野火）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python -y<br>sudo apt install g++ make qt3d5-dev-tools -y<br>sudo apt install qml-module-qtquick-xmllistmodel -y<br>sudo apt install qml-module-qtquick-virtualkeyboard qml-module-qtquick-privatewidgets qml-module-qtquick-dialogs qml -y<br>sudo apt install libqt53dquickscene2d5 libqt53dquickrender5 libqt53dquickinput5 libqt53dquickextras5 libqt53dquickanimation5 libqt53dquick5 -y<br>sudo apt install qtdeclarative5-dev qml-module-qtwebengine qml-module-qtwebchannel qml-module-qtmultimedia qml-module-qtaudioengine -y<br></code></pre></td></tr></table></figure><p>修改qmake.conf配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi qtbase/mkspecs/linux-arm-gnueabi-g++/qmake.conf<br></code></pre></td></tr></table></figure><p>修改如下（主要修改交叉编译器路径）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span><span class="bash"> qmake configuration <span class="hljs-keyword">for</span> building with arm-linux-gnueabi-g++</span><br><span class="hljs-meta">#</span><br><br>MAKEFILE_GENERATOR      = UNIX<br>CONFIG                 += incremental<br>QMAKE_INCREMENTAL_STYLE = sublib<br><br>include(../common/linux.conf)<br>include(../common/gcc-base-unix.conf)<br>include(../common/g++-unix.conf)<br><br><span class="hljs-meta">#</span><span class="bash"> modifications to g++.conf</span><br>QMAKE_CC                = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc<br>QMAKE_CXX               = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++<br>QMAKE_LINK              = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++<br>QMAKE_LINK_SHLIB        = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++<br><br><span class="hljs-meta">#</span><span class="bash"> modifications to linux.conf</span><br>QMAKE_AR                = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-ar cqs<br>QMAKE_OBJCOPY           = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-objcopy<br>QMAKE_NM                = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-nm -P<br>QMAKE_STRIP             = /opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-strip<br>load(qt_config)<br></code></pre></td></tr></table></figure><p>查看特征列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure -list-features<br></code></pre></td></tr></table></figure><p>这里时间比较长，耐心等一下，大概两分钟。</p><p>设置编译选项（参考野火和正点原子）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">.&#x2F;configure \<br>     -prefix &#x2F;opt&#x2F;qt-armhf-5.11.3 \<br>     -xplatform linux-arm-gnueabi-g++ \<br>     -release \<br>     -opensource \<br>     -confirm-license \<br>     -no-openssl \<br>     -no-opengl \<br>     -no-xcb \<br>     -no-compile-examples \<br>     -no-pkg-config \<br>     -no-iconv \<br>     -no-glib \<br>     -skip qt3d \<br>     -skip qtactiveqt \<br>     -skip qtandroidextras \<br>     -skip qtcanvas3d \<br>     -skip qtconnectivity \<br>     -skip qtdatavis3d \<br>     -skip qtdoc \<br>     -skip qtgamepad \<br>     -skip qtlocation \<br>     -skip qtmacextras \<br>     -skip qtnetworkauth \<br>     -skip qtpurchasing \<br>     -skip qtremoteobjects \<br>     -skip qtscript \<br>     -skip qtscxml \<br>     -skip qtsensors \<br>     -skip qtspeech \<br>     -skip qtsvg \<br>     -skip qttools \<br>     -skip qttranslations \<br>     -skip qtwayland \<br>     -skip qtwebengine \<br>     -skip qtwebview \<br>     -skip qtwinextras \<br>     -skip qtx11extras \<br>     -skip qtxmlpatterns \<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs plain">Creating qmake...<br>.Done.<br><br>This is the Qt Open Source Edition.<br><br>You have already accepted the terms of the Open Source license.<br><br>Running configuration tests...<br>Done running configuration tests.<br><br>Configure summary:<br><br>Building on: linux-g++ (x86_64, CPU features: mmx sse sse2)<br>Building for: linux-arm-gnueabi-g++ (arm, CPU features: &lt;none&gt;)<br>Configuration: cross_compile use_gold_linker enable_new_dtags largefile precompile_header shared rpath release c++11 c++14 c++1z concurrent dbus no-pkg-config reduce_exports stl<br>Build options:<br>  Mode ................................... release<br>  Optimize release build for size ........ no<br>  Building shared libraries .............. yes<br>  Using C++ standard ..................... C++1z<br>  Using ccache ........................... no<br>  Using gold linker ...................... yes<br>  Using new DTAGS ........................ yes<br>  Using precompiled headers .............. yes<br>  Using LTCG ............................. no<br>  Target compiler supports:<br>    NEON ................................. no<br>  Build parts ............................ libs examples<br>Qt modules and options:<br>  Qt Concurrent .......................... yes<br>  Qt D-Bus ............................... yes<br>  Qt D-Bus directly linked to libdbus .... no<br>  Qt Gui ................................. yes<br>  Qt Network ............................. yes<br>  Qt Sql ................................. yes<br>  Qt Testlib ............................. yes<br>  Qt Widgets ............................. yes<br>  Qt Xml ................................. yes<br>Support enabled for:<br>  Using pkg-config ....................... no<br>  udev ................................... no<br>  Using system zlib ...................... no<br>Qt Core:<br>  DoubleConversion ....................... yes<br>    Using system DoubleConversion ........ no<br>  GLib ................................... no<br>  iconv .................................. no<br>  ICU .................................... no<br>  Tracing backend ........................ &lt;none&gt;<br>  Logging backends:<br>    journald ............................. no<br>    syslog ............................... no<br>    slog2 ................................ no<br>  Using system PCRE2 ..................... no<br>Qt Network:<br>  getifaddrs() ........................... yes<br>  IPv6 ifname ............................ yes<br>  libproxy ............................... no<br>  Linux AF_NETLINK ....................... yes<br>  OpenSSL ................................ no<br>    Qt directly linked to OpenSSL ........ no<br>  OpenSSL 1.1 ............................ no<br>  SCTP ................................... no<br>  Use system proxies ..................... yes<br>Qt Gui:<br>  Accessibility .......................... yes<br>  FreeType ............................... yes<br>    Using system FreeType ................ no<br>  HarfBuzz ............................... yes<br>    Using system HarfBuzz ................ no<br>  Fontconfig ............................. no<br>  Image formats:<br>    GIF .................................. yes<br>    ICO .................................. yes<br>    JPEG ................................. yes<br>      Using system libjpeg ............... no<br>    PNG .................................. yes<br>      Using system libpng ................ no<br>  EGL .................................... no<br>  OpenVG ................................. no<br>  OpenGL:<br>    Desktop OpenGL ....................... no<br>    OpenGL ES 2.0 ........................ no<br>    OpenGL ES 3.0 ........................ no<br>    OpenGL ES 3.1 ........................ no<br>    OpenGL ES 3.2 ........................ no<br>  Vulkan ................................. no<br>  Session Management ..................... yes<br>Features used by QPA backends:<br>  evdev .................................. yes<br>  libinput ............................... no<br>  INTEGRITY HID .......................... no<br>  mtdev .................................. no<br>  tslib .................................. no<br>  xkbcommon-evdev ........................ no<br>QPA backends:<br>  DirectFB ............................... no<br>  EGLFS .................................. no<br>  LinuxFB ................................ yes<br>  VNC .................................... yes<br>  Mir client ............................. no<br>Qt Widgets:<br>  GTK+ ................................... no<br>  Styles ................................. Fusion Windows<br>Qt PrintSupport:<br>  CUPS ................................... no<br>Qt Sql:<br>  DB2 (IBM) .............................. no<br>  InterBase .............................. no<br>  MySql .................................. no<br>  OCI (Oracle) ........................... no<br>  ODBC ................................... no<br>  PostgreSQL ............................. no<br>  SQLite2 ................................ no<br>  SQLite ................................. yes<br>    Using system provided SQLite ......... no<br>  TDS (Sybase) ........................... no<br>Qt Testlib:<br>  Tester for item models ................. yes<br>Qt SerialBus:<br>  Socket CAN ............................. yes<br>  Socket CAN FD .......................... yes<br>Qt QML:<br>  QML network support .................... yes<br>  QML debugging and profiling support .... yes<br>  QML delegate model ..................... yes<br>Qt Quick:<br>  Direct3D 12 ............................ no<br>  AnimatedImage item ..................... yes<br>  Canvas item ............................ yes<br>  Support for Qt Quick Designer .......... yes<br>  Flipable item .......................... yes<br>  GridView item .......................... yes<br>  ListView item .......................... yes<br>  Path support ........................... yes<br>  PathView item .......................... yes<br>  Positioner items ....................... yes<br>  Repeater item .......................... yes<br>  ShaderEffect item ...................... yes<br>  Sprite item ............................ yes<br>Qt Quick Controls 2:<br>  Styles ................................. Default Fusion Imagine Material Universal<br>Qt Quick Templates 2:<br>  Hover support .......................... yes<br>  Multi-touch support .................... yes<br>Qt Multimedia:<br>  ALSA ................................... no<br>  GStreamer 1.0 .......................... no<br>  GStreamer 0.10 ......................... no<br>  Video for Linux ........................ yes<br>  OpenAL ................................. no<br>  PulseAudio ............................. no<br>  Resource Policy (libresourceqt5) ....... no<br>  Windows Audio Services ................. no<br>  DirectShow ............................. no<br>  Windows Media Foundation ............... no<br><br>Note: Also available for Linux: linux-clang linux-icc<br><br>Qt is now configured for building. Just run &#39;make&#39;.<br>Once everything is built, you must run &#39;make install&#39;.<br>Qt will be installed into &#39;&#x2F;opt&#x2F;qt-armhf-5.11.3&#39;.<br><br>Prior to reconfiguration, make sure you remove any leftovers from<br>the previous build.<br><br></code></pre></td></tr></table></figure><p>无报错，开始编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j4<br></code></pre></td></tr></table></figure><p>漫长的过程，等啊等啊等啊等。。。。。我的电脑编译了近40分钟。</p><p>编译完成后没有成功的提示，只要日志没有错误信息就可以了。</p><p>然后安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make install<br></code></pre></td></tr></table></figure><p>安装完成后，进入/opt/qt-armhf-5.11.3目录会看到QT的文件。</p><p>在开发板上使用QT时，需要将这些文件拷贝到开发板相同的目录中才可以。</p><p>拷贝到nfs_rootfs目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp -r qt-armhf-5.11.3 ~/nfs_rootfs/opt<br></code></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">vi ~&#x2F;.bashrc<br></code></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">export QTDIR&#x3D;&#x2F;opt&#x2F;qt-armhf-5.11.3<br>export QT_QPA_PLATFORM_PLUGIN_PATH&#x3D;$QTDIR&#x2F;plugins<br>export LD_LIBRARY_PATH&#x3D;$QTDIR&#x2F;lib:$QTDIR&#x2F;plugins&#x2F;platforms<br>export QT_QPA_FONTDIR&#x3D;$QTDIR&#x2F;lib&#x2F;fonts<br>export QT_QPA_PLATFORM&#x3D;linuxfb:fb&#x3D;&#x2F;dev&#x2F;fb0<br></code></pre></td></tr></table></figure><p>建立字体存放文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir ~/nfs_rootfs/opt/qt-armhf-5.11.3/lib/fonts<br></code></pre></td></tr></table></figure><p>下载文泉驿正黑字体：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install fonts-wqy-zenhei<br></code></pre></td></tr></table></figure><p>复制字体：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp /usr/share/fonts/truetype/wqy/wqy-zenhei.ttc ~/nfs_rootfs/opt/qt-armhf-5.11.3/lib/fonts/<br></code></pre></td></tr></table></figure><p>运行时需要添加参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">-platform linuxfb<br></code></pre></td></tr></table></figure><p>完成！</p><p>参考资料：</p><p>[1] <a href="https://blog.csdn.net/qq_37654240/article/details/109639331">Qt源码编译configure参数列表（全）_尛少年的博客-CSDN博客_qt 编译参数</a></p><p>[2] <a href="https://doc.embedfire.com/linux/qt/embed/zh/latest/ebf_qt/install/install_arm.html">Qt环境搭建–ARM — 嵌入式Qt应用开发实战——基于鲁班猫 文档 (embedfire.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>降级VMware10能够提高VMware虚拟机的3D能力和运行速度</title>
      <link href="/%E9%99%8D%E7%BA%A7VMware10%E8%83%BD%E5%A4%9F%E6%8F%90%E9%AB%98VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%843D%E8%83%BD%E5%8A%9B%E5%92%8C%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/"/>
      <url>/%E9%99%8D%E7%BA%A7VMware10%E8%83%BD%E5%A4%9F%E6%8F%90%E9%AB%98VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%843D%E8%83%BD%E5%8A%9B%E5%92%8C%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="降级VMware10能够提高VMware虚拟机的3D能力和运行速度"><a href="#降级VMware10能够提高VMware虚拟机的3D能力和运行速度" class="headerlink" title="降级VMware10能够提高VMware虚拟机的3D能力和运行速度"></a>降级VMware10能够提高VMware虚拟机的3D能力和运行速度</h1><p><strong>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</strong></p><p>最近在编译Linux内核和移植QT文件系统，开始使用虚拟机VMware16.2.3安装装Ubuntu18.04系统，但是总发现虚拟机内桌面动画不流畅，且虚拟机本体的空间占用较大，加上我这台电脑本就是好几年前的产物，配置较低，虽然编译Linux内核没有啥问题，但感觉就是较卡顿。</p><p>后来想到，之前在玩<strong>仙剑奇侠传五前传</strong>的时候，最开始使用别人分享的VMware镜像玩（当然后来买了正版），当时使用VMware 9，感觉速度啥的还可以，后来升级VMware 12就感觉游戏帧率没那么高了，变得卡顿了。于是我开始在网络上寻找答案。</p><p>后来，经过搜索得知，VMware 11及以后版本虚拟机开始限制<strong>专用视频内存</strong>，VMware 11限制到<strong>64MB</strong>，VMware 12及以后版本限制到<strong>4MB</strong>，所以说动画变得卡顿了。</p><p>我开始降级VMware 10版本，下载安装包后安装发现在安装过程中会报<strong>tool-windows.msi</strong>错误，看来毕竟是老软件，对最新的Win10有些不兼容。好在这只影响VMware-tool的部分功能（剪切板分享，拖拽文件，快速安装VMware-tools）。经过测试，Ubuntu 18.04的桌面动画确实变得更快了，流畅了许多，心情大好。</p><p>后来又发现，在最新Win10系统下，安装VMware 12能够体验到VMware-tool的功能，同时虚拟机本体体积占用也更小，设置<strong>虚拟机兼容性</strong>为VMware 10后，专用视频内存不会被限制到4MB，甚至感觉3D性能比直接安装VMware 10更高，不知道是不是错觉。</p><p>所以，最后我推荐使用VMware12.1.1版本并将虚拟机兼容性设置为VMware 10，达到更高的3D运行速度。VMware12.1.1的官方下载地址：</p><p><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.1.1-3770994.exe">https://download3.VMware.com/software/wkst/file/VMware-workstation-full-12.1.1-3770994.exe</a></p><p>参考资料：</p><p>[1] <a href="https://developer.aliyun.com/article/556316">VMware workstation虚拟显卡显存多兼容性好的是10-阿里云开发者社区 (aliyun.com)</a></p><p>[2]  <a href="http://www.pc-fly.com/a/shenmilingyu/article-301750-1.html">从VM11开始，虚拟图形卡的性能是增强还是减弱？_显卡_电脑杂谈 (pc-fly.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核添加RTL8723DU驱动（STM32MP157）</title>
      <link href="/Linux%E5%86%85%E6%A0%B8%E6%B7%BB%E5%8A%A0RTL8723DU%E9%A9%B1%E5%8A%A8%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/Linux%E5%86%85%E6%A0%B8%E6%B7%BB%E5%8A%A0RTL8723DU%E9%A9%B1%E5%8A%A8%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核添加RTL8723DU驱动（STM32MP157）"><a href="#Linux内核添加RTL8723DU驱动（STM32MP157）" class="headerlink" title="Linux内核添加RTL8723DU驱动（STM32MP157）"></a>Linux内核添加RTL8723DU驱动（STM32MP157）</h1>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Debootstrap制作Debian文件系统（STM32MP157）</title>
      <link href="/%E4%BD%BF%E7%94%A8Debootstrap%E5%88%B6%E4%BD%9CDebian%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E4%BD%BF%E7%94%A8Debootstrap%E5%88%B6%E4%BD%9CDebian%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Debootstrap制作Debian文件系统（STM32MP157）"><a href="#使用Debootstrap制作Debian文件系统（STM32MP157）" class="headerlink" title="使用Debootstrap制作Debian文件系统（STM32MP157）"></a>使用Debootstrap制作Debian文件系统（STM32MP157）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="Debootstrap第一阶段"><a href="#Debootstrap第一阶段" class="headerlink" title="Debootstrap第一阶段"></a>Debootstrap第一阶段</h2><p>这个阶段会下载一些基本的包。</p><ol><li>在Ubuntu主机安装Debootstrap软件及依赖：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install debootstrap qemu-user-static<br></code></pre></td></tr></table></figure><ol start="2"><li>新建文件夹，用来存放根文件系统：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">mkdir rootfs<br></code></pre></td></tr></table></figure><ol start="3"><li>制作Debian根文件系统：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo debootstrap --foreign --arch armhf buster rootfs http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F;<br></code></pre></td></tr></table></figure><p>如果没有报错就说明完成了，时间大概几分钟。</p><h2 id="Debootstrap第二阶段"><a href="#Debootstrap第二阶段" class="headerlink" title="Debootstrap第二阶段"></a>Debootstrap第二阶段</h2><p>这个阶段会安装包。</p><ol><li>复制<strong>qemu-arm-static</strong>文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo cp &#x2F;usr&#x2F;bin&#x2F;qemu-arm-static rootfs&#x2F;usr&#x2F;bin<br></code></pre></td></tr></table></figure><ol start="2"><li>执行第二阶段：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo DEBIAN_FRONTEND&#x3D;noninteractive DEBCONF_NONINTERACTIVE_SEEN&#x3D;true LC_ALL&#x3D;C LANGUAGE&#x3D;C LANG&#x3D;C chroot rootfs debootstrap&#x2F;debootstrap --second-stage<br></code></pre></td></tr></table></figure><p>其中：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true</td><td>设置为命令行形式交互</td></tr><tr><td>LC_ALL=C LANGUAGE=C LANG=C</td><td>设置语言</td></tr></tbody></table><ol start="3"><li>在Unpacking the base system…过程会卡很长一段时间，我的是机械硬盘，需要十几分钟，需要耐心等待。出现下面的提示就说明成功了：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">I: Base system installed successfully.<br></code></pre></td></tr></table></figure><h2 id="第三阶段（根据需要选择执行）"><a href="#第三阶段（根据需要选择执行）" class="headerlink" title="第三阶段（根据需要选择执行）"></a>第三阶段（根据需要选择执行）</h2><p>此阶段进行一些基础配置，否则连系统都登录不进去。</p><h3 id="添加新用户，更改密码"><a href="#添加新用户，更改密码" class="headerlink" title="添加新用户，更改密码"></a>添加新用户，更改密码</h3><p>使用<strong>chroot</strong>切换目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo chroot rootfs&#x2F;<br></code></pre></td></tr></table></figure><p>修改<strong>root</strong>用户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">passwd<br></code></pre></td></tr></table></figure><p>添加新用户（用户名：debian）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">useradd -m -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;debian -G sudo debian<br></code></pre></td></tr></table></figure><p>修改debian用户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">passwd debian<br></code></pre></td></tr></table></figure><h3 id="安装基础包"><a href="#安装基础包" class="headerlink" title="安装基础包"></a>安装基础包</h3><p>修改软件源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nano &#x2F;etc&#x2F;apt&#x2F;source.list<br></code></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian buster main contrib non-free<br>deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian buster-backports main contrib non-free<br>deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free<br>deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian buster-updates main contrib non-free<br></code></pre></td></tr></table></figure><p>更新包缓存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt update<br></code></pre></td></tr></table></figure><p>安装基本软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install sudo busybox lsof<br></code></pre></td></tr></table></figure><p>安装基本网络包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install netbase net-tools ethtool udev iproute2 iputils-ping ifupdown isc-dhcp-client ssh ifupdown<br></code></pre></td></tr></table></figure><p>安装实用程序包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install locales vim adduser less wget dialog usbutils<br></code></pre></td></tr></table></figure><p>安装蓝牙配置工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install bluez<br></code></pre></td></tr></table></figure><p>安装无线配置工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install firmware-iwlwifi wireless-tools<br></code></pre></td></tr></table></figure><p>安装其他包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">apt install rsyslog htop iputils-ping nfs-common python3<br></code></pre></td></tr></table></figure><p><strong>待补充。。。</strong></p><h3 id="添加debian用户到sudo列表"><a href="#添加debian用户到sudo列表" class="headerlink" title="添加debian用户到sudo列表"></a>添加debian用户到sudo列表</h3><p>给/etc/sudoers文件添加可写权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">chmod u+w &#x2F;etc&#x2F;sudoers<br></code></pre></td></tr></table></figure><p>添加debian用户到sudo列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nano &#x2F;etc&#x2F;sudoers<br></code></pre></td></tr></table></figure><p>在root ALL=(ALL:ALL) ALL下面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">debian ALL&#x3D;(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>去掉可写权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">chmod u-w &#x2F;etc&#x2F;sudoers<br></code></pre></td></tr></table></figure><h3 id="设置DNS服务器"><a href="#设置DNS服务器" class="headerlink" title="设置DNS服务器"></a>设置DNS服务器</h3><p>设置DNS服务器地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nano &#x2F;etc&#x2F;resolv.conf<br></code></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nameserver 8.8.8.8<br></code></pre></td></tr></table></figure><h3 id="设置语言变量"><a href="#设置语言变量" class="headerlink" title="设置语言变量"></a>设置语言变量</h3><p>修改文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim &#x2F;root&#x2F;.bashrc<br></code></pre></td></tr></table></figure><p>添加下面的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">export LANGUAGE&#x3D;&quot;en_US.UTF-8&quot;<br>export LANG&#x3D;en_US:zh_CN.UTF-8<br>export LC_ALL&#x3D;C<br></code></pre></td></tr></table></figure><p>设置locales包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">dpkg-reconfigure locales<br></code></pre></td></tr></table></figure><h3 id="更改Hostname"><a href="#更改Hostname" class="headerlink" title="更改Hostname"></a>更改Hostname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nano &#x2F;etc&#x2F;hostname<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">FS-MP1A<br></code></pre></td></tr></table></figure><h1 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h1><ol><li>退出chroot：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">exit<br></code></pre></td></tr></table></figure><ol start="2"><li>打包rootfs：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo tar -zcvf debian.tar.gz rootfs<br></code></pre></td></tr></table></figure><ol start="3"><li>放入nfs目录，测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd rootfs<br>sudo mv * ~&#x2F;nfs_rootfs<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TFTP启动Linux内核（STM32MP157）</title>
      <link href="/%E4%BD%BF%E7%94%A8TFTP%E5%90%AF%E5%8A%A8Linux%E5%86%85%E6%A0%B8%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E4%BD%BF%E7%94%A8TFTP%E5%90%AF%E5%8A%A8Linux%E5%86%85%E6%A0%B8%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用TFTP启动Linux内核（STM32MP157）"><a href="#使用TFTP启动Linux内核（STM32MP157）" class="headerlink" title="使用TFTP启动Linux内核（STM32MP157）"></a>使用TFTP启动Linux内核（STM32MP157）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>在<strong>Ubuntu</strong>虚拟机中，安装TFTP服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install tftpd-hpa<br></code></pre></td></tr></table></figure><p>然后将内核文件复制到**/var/lib/tftpboot**目录中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp uImage /var/lib/tftpboot<br><span class="hljs-meta">#</span><span class="bash"> 在Ubuntu 20.04中，tftpd-hpa的默认路径改为：/srv/tftp</span><br></code></pre></td></tr></table></figure><p>复制设备树文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp stm32mp157a-fsmp1a-mipi050.dtb /var/lib/tftpboot<br></code></pre></td></tr></table></figure><p>测试服务端是否正常（可以忽略）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">tftp localhost<br>tftp&gt; get uImage<br>Received 7574653 bytes in 1.7 seconds<br></code></pre></td></tr></table></figure><h2 id="开发板配置"><a href="#开发板配置" class="headerlink" title="开发板配置"></a>开发板配置</h2><p>进入U-boot命令，下载内核：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">tftp 0xc2000040 uImage<br></code></pre></td></tr></table></figure><p>下载设备树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">tftp 0xc1000000 stm32mp157a-fsmp1a-mipi050.dtb<br></code></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">bootm 0xc2000040 - 0xc1000000<br></code></pre></td></tr></table></figure><p>测试可以启动。</p><p>为了避免每次启动都输入这么多命令，可以将这些命令保存成变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">env set tftpboot &#39;tftp 0xc2000040 uImage;tftp 0xc1000000 stm32mp157a-fsmp1a-mipi050.dtb;bootm 0xc2000040 - 0xc1000000&#39;<br></code></pre></td></tr></table></figure><p>将变量保存到SD/MMC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">env save<br># saveenv    命令也可以<br></code></pre></td></tr></table></figure><p>保存过后，需要启动的时候只需要在U-boot中输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">run tftpboot<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用NFS挂载rootfs启动Linux（STM32MP157）</title>
      <link href="/%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BDrootfs%E5%90%AF%E5%8A%A8Linux%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BDrootfs%E5%90%AF%E5%8A%A8Linux%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用NFS挂载rootfs启动Linux（STM32MP157）"><a href="#使用NFS挂载rootfs启动Linux（STM32MP157）" class="headerlink" title="使用NFS挂载rootfs启动Linux（STM32MP157）"></a>使用NFS挂载rootfs启动Linux（STM32MP157）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>今天尝试使用NFS挂载的方式启动华清远见FSMP-1A开发板，又碰到了很多问题，卡了我很长时间，现在解决了，笔记分享一下。</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>首先在<strong>Ubuntu</strong>主机内安装nfs服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install nfs-kernel-server<br></code></pre></td></tr></table></figure><p>修改nfs服务的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/exports<br></code></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 下面的路径需要修改<br>&#x2F;home&#x2F;ubuntu&#x2F;nfs_rootfs        *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p>然后重启nfs-kernel-server服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl restart nfs-kernel-server<br></code></pre></td></tr></table></figure><p>如果此时发生错误，通常是路径不对，请检查这个路径的目录是否存在！</p><h2 id="开发板配置"><a href="#开发板配置" class="headerlink" title="开发板配置"></a>开发板配置</h2><p>进入U-boot命令，然后设置<strong>bootargs</strong>变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">env set bootargs root&#x3D;&#x2F;dev&#x2F;nfs nfsroot&#x3D;192.168.108.219:&#x2F;home&#x2F;ubuntu&#x2F;nfs_rootfs,nfsvers&#x3D;3 ip&#x3D;dhcp rootwait rw earlyprintk console&#x3D;ttySTM0,115200<br></code></pre></td></tr></table></figure><p>参数解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">env set bootargs root&#x3D;&#x2F;dev&#x2F;nfs nfsroot&#x3D;$服务端IP:$服务端路径,nfsvers&#x3D;3 ip&#x3D;dhcp rootwait rw earlyprintk console&#x3D;ttySTM0,115200<br></code></pre></td></tr></table></figure><p>其中，nfsvers=3参数一定要加，之前一直无法挂载成功就是这个原因。具体原因是内核默认使用v2版本的nfs协议，而现在nfs-kernel-server默认v3以上版本协议，所以造成无法挂载。</p><p>然后就可以尽情玩耍了，后来发现dev目录下没有console和null节点也可以挂载，如果碰到不能启动的情况，可以试试手动创建console和null节点。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式QT屏幕旋转（STM32MP157）</title>
      <link href="/%E5%B5%8C%E5%85%A5%E5%BC%8FQT%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%EF%BC%88STM32MP157%EF%BC%89/"/>
      <url>/%E5%B5%8C%E5%85%A5%E5%BC%8FQT%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%EF%BC%88STM32MP157%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式QT屏幕旋转（STM32MP157）"><a href="#嵌入式QT屏幕旋转（STM32MP157）" class="headerlink" title="嵌入式QT屏幕旋转（STM32MP157）"></a>嵌入式QT屏幕旋转（STM32MP157）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="EGLFS"><a href="#EGLFS" class="headerlink" title="EGLFS"></a>EGLFS</h2><p>我用的是华清远见的FS-MP1A开发板+MIPI5寸屏幕，这块屏幕是竖屏的，而我经常需要做横屏的项目，我找到了修改QT环境变量来旋转屏幕的方法，下面给出具体操作过程：</p><ol><li><p>修改/etc/profile.d/qt-eglfs.sh文件，添加环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">旋转屏幕90度</span><br>export QT_QPA_EGLFS_ROTATION=90<br><span class="hljs-meta">#</span><span class="bash">关闭LIBINPUT</span><br>export QT_QPA_EGLFS_NO_LIBINPUT=1<br><span class="hljs-meta">#</span><span class="bash">旋转触摸屏90度</span><br>export QT_QPA_EVDEV_TOUCHSCREEN_PARAMETERS=/dev/input/event0:rotate=90<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 嵌入式Linux </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解Linux用户名密码（使用john暴力破解）</title>
      <link href="/%E7%A0%B4%E8%A7%A3Linux%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%EF%BC%88%E4%BD%BF%E7%94%A8john%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%EF%BC%89/"/>
      <url>/%E7%A0%B4%E8%A7%A3Linux%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%EF%BC%88%E4%BD%BF%E7%94%A8john%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="破解Linux用户名密码（使用john暴力破解）"><a href="#破解Linux用户名密码（使用john暴力破解）" class="headerlink" title="破解Linux用户名密码（使用john暴力破解）"></a>破解Linux用户名密码（使用john暴力破解）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>买了一块华清远见的FS-MP1A（MP157）开发板，结果刷ubuntu系统的时候，发现登录不了，找了好久都没有找到登录密码，于是开始bing…就找到了使用<strong>john</strong>工具暴力破解密码的方法，下面是操作过程：</p><ol><li><p>先下载john工具，下载地址：<a href="https://www.openwall.com/john/">John the Ripper password cracker (openwall.com)</a>我下载的是Windows版。</p></li><li><p>提取出需要破解系统的**/etc/passwd<strong>和</strong>/etc/shadow**文件。</p></li><li><p>执行命令，用于合并passwd和shadow中的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\unshadow.exe C:\Users\Lenovo\Desktop\passwd C:\Users\Lenovo\Desktop\shadow &gt; test.txt<br></code></pre></td></tr></table></figure></li><li><p>执行命令，开始破解：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\john.exe test.txt<br></code></pre></td></tr></table></figure><p>这里会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Error: UTF-16 BOM seen in input file.<br></code></pre></td></tr></table></figure><p>使用记事本将编码转换为ANSI格式，再次执行破解命令，得到输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">Warning: detected hash type &quot;sha512crypt&quot;, but the string is also recognized as &quot;sha512crypt-opencl&quot;<br>Use the &quot;--format&#x3D;sha512crypt-opencl&quot; option to force loading these as that type instead<br>Using default input encoding: UTF-8<br>Loaded 2 password hashes with 2 different salts (sha512crypt, crypt(3) $6$ [SHA512 128&#x2F;128 SSE2 2x])<br>Cost 1 (iteration count) is 5000 for all loaded hashes<br>Will run 4 OpenMP threads<br>Proceeding with single, rules:Single<br>Press &#39;q&#39; or Ctrl-C to abort, almost any other key for status<br>Warning: Only 2 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 4 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 6 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 2 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 4 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 5 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 3 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 5 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 3 candidates buffered for the current salt, minimum 8 needed for performance.<br>Warning: Only 7 candidates buffered for the current salt, minimum 8 needed for performance.<br>Further messages of this type will be suppressed.<br>To see less of these warnings, enable &#39;RelaxKPCWarningCheck&#39; in john.conf<br>Almost done: Processing the remaining buffered candidate passwords, if any.<br>Proceeding with wordlist:&#x2F;run&#x2F;password.lst, rules:Wordlist<br>1                (linux)<br>1                (root)<br>2g 0:00:00:04 DONE 2&#x2F;3 (2022-04-22 15:21) 0.4839g&#x2F;s 1023p&#x2F;s 1645c&#x2F;s 1645C&#x2F;s chacha..ford<br>Use the &quot;--show&quot; option to display all of the cracked passwords reliably<br>Session completed<br></code></pre></td></tr></table></figure></li><li><p>查看破解结果，使用记事本打开john.pot文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">$6$J9pIEJ7t$d7Lnt154swKT.deamo.KWpu66wLfEHd&#x2F;YAhW5bqcZqDXH3zlAPs3I3nJdOnq0o3zL7AL&#x2F;v6GfzGQmAuzVnDHx1:1<br>$6$b1xnKYmz$G4fIZsc5PWvPcZ0yKcVx7GkJodRYE5OMOm3nGdHOCu9W6NYlD9D4D7wMhPusErUeL8nFLuMTq25znw2OXIoy31:1<br></code></pre></td></tr></table></figure><p>冒号后面的就是明文密码，可以看到密码为“1”。</p><p>真是服了，忙活半天原来密码这么简单。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 F429 LittleVGL 使用DMA2D 加速（阻塞式）</title>
      <link href="/STM32-F429-LittleVGL-%E4%BD%BF%E7%94%A8DMA2D-%E5%8A%A0%E9%80%9F%EF%BC%88%E9%98%BB%E5%A1%9E%E5%BC%8F%EF%BC%89/"/>
      <url>/STM32-F429-LittleVGL-%E4%BD%BF%E7%94%A8DMA2D-%E5%8A%A0%E9%80%9F%EF%BC%88%E9%98%BB%E5%A1%9E%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-F429-LittleVGL-使用DMA2D-加速（阻塞式）"><a href="#STM32-F429-LittleVGL-使用DMA2D-加速（阻塞式）" class="headerlink" title="STM32 F429 LittleVGL 使用DMA2D 加速（阻塞式）"></a>STM32 F429 LittleVGL 使用DMA2D 加速（阻塞式）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在ltdc.c文件中添加使用DMA2D画点的函数（先在STM32CubeMX中启用DMA2D）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_DMA2D_Fill_Color</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> start_x, <span class="hljs-keyword">uint16_t</span> start_y, <span class="hljs-keyword">uint16_t</span> end_x, <span class="hljs-keyword">uint16_t</span> end_y, <span class="hljs-keyword">uint16_t</span> *color)</span></span><br><span class="hljs-function"></span>&#123;<br>  <br>  <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LTDC_FRAMEBUF_ADDR    0xc0000000; <span class="hljs-comment">//显存基地址</span></span><br>  <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TFT_WEIGHT            800         <span class="hljs-comment">//屏幕宽</span></span><br>  <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TFT_WIDTH             480         <span class="hljs-comment">//屏幕高</span></span><br>  <br>  DMA2D_InitTypeDef      DMA2D_InitStruct;<br>  <br>  <span class="hljs-keyword">uint32_t</span>  Xaddress = <span class="hljs-number">0</span>;                 <span class="hljs-comment">//显存填充地址</span><br>  <span class="hljs-keyword">uint32_t</span> timeout=<span class="hljs-number">0</span>;                     <span class="hljs-comment">//超时</span><br>  <span class="hljs-keyword">uint16_t</span>  OutputOffset;                 <span class="hljs-comment">//地址偏移</span><br>  <span class="hljs-keyword">uint16_t</span>  NumberOfLine;                 <span class="hljs-comment">//填充行数</span><br>  <span class="hljs-keyword">uint16_t</span>  PixelPerLine;                 <span class="hljs-comment">//每行像素</span><br>         <br>  Xaddress = <span class="hljs-number">0xc0000000</span> + <span class="hljs-number">2</span>* (<span class="hljs-number">800</span> * start_y + start_x); <span class="hljs-comment">//计算填充显存地址</span><br>  OutputOffset = <span class="hljs-number">800</span>-(end_x-start_x+<span class="hljs-number">1</span>);                 <span class="hljs-comment">//计算偏移地址</span><br>  NumberOfLine = end_x-start_x+<span class="hljs-number">1</span>;                       <span class="hljs-comment">//计算填充行数</span><br>  PixelPerLine = end_y-start_y+<span class="hljs-number">1</span>;                       <span class="hljs-comment">//计算每行像素</span><br><br>  <span class="hljs-comment">/* 配置 DMA2D */</span><br>  DMA2D-&gt;CR&amp;=~(DMA2D_CR_START);                   <span class="hljs-comment">//先停止DMA2D</span><br>  DMA2D-&gt;CR=DMA2D_M2M;                            <span class="hljs-comment">//存储器到存储器模式</span><br>  DMA2D-&gt;FGPFCCR=DMA2D_RGB565;                    <span class="hljs-comment">//设置颜色格式</span><br>  DMA2D-&gt;FGOR=<span class="hljs-number">0</span>;                                  <span class="hljs-comment">//前景层行偏移为0</span><br>  DMA2D-&gt;OOR=OutputOffset;                        <span class="hljs-comment">//设置行偏移</span><br><br>  DMA2D-&gt;FGMAR=(<span class="hljs-keyword">uint32_t</span>)color;                   <span class="hljs-comment">//源地址</span><br>  DMA2D-&gt;OMAR=Xaddress;                           <span class="hljs-comment">//输出存储器地址</span><br>  DMA2D-&gt;NLR=(PixelPerLine)|(NumberOfLine&lt;&lt;<span class="hljs-number">16</span>);   <span class="hljs-comment">//设定行数寄存器</span><br>  DMA2D-&gt;CR|=DMA2D_CR_START;                      <span class="hljs-comment">//启动DMA2D</span><br>  <br>  <span class="hljs-keyword">while</span>((DMA2D-&gt;ISR&amp;(DMA2D_FLAG_TC))==<span class="hljs-number">0</span>)          <span class="hljs-comment">//等待传输完成</span><br>  &#123;<br>          timeout++;<br>          <span class="hljs-keyword">if</span>(timeout&gt;<span class="hljs-number">0X1FFFFF</span>)<span class="hljs-keyword">break</span>;              <span class="hljs-comment">//超时退出</span><br>  &#125;<br>  DMA2D-&gt;IFCR|=DMA2D_FLAG_TC;                     <span class="hljs-comment">//清除传输完成标志</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改LittleVGL显示接口，在lv_port_disp.c文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disp_flush</span><span class="hljs-params">(<span class="hljs-keyword">lv_disp_drv_t</span> * disp_drv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">lv_area_t</span> * area, <span class="hljs-keyword">lv_color_t</span> * color_p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/</span><br><br>    LTDC_DMA2D_Fill_Color(area-&gt;x1, area-&gt;y1, area-&gt;x2, area-&gt;y2, (<span class="hljs-keyword">uint16_t</span>*)color_p);<br><br>    <span class="hljs-comment">/*IMPORTANT!!!</span><br><span class="hljs-comment">     *Inform the graphics library that you are ready with the flushing*/</span><br>    lv_disp_flush_ready(disp_drv);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译下载测试，FPS还是33，但是全屏刷新从原来的5 FPS提高到了10FPS，肉眼可见的提升。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://blog.csdn.net/a2267542848/article/details/111163633"><a href="https://blog.csdn.net/a2267542848/article/details/111163633">stm32 DMA2D使用中断LVGL,提高LVGL帧率_紫枫洛天的博客-CSDN博客_lvgl优化</a></a></p><p>[2] <a href="https://www.armbbs.cn/forum.php?mod=viewthread&tid=98331"><a href="https://www.armbbs.cn/forum.php?mod=viewthread&tid=98331">分享一个littlevgl的基本demo,通过dma进行绘制，提高了速度 - STM32F429 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> LittleVGL </tag>
            
            <tag> lvgl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F429 LTDC 驱动RGB屏幕出现抖动的解决方法</title>
      <link href="/STM32_F429_LTDC_issus_01/"/>
      <url>/STM32_F429_LTDC_issus_01/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F429-LTDC-驱动RGB屏幕出现抖动的解决方法"><a href="#STM32F429-LTDC-驱动RGB屏幕出现抖动的解决方法" class="headerlink" title="STM32F429 LTDC 驱动RGB屏幕出现抖动的解决方法"></a>STM32F429 LTDC 驱动RGB屏幕出现抖动的解决方法</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>我使用的是4.3寸800*480分辨率屏幕，在使用过程中发现在长时间运行后屏幕会出现下面这样的抖动，控件和字体边缘会出现拖影，有时还会出现黑线。</p><p><img src="/images/STM32_F429_LTDC_issus_01/IMG_20220322_170443.jpg"></p><p>开始我以为是SDRAM时序问题，后来发现不是，然后不断查找资料，包括参考了</p><p><a href="https://www.armbbs.cn/forum.php?mod=viewthread&tid=16892"><a href="https://www.armbbs.cn/forum.php?mod=viewthread&tid=16892">调试状态或者刚下载LCD的程序到F429里面，屏幕会抖动，这个是正常现象 - STM32F429 - 硬汉嵌入式论坛 - Powered by Discuz! (armbbs.cn)</a></a>，还是没能解决。</p><p>经过不断尝试，终于找到了解决方法。就是LCD-TFT的**<u>频率太高</u><strong>了，将频率从</strong>30MHz<strong>将为</strong>25MHz**就解决了。</p><p><img src="/images/STM32_F429_LTDC_issus_01/Snipaste_2022-03-22_17-17-11.png"></p><p>但是这样会看到轻微的频闪。</p><p>不知道为什么，在使用静态图片测试时，使用30MHz的LCD频率完全没有问题，而使用LittleVGL库就会出现问题。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> LTDC不稳定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F429 移植LittleVGL 8.2（4.3寸RGB 800*480，SDRAM双缓冲区，有触摸）</title>
      <link href="/STM32_F429_LittleVGL_02/"/>
      <url>/STM32_F429_LittleVGL_02/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F429-移植LittleVGL-8-2（4-3寸RGB-800-480，SDRAM双缓冲区，有触摸）"><a href="#STM32F429-移植LittleVGL-8-2（4-3寸RGB-800-480，SDRAM双缓冲区，有触摸）" class="headerlink" title="STM32F429 移植LittleVGL 8.2（4.3寸RGB 800*480，SDRAM双缓冲区，有触摸）"></a>STM32F429 移植LittleVGL 8.2（4.3寸RGB 800*480，SDRAM双缓冲区，有触摸）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="移植LittleVGL-8-2"><a href="#移植LittleVGL-8-2" class="headerlink" title="移植LittleVGL 8.2"></a>移植LittleVGL 8.2</h2><p>首先保证你的工程显示功能和触摸屏功能正常。</p><p>移植前需要完成的接口：</p><ol><li>屏幕画点函数</li><li>触摸按下与释放识别函数</li><li>触摸坐标读取函数</li></ol><p>OK，接下来进入正式的移植过程。</p><p>首先设置工程，使用AC6编译器，并勾选使用微库（因为工程中使用到了printf函数，不勾选会卡死）。</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-39-24.png"></p><p>在工程中创建一个<strong>GUI</strong>目录，然后在GUI目录下新建两个文件夹：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-41-41.png"></p><p>解压lvgl-8.2.0.zip，将lvgl-8.2.0文件夹里的所有内容全部解压至lvgl目录中。</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-43-29.png"></p><p>然后将lvgl目录下的<strong>lv_conf_template.h</strong>和<strong>lvgl.h</strong>移至父目录，即lvgl目录中。</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-45-52.png"></p><p>将<strong>lv_conf_template.h</strong>更名为<strong>lv_conf.h</strong>：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-46-45.png"></p><p>将<strong>工程目录\GUI\lvgl\examples\porting</strong>下的所有文件复制到<strong>工程目录\GUI\lvgl_porting</strong>目录中：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-48-40.png"></p><p>同样更名，将所有文件中的<strong>_template</strong>去掉，改好后如下图：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-49-50.png"></p><p>打开Keil工程，在项目管理中添加如下组：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-53-10.png"></p><p>lvgl组中添加lvgl_conf.h文件：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-54-08.png"></p><p>lvgl/core组添加<strong>工程目录\GUI\lvgl\src\core</strong>下的所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-55-27.png"></p><p>lvgl/draw组添加<strong>工程目录\GUI\lvgl\src\draw</strong>和<strong>工程目录\GUI\lvgl\src\draw\sw</strong>下的所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-56-40.png"></p><p>lvgl/extra组添加<strong>工程目录\GUI\lvgl\src\extra</strong>中<strong>除了lib目录下的所有.c文件</strong>（因为这里并未用到这些解码库，当然也可以全部添加进去），这里子目录比较多，需要花一些时间。             </p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_17-58-25.png"></p><p>lvgl/font组添加<strong>工程目录\GUI\lvgl\src\font</strong>中所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-20-01.png"></p><p>lvgl/hal组添加<strong>工程目录\GUI\lvgl\src\hal</strong>中所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-20-57.png"></p><p>lvgl/misc组添加<strong>工程目录\GUI\lvgl\src\misc</strong>中所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-21-42.png"></p><p>lvgl/widgets组添加<strong>工程目录\GUI\lvgl\src\widgets</strong>中所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-22-49.png"></p><p>lvgl/demos组添加<strong>工程目录\GUI\lvgl\demos\widgets</strong>中所有.c文件（这里可根据需要跑的demo来选择，这里选择widgets例程）</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-23-35.png"></p><p>lvgl/porting组添加<strong>工程目录\GUI\lvgl_porting</strong>中所有.c文件</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-25-27.png"></p><p>添加头文件搜索路径：</p><p><img src="/images/STM32_F429_LittleVGL_02/Snipaste_2022-03-25_18-39-19.png"></p><p>进行编译，会报lvgl.h错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">..&#x2F;GUI&#x2F;lvgl&#x2F;demos&#x2F;widgets&#x2F;assets&#x2F;img_lvgl_logo.c(1): error: &#39;..&#x2F;..&#x2F;..&#x2F;lvgl.h&#39; file not found, did you mean &#39;lvgl.h&#39;?<br>#include &quot;..&#x2F;..&#x2F;..&#x2F;lvgl.h&quot;<br>         ^~~~~~~~~~~~~~~~~<br>         &quot;lvgl.h&quot;<br></code></pre></td></tr></table></figure><p>根据代码提示，可发现是头文件路径错误。这里可以修改头文件路径为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lvgl.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>当然也可以修改文件的路径，然后重新添加到工程，解决方式多种多样，这里不再过多赘述。</p><p>再次编译，0 Error(s), 0 Warning(s).可以了。</p><h2 id="修改lv-conf-h"><a href="#修改lv-conf-h" class="headerlink" title="修改lv_conf.h"></a>修改lv_conf.h</h2><p>打开lv_conf.h文件的宏，打开LV_USE_DEMO_WIDGETS宏，如果不打开这个，widgets demo是跑不了的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Show some widget. It might be required to increase `LV_MEM_SIZE` */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_DEMO_WIDGETS        1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LV_USE_DEMO_WIDGETS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_DEMO_WIDGETS_SLIDESHOW  0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>OK，再次编译，通过。</p><h2 id="移植显示接口"><a href="#移植显示接口" class="headerlink" title="移植显示接口"></a>移植显示接口</h2><p>打开lv_port_disp.c文件和lv_port_disp.h文件的宏。</p><p>修改lv_port_disp.c中的头文件路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lv_port_disp.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>修改lv_port_disp.h中的头文件路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lvgl.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>添加宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MY_DISP_HOR_RES   800</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MY_DISP_VER_RES   480</span><br></code></pre></td></tr></table></figure><p><strong>屏蔽</strong>掉<strong>Example for 2</strong>和<strong>Example for 3</strong>两个创建缓冲区的例子，<strong>只保留Example for 1</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Example for 1) */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_disp_draw_buf_t</span> draw_buf_dsc_1;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_color_t</span> buf_1[MY_DISP_HOR_RES * <span class="hljs-number">10</span>];                          <span class="hljs-comment">/*A buffer for 10 rows*/</span><br>lv_disp_draw_buf_init(&amp;draw_buf_dsc_1, buf_1, <span class="hljs-literal">NULL</span>, MY_DISP_HOR_RES * <span class="hljs-number">10</span>);   <br><br><span class="hljs-comment">/*Initialize the display buffer*/</span><br><span class="hljs-comment">//    /* Example for 2) */</span><br><span class="hljs-comment">//    static lv_disp_draw_buf_t draw_buf_dsc_2;</span><br><span class="hljs-comment">//    static lv_color_t buf_2_1[MY_DISP_HOR_RES * 10];                        /*A buffer for 10 rows*/</span><br><span class="hljs-comment">//    static lv_color_t buf_2_2[MY_DISP_HOR_RES * 10];                        /*An other buffer for 10 rows*/</span><br><span class="hljs-comment">//    lv_disp_draw_buf_init(&amp;draw_buf_dsc_2, buf_2_1, buf_2_2, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/</span><br><br><span class="hljs-comment">//    /* Example for 3) also set disp_drv.full_refresh = 1 below*/</span><br><span class="hljs-comment">//    static lv_disp_draw_buf_t draw_buf_dsc_3;</span><br><span class="hljs-comment">//    static lv_color_t buf_3_1[MY_DISP_HOR_RES * MY_DISP_VER_RES];            /*A screen sized buffer*/</span><br><span class="hljs-comment">//    static lv_color_t buf_3_2[MY_DISP_HOR_RES * MY_DISP_VER_RES];            /*Another screen sized buffer*/</span><br><span class="hljs-comment">//    lv_disp_draw_buf_init(&amp;draw_buf_dsc_3, buf_3_1, buf_3_2, MY_DISP_VER_RES * LV_VER_RES_MAX);   /*Initialize the display buffer*/</span><br></code></pre></td></tr></table></figure><p>更改分辨率配置（不改会导致屏幕不显示）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Set the resolution of the display*/</span><br>disp_drv.hor_res = MY_DISP_HOR_RES;<br>disp_drv.ver_res = MY_DISP_VER_RES;<br></code></pre></td></tr></table></figure><p>将屏幕画点函数与lvgl的接口对接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Flush the content of the internal buffer the specific area on the display</span><br><span class="hljs-comment"> *You can use DMA or any hardware acceleration to do this operation in the background but</span><br><span class="hljs-comment"> *&#x27;lv_disp_flush_ready()&#x27; has to be called when finished.*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disp_flush</span><span class="hljs-params">(<span class="hljs-keyword">lv_disp_drv_t</span> * disp_drv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">lv_area_t</span> * area, <span class="hljs-keyword">lv_color_t</span> * color_p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/</span><br><br>    <span class="hljs-keyword">int32_t</span> x;<br>    <span class="hljs-keyword">int32_t</span> y;<br>    <span class="hljs-keyword">for</span>(y = area-&gt;y1; y &lt;= area-&gt;y2; y++) &#123;<br>        <span class="hljs-keyword">for</span>(x = area-&gt;x1; x &lt;= area-&gt;x2; x++) &#123;<br>            <span class="hljs-comment">/*Put a pixel to the display. For example:*/</span><br>            <span class="hljs-comment">/*put_px(x, y, *color_p)*/</span><br>          LTDC_Disp_Point(x, y, *(<span class="hljs-keyword">uint16_t</span>*)color_p);    <span class="hljs-comment">//屏幕画点函数</span><br>            color_p++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*IMPORTANT!!!</span><br><span class="hljs-comment">     *Inform the graphics library that you are ready with the flushing*/</span><br>    lv_disp_flush_ready(disp_drv);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加lvgl心跳"><a href="#添加lvgl心跳" class="headerlink" title="添加lvgl心跳"></a>添加lvgl心跳</h2><p>直接利用滴答定时器产生心跳。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SysTick_Handler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN SysTick_IRQn 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysTick_IRQn 0 */</span><br>  HAL_IncTick();<br>  <span class="hljs-comment">/* USER CODE BEGIN SysTick_IRQn 1 */</span><br>  lv_tick_inc(<span class="hljs-number">1</span>);        <span class="hljs-comment">//lvgl心跳</span><br>  <span class="hljs-comment">/* USER CODE END SysTick_IRQn 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加执行代码"><a href="#添加执行代码" class="headerlink" title="添加执行代码"></a>添加执行代码</h2><p>在main.c中添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lvgl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lv_port_disp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;demos/widgets/lv_demo_widgets.h&quot;</span></span><br>...<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>      ...<br>    lv_init();<br>      lv_port_disp_init();<br>      lv_demo_widgets();<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        lv_timer_handler();<br>        HAL_Delay(<span class="hljs-number">5</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>编译下载，效果如图：</p><p><img src="/images/STM32_F429_LittleVGL_02/IMG_20220325_191354.jpg"></p><p>因为还没有移植触摸接口，所以无法控制。</p><h2 id="移植触摸接口"><a href="#移植触摸接口" class="headerlink" title="移植触摸接口"></a>移植触摸接口</h2><p>打开lv_port_indev.c和lv_port_indev.h的宏</p><p>修改头文件路径，同上，这里不在赘述。</p><p>屏蔽掉lv_port_indev.c中lv_port_indev_init函数里关于鼠标、键盘、编码器等代码，只保留触摸屏部分的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lv_port_indev_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Here you will find example implementation of input devices supported by LittelvGL:</span><br><span class="hljs-comment">     *  - Touchpad</span><br><span class="hljs-comment">     *  - Mouse (with cursor support)</span><br><span class="hljs-comment">     *  - Keypad (supports GUI usage only with key)</span><br><span class="hljs-comment">     *  - Encoder (supports GUI usage only with: left, right, push)</span><br><span class="hljs-comment">     *  - Button (external buttons to press points on the screen)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *  The `..._read()` function are only examples.</span><br><span class="hljs-comment">     *  You should shape them according to your hardware</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_indev_drv_t</span> indev_drv;<br><br>    <span class="hljs-comment">/*------------------</span><br><span class="hljs-comment">     * Touchpad</span><br><span class="hljs-comment">     * -----------------*/</span><br><br>    <span class="hljs-comment">/*Initialize your touchpad if you have*/</span><br>    touchpad_init();<br><br>    <span class="hljs-comment">/*Register a touchpad input device*/</span><br>    lv_indev_drv_init(&amp;indev_drv);<br>    indev_drv.type = LV_INDEV_TYPE_POINTER;<br>    indev_drv.read_cb = touchpad_read;<br>    indev_touchpad = lv_indev_drv_register(&amp;indev_drv);<br><br>    <span class="hljs-comment">/*------------------</span><br><span class="hljs-comment">     * Mouse</span><br><span class="hljs-comment">     * -----------------*/</span><br><br><span class="hljs-comment">//    /*Initialize your mouse if you have*/</span><br><span class="hljs-comment">//    mouse_init();</span><br><br><span class="hljs-comment">//    /*Register a mouse input device*/</span><br><span class="hljs-comment">//    lv_indev_drv_init(&amp;indev_drv);</span><br><span class="hljs-comment">//    indev_drv.type = LV_INDEV_TYPE_POINTER;</span><br><span class="hljs-comment">//    indev_drv.read_cb = mouse_read;</span><br><span class="hljs-comment">//    indev_mouse = lv_indev_drv_register(&amp;indev_drv);</span><br><br><span class="hljs-comment">//    /*Set cursor. For simplicity set a HOME symbol now.*/</span><br><span class="hljs-comment">//    lv_obj_t * mouse_cursor = lv_img_create(lv_scr_act());</span><br><span class="hljs-comment">//    lv_img_set_src(mouse_cursor, LV_SYMBOL_HOME);</span><br><span class="hljs-comment">//    lv_indev_set_cursor(indev_mouse, mouse_cursor);</span><br><br><span class="hljs-comment">//    /*------------------</span><br><span class="hljs-comment">//     * Keypad</span><br><span class="hljs-comment">//     * -----------------*/</span><br><br><span class="hljs-comment">//    /*Initialize your keypad or keyboard if you have*/</span><br><span class="hljs-comment">//    keypad_init();</span><br><br><span class="hljs-comment">//    /*Register a keypad input device*/</span><br><span class="hljs-comment">//    lv_indev_drv_init(&amp;indev_drv);</span><br><span class="hljs-comment">//    indev_drv.type = LV_INDEV_TYPE_KEYPAD;</span><br><span class="hljs-comment">//    indev_drv.read_cb = keypad_read;</span><br><span class="hljs-comment">//    indev_keypad = lv_indev_drv_register(&amp;indev_drv);</span><br><br><span class="hljs-comment">//    /*Later you should create group(s) with `lv_group_t * group = lv_group_create()`,</span><br><span class="hljs-comment">//     *add objects to the group with `lv_group_add_obj(group, obj)`</span><br><span class="hljs-comment">//     *and assign this input device to group to navigate in it:</span><br><span class="hljs-comment">//     *`lv_indev_set_group(indev_keypad, group);`*/</span><br><br><span class="hljs-comment">//    /*------------------</span><br><span class="hljs-comment">//     * Encoder</span><br><span class="hljs-comment">//     * -----------------*/</span><br><br><span class="hljs-comment">//    /*Initialize your encoder if you have*/</span><br><span class="hljs-comment">//    encoder_init();</span><br><br><span class="hljs-comment">//    /*Register a encoder input device*/</span><br><span class="hljs-comment">//    lv_indev_drv_init(&amp;indev_drv);</span><br><span class="hljs-comment">//    indev_drv.type = LV_INDEV_TYPE_ENCODER;</span><br><span class="hljs-comment">//    indev_drv.read_cb = encoder_read;</span><br><span class="hljs-comment">//    indev_encoder = lv_indev_drv_register(&amp;indev_drv);</span><br><br><span class="hljs-comment">//    /*Later you should create group(s) with `lv_group_t * group = lv_group_create()`,</span><br><span class="hljs-comment">//     *add objects to the group with `lv_group_add_obj(group, obj)`</span><br><span class="hljs-comment">//     *and assign this input device to group to navigate in it:</span><br><span class="hljs-comment">//     *`lv_indev_set_group(indev_encoder, group);`*/</span><br><br><span class="hljs-comment">//    /*------------------</span><br><span class="hljs-comment">//     * Button</span><br><span class="hljs-comment">//     * -----------------*/</span><br><br><span class="hljs-comment">//    /*Initialize your button if you have*/</span><br><span class="hljs-comment">//    button_init();</span><br><br><span class="hljs-comment">//    /*Register a button input device*/</span><br><span class="hljs-comment">//    lv_indev_drv_init(&amp;indev_drv);</span><br><span class="hljs-comment">//    indev_drv.type = LV_INDEV_TYPE_BUTTON;</span><br><span class="hljs-comment">//    indev_drv.read_cb = button_read;</span><br><span class="hljs-comment">//    indev_button = lv_indev_drv_register(&amp;indev_drv);</span><br><br><span class="hljs-comment">//    /*Assign buttons to points on the screen*/</span><br><span class="hljs-comment">//    static const lv_point_t btn_points[2] = &#123;</span><br><span class="hljs-comment">//            &#123;10, 10&#125;,   /*Button 0 -&gt; x:10; y:10*/</span><br><span class="hljs-comment">//            &#123;40, 100&#125;,  /*Button 1 -&gt; x:40; y:100*/</span><br><span class="hljs-comment">//    &#125;;</span><br><span class="hljs-comment">//    lv_indev_set_button_points(indev_button, btn_points);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改touchpad_is_pressed函数，主要实现返回值，使返回值能够反映触摸屏是否按下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Return true is the touchpad is pressed*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">touchpad_is_pressed</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*Your code comes here*/</span><br><br>    <span class="hljs-keyword">return</span> tp_dev.sta&amp;TP_PRES_DOWN;        <span class="hljs-comment">//返回触屏是否按下</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改touchpad_get_xy函数，获取屏幕点击的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Get the x and y coordinates if the touchpad is pressed*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">touchpad_get_xy</span><span class="hljs-params">(<span class="hljs-keyword">lv_coord_t</span> * x, <span class="hljs-keyword">lv_coord_t</span> * y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*Your code comes here*/</span><br><br>    (*x) = tp_dev.x[<span class="hljs-number">0</span>];        <span class="hljs-comment">//获取触摸X位置</span><br>    (*y) = tp_dev.y[<span class="hljs-number">0</span>];        <span class="hljs-comment">//获取触摸y位置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改main.c中的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lv_port_indev.h&quot;</span></span><br>...<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    GT9147_Init();        <span class="hljs-comment">//触摸芯片初始化</span><br>    lv_port_indev_init();    <span class="hljs-comment">//注册输入设备</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        GT9147_Scan(<span class="hljs-number">0</span>);        <span class="hljs-comment">//扫描触摸</span><br>        lv_timer_handler();<br>        HAL_Delay(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>触摸屏部分适配完成 ，编译并下载，可以发现屏幕已经可以触摸了。</p><h2 id="使用SDRAM缓冲加速"><a href="#使用SDRAM缓冲加速" class="headerlink" title="使用SDRAM缓冲加速"></a>使用SDRAM缓冲加速</h2><p>在iv_port_disp.c文件中添加宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LTDC_LCD_FRAMEBUF_SIZE        (MY_DISP_HOR_RES*MY_DISP_VER_RES*2)        <span class="hljs-comment">//ltdc.c中ltdc_lcd_framebuf缓冲区的大小</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COLOR_BUF_SIZE                (MY_DISP_HOR_RES*MY_DISP_VER_RES)    <span class="hljs-comment">//全屏的大小</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COLOR1_BUF_ADDR           (uint32_t*)(0xc0000000 + LTDC_LCD_FRAMEBUF_SIZE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COLOR2_BUF_ADDR           (uint32_t*)(0xc0000000 + LTDC_LCD_FRAMEBUF_SIZE + COLOR_BUF_SIZE)</span><br><br></code></pre></td></tr></table></figure><p>SDRAM空间从0xc0000000开始，<strong>LTDC_LCD_FRAMEBUF_SIZE需要作为显存</strong>，所以需要跳过。</p><p>缓冲区1从<strong>0xc0000000+LTDC_LCD_FRAMEBUF_SIZE</strong>开始；</p><p>缓冲区2从<strong>0xc0000000+LTDC_LCD_FRAMEBUF_SIZE+COLOR_BUF_SIZE</strong>开始；</p><p>修改Example for 3缓存创建方法，传入两个缓存的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-comment">/* Example for 3) also set disp_drv.full_refresh = 1 below*/</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_disp_draw_buf_t</span> draw_buf_dsc_3;<br><span class="hljs-comment">//    static lv_color_t buf_3_1[MY_DISP_HOR_RES * MY_DISP_VER_RES];            /*A screen sized buffer*/</span><br><span class="hljs-comment">//    static lv_color_t buf_3_2[MY_DISP_HOR_RES * MY_DISP_VER_RES];            /*Another screen sized buffer*/</span><br>    lv_disp_draw_buf_init(&amp;draw_buf_dsc_3, COLOR1_BUF_ADDR, COLOR2_BUF_ADDR, MY_DISP_VER_RES * MY_DISP_HOR_RES);   <span class="hljs-comment">/*Initialize the display buffer*/</span><br></code></pre></td></tr></table></figure><p>修改缓存设置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*Set a display buffer*/</span><br>disp_drv.draw_buf = &amp;draw_buf_dsc_3;<br></code></pre></td></tr></table></figure><p>编译下载，发现速度刷屏速度已有提升，FPS显示有33，但实际使用提升非常小，看来还需要使用DMA2D来加速。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> LittleVGL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正点原子F429开发板移植LittleVGL 6.0.2（4.3寸 RGB LCD，无触摸）</title>
      <link href="/STM32_F429_LittleVGL_01/"/>
      <url>/STM32_F429_LittleVGL_01/</url>
      
        <content type="html"><![CDATA[<h1 id="正点原子F429开发板移植LittleVGL-6-0-2（4-3寸-RGB-LCD，无触摸）"><a href="#正点原子F429开发板移植LittleVGL-6-0-2（4-3寸-RGB-LCD，无触摸）" class="headerlink" title="正点原子F429开发板移植LittleVGL 6.0.2（4.3寸 RGB LCD，无触摸）"></a>正点原子F429开发板移植LittleVGL 6.0.2（4.3寸 RGB LCD，无触摸）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><h2 id="编写画点函数"><a href="#编写画点函数" class="headerlink" title="编写画点函数"></a>编写画点函数</h2><p>LittleVGL的移植需要自己实现在屏幕任一点画颜色点的函数。</p><p>这里使用4.3寸RGB接口的屏幕，分辨率为800*480，并使用了外部SDRAM的部分空间作为显存使用。</p><p>F429板载的SDRAM读写地址从0xC0000000开始，这里就将这个地址作为显存的起始地址。</p><p>颜色格式使用<code>RGB565</code>，即一个像素点占用两个字节，可以计算得出800<em>480分辨率屏幕占用的显存大小为<br>$$<br>800</em>480*2=768000(byte)<br>$$<br>在ltdc.c中添加以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GSDRAM_ADDR   (__IO uint16_t*)(0XC0000000)            <span class="hljs-comment">//显存起始地址，这里根据颜色格式使用16bit指针</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GSDRAM_SIZE   (768000)                                                    <span class="hljs-comment">//显存大小（字节）</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LCD_MAX_X     (800)                                                            <span class="hljs-comment">//屏幕最大X坐标</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LCD_MAX_Y     (480)                                                            <span class="hljs-comment">//屏幕最大Y坐标</span></span><br><br><span class="hljs-comment">/*****************************************************</span><br><span class="hljs-comment">LTDC_Disp_Point</span><br><span class="hljs-comment">功能：在屏幕上的任意位置显示任意颜色的点</span><br><span class="hljs-comment">参数：x_point：X坐标</span><br><span class="hljs-comment">      y_point：Y坐标</span><br><span class="hljs-comment">      RGB565_color：RG565颜色</span><br><span class="hljs-comment">返回值：无</span><br><span class="hljs-comment">*****************************************************/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Disp_Point</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> x_point, <span class="hljs-keyword">uint16_t</span> y_point, <span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span><br><span class="hljs-function"></span>&#123;<br>    *(GSDRAM_ADDR + x_point + (LCD_MAX_X * y_point)) = RGB565_color;  <span class="hljs-comment">//计算点位置</span><br>&#125;<br><br><span class="hljs-comment">/*****************************************************</span><br><span class="hljs-comment">LTDC_Fill_Point_Color</span><br><span class="hljs-comment">功能：以画点的形式填充区域内颜色（矩形）</span><br><span class="hljs-comment">参数：start_x_point：    起始X坐标</span><br><span class="hljs-comment">      stop_x_point：    结束X坐标</span><br><span class="hljs-comment">      start_y_point：    起始Y坐标</span><br><span class="hljs-comment">      stop_y_point：    结束Y坐标</span><br><span class="hljs-comment">      RGB565_color：RG565颜色</span><br><span class="hljs-comment">返回值：无</span><br><span class="hljs-comment">*****************************************************/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Fill_Point_Color</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> start_x_point, <span class="hljs-keyword">uint16_t</span> stop_x_point, <span class="hljs-keyword">uint16_t</span> start_y_point, <span class="hljs-keyword">uint16_t</span> stop_y_point, <span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">uint16_t</span> x, y;<br>    <span class="hljs-keyword">for</span>(y = start_y_point; y &lt; stop_y_point; y++)     <span class="hljs-comment">//Y坐标为外循环</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(x = start_x_point; x &lt; stop_x_point; x++)   <span class="hljs-comment">//X坐标为内循环</span><br>        &#123;<br>            LTDC_Disp_Point(x, y, RGB565_color);          <span class="hljs-comment">//以画点形式填充</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*****************************************************</span><br><span class="hljs-comment">LTDC_Fill_Full_Color</span><br><span class="hljs-comment">功能：全屏填充颜色</span><br><span class="hljs-comment">参数：RGB565_color：RG565颜色</span><br><span class="hljs-comment">返回值：无</span><br><span class="hljs-comment">*****************************************************/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Fill_Full_Color</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">uint16_t</span> x, y;<br>    <span class="hljs-keyword">for</span>(y = <span class="hljs-number">0</span>; y &lt; LCD_MAX_Y; y++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(x = <span class="hljs-number">0</span>; x &lt; LCD_MAX_X; x++)<br>        &#123;<br>            LTDC_Disp_Point(x, y, RGB565_color);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* USER CODE END 0 */</span><br></code></pre></td></tr></table></figure><p>在ltdc.h文件中添加函数声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN Prototypes */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Disp_Point</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> x_point, <span class="hljs-keyword">uint16_t</span> y_point, <span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Fill_Point_Color</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> start_x_point, <span class="hljs-keyword">uint16_t</span> stop_x_point, <span class="hljs-keyword">uint16_t</span> start_y_point, <span class="hljs-keyword">uint16_t</span> stop_y_point, <span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LTDC_Fill_Full_Color</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> RGB565_color)</span></span>;<br><span class="hljs-comment">/* USER CODE END Prototypes */</span><br></code></pre></td></tr></table></figure><p>在main.c文件中，添加测试代码，测试画点函数是否正常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p><img src="/images/STM32_F429_LittleVGL_01/IMG_20220321_141952.jpg"></p><p>OK，显示没有问题，下面开始移植LittleVGL。</p><h2 id="移植LittleVGL"><a href="#移植LittleVGL" class="headerlink" title="移植LittleVGL"></a>移植LittleVGL</h2><h3 id="解压和复制文件"><a href="#解压和复制文件" class="headerlink" title="解压和复制文件"></a>解压和复制文件</h3><p>首先在工程中创建GUI文件夹。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_21-57-48.png" alt="Snipaste_2022-03-21_21-57-48"></p><p>然后解压lvgl.zip文件，路径如图。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_21-59-40.png"></p><p>然后将porting文件夹中的文件进行重命名，重命名后的文件名如图。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-02-06.png"></p><p>将lvgl目录下的lv_conf_template.h和lvgl.h移动到GUI目录中，如图。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-06-24.png"></p><p>将lv_conf_template.h文件重命名为lv_conf.h</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-07-10.png"></p><p>解压lv_examples.zip文件，目录结构如图。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-09-03.png"></p><p>更改lv_ex_conf_templ.h文件名为lv_ex_conf.h</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-36-28.png"></p><h3 id="添加到Keil工程"><a href="#添加到Keil工程" class="headerlink" title="添加到Keil工程"></a>添加到Keil工程</h3><p>打开Keil工程，建立工程分组，如图。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-11-21.png"></p><p>将GUI/lvgl/src目录下的所有.c文件都添加到GUI分组中。此目录为lvgl的主要源代码，这里子目录比较多，需要手动打开目录添加。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-13-35.png"></p><p>添加GUI/lvgl/porting/lv_port_disp.c文件到GUI分组中。此文件总包含lvgl的显示接口。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-18-59.png"></p><p>添加GUI/lvgl_conf.h文件和GUI/lvgl/porting/lv_port_disp.h文件到GUI分组中，方便在编辑器中找到。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-18-12.png"></p><p>将GUI/lv_examples/lv_apps/benchmark目录下的两个.c文件添加到GUI_demos分组中。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-20-35.png"></p><p>添加编译器头文件查找目录。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-22-19.png"></p><p>设置C语言模式为<code>c99</code></p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-23-18.png"></p><p>打开<code>lv_conf.h</code> <code>lv_port_disp.c</code> <code>lv_port_disp.c</code>三个文件的宏，否则会报大量错误。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-24-48.png"></p><p>更改lv_port_disp.c文件中的头文件名称（因为之前修改了文件名，否则会报找不到头文件的错误）</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-27-05.png"></p><p>编译工程。期间会报几个关于头文件路径的错误，自己修改即可。</p><p><img src="/images/STM32_F429_LittleVGL_01/Snipaste_2022-03-21_22-30-06.png"></p><p>遇到报GPU错误，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">..&#x2F;GUI&#x2F;lvgl&#x2F;porting&#x2F;lv_port_disp.c(115): error: no member named &#39;gpu_blend&#39; in &#39;struct _disp_drv_t&#39;; did you mean &#39;gpu_blend_cb&#39;?<br>    disp_drv.gpu_blend &#x3D; gpu_blend;<br>             ^~~~~~~~~<br>             gpu_blend_cb<br></code></pre></td></tr></table></figure><p>打开lv_conf.h文件，关闭<strong>LV_USE_GPU</strong>宏并重新编译即可解决。</p><p>继续编译，又遇到如下错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">..&#x2F;GUI&#x2F;lvgl&#x2F;porting&#x2F;lv_port_disp.c(154): error: use of undeclared identifier &#39;disp&#39;<br>    lv_disp_flush_ready(disp);<br>                        ^<br></code></pre></td></tr></table></figure><p>打开lv_port_disp.c文件，找到报错位置，进行如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;lv_disp_flush_ready(disp);        &#x2F;&#x2F;修改前<br>lv_disp_flush_ready(disp_drv);        &#x2F;&#x2F;修改后<br></code></pre></td></tr></table></figure><p>继续编译，已无错误。</p><p>继续进行适配，打开lv_conf.h文件，进行修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_HOR_RES_MAX          (800)        <span class="hljs-comment">//实际屏幕宽度</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_VER_RES_MAX          (480)        <span class="hljs-comment">//实际屏幕高度</span></span><br></code></pre></td></tr></table></figure><p>打开lv_port_disp.c文件，修改lv_port_disp_init函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lv_port_disp_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*-------------------------</span><br><span class="hljs-comment">     * Initialize your display</span><br><span class="hljs-comment">     * -----------------------*/</span><br>    disp_init();<br><br>    <span class="hljs-comment">/*-----------------------------</span><br><span class="hljs-comment">     * Create a buffer for drawing</span><br><span class="hljs-comment">     *----------------------------*/</span><br><br>    <span class="hljs-comment">/* LittlevGL requires a buffer where it draws the objects. The buffer&#x27;s has to be greater than 1 display row</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * There are three buffering configurations:</span><br><span class="hljs-comment">     * 1. Create ONE buffer with some rows: </span><br><span class="hljs-comment">     *      LittlevGL will draw the display&#x27;s content here and writes it to your display</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 2. Create TWO buffer with some rows: </span><br><span class="hljs-comment">     *      LittlevGL will draw the display&#x27;s content to a buffer and writes it your display.</span><br><span class="hljs-comment">     *      You should use DMA to write the buffer&#x27;s content to the display.</span><br><span class="hljs-comment">     *      It will enable LittlevGL to draw the next part of the screen to the other buffer while</span><br><span class="hljs-comment">     *      the data is being sent form the first buffer. It makes rendering and flushing parallel.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 3. Create TWO screen-sized buffer: </span><br><span class="hljs-comment">     *      Similar to 2) but the buffer have to be screen sized. When LittlevGL is ready it will give the</span><br><span class="hljs-comment">     *      whole frame to display. This way you only need to change the frame buffer&#x27;s address instead of</span><br><span class="hljs-comment">     *      copying the pixels.</span><br><span class="hljs-comment">     * */</span><br><br><span class="hljs-comment">//    /* Example for 1) */                              //屏蔽</span><br><span class="hljs-comment">//    static lv_disp_buf_t disp_buf_1;</span><br><span class="hljs-comment">//    static lv_color_t buf1_1[LV_HOR_RES_MAX * 10];                      /*A buffer for 10 rows*/</span><br><span class="hljs-comment">//    lv_disp_buf_init(&amp;disp_buf_1, buf1_1, NULL, LV_HOR_RES_MAX * 10);   /*Initialize the display buffer*/</span><br><br>    <span class="hljs-comment">/* Example for 2) */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_disp_buf_t</span> disp_buf_2;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_color_t</span> buf2_1[LV_HOR_RES_MAX * <span class="hljs-number">10</span>];                        <span class="hljs-comment">/*A buffer for 10 rows*/</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">lv_color_t</span> buf2_2[LV_HOR_RES_MAX * <span class="hljs-number">10</span>];                        <span class="hljs-comment">/*An other buffer for 10 rows*/</span><br>    lv_disp_buf_init(&amp;disp_buf_2, buf2_1, buf2_2, LV_HOR_RES_MAX * <span class="hljs-number">10</span>);   <span class="hljs-comment">/*Initialize the display buffer*/</span><br><br>    <span class="hljs-comment">/* Example for 3) */</span>                                <span class="hljs-comment">//屏蔽</span><br><span class="hljs-comment">//    static lv_disp_buf_t disp_buf_3;</span><br><span class="hljs-comment">//    static lv_color_t buf3_1[LV_HOR_RES_MAX * LV_VER_RES_MAX];            /*A screen sized buffer*/</span><br><span class="hljs-comment">//    static lv_color_t buf3_2[LV_HOR_RES_MAX * LV_VER_RES_MAX];            /*An other screen sized buffer*/</span><br><span class="hljs-comment">//    lv_disp_buf_init(&amp;disp_buf_3, buf3_1, buf3_2, LV_HOR_RES_MAX * LV_VER_RES_MAX);   /*Initialize the display buffer*/</span><br><br><br>    <span class="hljs-comment">/*-----------------------------------</span><br><span class="hljs-comment">     * Register the display in LittlevGL</span><br><span class="hljs-comment">     *----------------------------------*/</span><br><br>    <span class="hljs-keyword">lv_disp_drv_t</span> disp_drv;                         <span class="hljs-comment">/*Descriptor of a display driver*/</span><br>    lv_disp_drv_init(&amp;disp_drv);                    <span class="hljs-comment">/*Basic initialization*/</span><br><br>    <span class="hljs-comment">/*Set up the functions to access to your display*/</span><br><br>    <span class="hljs-comment">/*Set the resolution of the display*/</span><br>    disp_drv.hor_res = <span class="hljs-number">800</span>;               <span class="hljs-comment">//修改为实际屏幕尺寸</span><br>    disp_drv.ver_res = <span class="hljs-number">480</span>;<br><br>    <span class="hljs-comment">/*Used to copy the buffer&#x27;s content to the display*/</span><br>    disp_drv.flush_cb = disp_flush;<br><br>    <span class="hljs-comment">/*Set a display buffer*/</span><br>    disp_drv.buffer = &amp;disp_buf_2;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LV_USE_GPU</span><br>    <span class="hljs-comment">/*Optionally add functions to access the GPU. (Only in buffered mode, LV_VDB_SIZE != 0)*/</span><br><br>    <span class="hljs-comment">/*Blend two color array using opacity*/</span><br>    disp_drv.gpu_blend = gpu_blend;<br><br>    <span class="hljs-comment">/*Fill a memory array with a color*/</span><br>    disp_drv.gpu_fill = gpu_fill;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    <span class="hljs-comment">/*Finally register the driver*/</span><br>    lv_disp_drv_register(&amp;disp_drv);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>完善disp_flush函数，添加屏幕画点函数接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">disp_flush</span><span class="hljs-params">(<span class="hljs-keyword">lv_disp_drv_t</span> * disp_drv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">lv_area_t</span> * area, <span class="hljs-keyword">lv_color_t</span> * color_p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/</span><br><br>    <span class="hljs-keyword">int32_t</span> x;<br>    <span class="hljs-keyword">int32_t</span> y;<br>    <span class="hljs-keyword">for</span>(y = area-&gt;y1; y &lt;= area-&gt;y2; y++) &#123;<br>        <span class="hljs-keyword">for</span>(x = area-&gt;x1; x &lt;= area-&gt;x2; x++) &#123;<br>            <span class="hljs-comment">/* Put a pixel to the display. For example: */</span><br>            <span class="hljs-comment">/* put_px(x, y, *color_p)*/</span><br>            LTDC_Disp_Point(x, y, *(<span class="hljs-keyword">uint16_t</span>*)color_p);        <span class="hljs-comment">//任意位置画点</span><br>            color_p++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* IMPORTANT!!!</span><br><span class="hljs-comment">     * Inform the graphics library that you are ready with the flushing*/</span><br>    lv_disp_flush_ready(disp_drv);<br>&#125;<br></code></pre></td></tr></table></figure><p>添加lvgl的心跳函数添加至SysTick_Handler函数中进行调用，心跳节拍由滴答定时器产生。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SysTick_Handler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN SysTick_IRQn 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysTick_IRQn 0 */</span><br>  HAL_IncTick();<br>  <span class="hljs-comment">/* USER CODE BEGIN SysTick_IRQn 1 */</span><br>  lv_tick_inc(<span class="hljs-number">1</span>);                            <span class="hljs-comment">//LittleVGL心跳，1ms调用一次</span><br>  <span class="hljs-comment">/* USER CODE END SysTick_IRQn 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>打开lv_ex_conf.h文件，根据需要跑的demo，打开相应的宏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file lv_ex_conf.h</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * COPY THIS FILE AS lv_ex_conf.h</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1 <span class="hljs-comment">/*Set it to &quot;1&quot; to enable the content*/</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LV_EX_CONF_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_EX_CONF_H</span><br><br><span class="hljs-comment">/*******************</span><br><span class="hljs-comment"> * GENERAL SETTING</span><br><span class="hljs-comment"> *******************/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_EX_PRINTF       0       <span class="hljs-comment">/*Enable printf-ing data*/</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_EX_KEYBOARD     1       <span class="hljs-comment">/*Add PC keyboard support to some examples (`lv_drivers` repository is required)*/</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_EX_MOUSEWHEEL   0       <span class="hljs-comment">/*Add &#x27;encoder&#x27; (mouse wheel) support to some examples (`lv_drivers` repository is required)*/</span></span><br><br><span class="hljs-comment">/*******************</span><br><span class="hljs-comment"> *   TEST USAGE</span><br><span class="hljs-comment"> *******************/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_TESTS        1</span><br><br><span class="hljs-comment">/*******************</span><br><span class="hljs-comment"> * TUTORIAL USAGE</span><br><span class="hljs-comment"> *******************/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_TUTORIALS   1</span><br><br><br><span class="hljs-comment">/*********************</span><br><span class="hljs-comment"> * APPLICATION USAGE</span><br><span class="hljs-comment"> *********************/</span><br><br><span class="hljs-comment">/* Test the graphical performance of your MCU</span><br><span class="hljs-comment"> * with different settings*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_BENCHMARK   1</span><br><br><span class="hljs-comment">/*A demo application with Keyboard, Text area, List and Chart</span><br><span class="hljs-comment"> * placed on Tab view */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_DEMO        1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LV_USE_DEMO</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_DEMO_WALLPAPER  1    <span class="hljs-comment">/*Create a wallpaper too*/</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_DEMO_SLIDE_SHOW 1    <span class="hljs-comment">/*Automatically switch between tabs*/</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">/*MCU and memory usage monitoring*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_SYSMON      1</span><br><br><span class="hljs-comment">/*A terminal to display received characters*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_TERMINAL    1</span><br><br><span class="hljs-comment">/*Touch pad calibration with 4 points*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LV_USE_TPCAL       1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/*LV_EX_CONF_H*/</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/*End of &quot;Content enable&quot;*/</span></span><br><br></code></pre></td></tr></table></figure><p>在main.c文件中添加lvgl初始化代码和测试例程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lvgl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lv_port_disp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;lv_apps\benchmark\benchmark.h&quot;</span></span><br>····<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ···<br>    lv_init();                <span class="hljs-comment">//lvgl系统初始化</span><br>      lv_port_disp_init();    <span class="hljs-comment">//lvgl显示接口初始化,放在lv_init()的后面</span><br>      benchmark_create();        <span class="hljs-comment">//显示demo</span><br>      <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>      &#123;<br>          lv_task_handler();<br>        HAL_Delay(<span class="hljs-number">5</span>);<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续编译就没有错误了。屏幕可以显示了，如下图。因为当前工程并没有包含触摸屏部分，所以无法控制。</p><p><img src="/images/STM32_F429_LittleVGL_01/IMG_20220321_234845.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> LittleVGL </tag>
            
            <tag> lvgl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正点原子F429开发板使用STM32CubeMX驱动板载SDRAM</title>
      <link href="/STM32_SDRAM_01/"/>
      <url>/STM32_SDRAM_01/</url>
      
        <content type="html"><![CDATA[<h1 id="正点原子F429开发板使用STM32CubeMX驱动板载SDRAM"><a href="#正点原子F429开发板使用STM32CubeMX驱动板载SDRAM" class="headerlink" title="正点原子F429开发板使用STM32CubeMX驱动板载SDRAM"></a>正点原子F429开发板使用STM32CubeMX驱动板载SDRAM</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>由于我需要使用到SDRAM作为显存来使用，使用内部的SRAM空间作为显存显然不是明智的，因为屏幕的像素点很多，这样将会占用大量的内存，导致无法运行其他的东西。</p><h2 id="STM32CubeMX配置工程"><a href="#STM32CubeMX配置工程" class="headerlink" title="STM32CubeMX配置工程"></a>STM32CubeMX配置工程</h2><p>废话不多说，首先打开STM32CubeMX，找到FMC选项，对其进行设置。这里的参数不是随便设置的，需要根据SDRAM芯片的参数进行设置。</p><p><img src="/images/STM32_SDRAM_01/Snipaste_2022-03-21_01-45-00.png"></p><p>这部分是时序相关的参数，根据SDRAM芯片手册并计算进行确定。</p><p><img src="/images/STM32_SDRAM_01/Snipaste_2022-03-21_01-46-38.png"></p><p>为了测试SDRAM是否正常工作，这里打开USART1，使用串口对SDRAM的读写进行测试。</p><p><img src="/images/STM32_SDRAM_01/Snipaste_2022-03-21_01-49-30.png"></p><p>这里只用到了串口发送部分，因此不需要进行其他设置。</p><h2 id="使用Keil修改代码"><a href="#使用Keil修改代码" class="headerlink" title="使用Keil修改代码"></a>使用Keil修改代码</h2><h3 id="增加SDRAM命令函数"><a href="#增加SDRAM命令函数" class="headerlink" title="增加SDRAM命令函数"></a>增加SDRAM命令函数</h3><p>参考正点原子例程代码，在fmc.c文件中添加如下代码，具体参数计算已在注释中说明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Bank5_SDRAM_ADDR    ((uint32_t)(0XC0000000)) <span class="hljs-comment">//SDRAM开始地址</span></span><br><br><span class="hljs-comment">//SDRAM配置参数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_LENGTH_1             ((uint16_t)0x0000)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_LENGTH_2             ((uint16_t)0x0001)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_LENGTH_4             ((uint16_t)0x0002)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_LENGTH_8             ((uint16_t)0x0004)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL      ((uint16_t)0x0000)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_BURST_TYPE_INTERLEAVED     ((uint16_t)0x0008)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_CAS_LATENCY_2              ((uint16_t)0x0020)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_CAS_LATENCY_3              ((uint16_t)0x0030)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_OPERATING_MODE_STANDARD    ((uint16_t)0x0000)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED ((uint16_t)0x0000)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)</span><br><br><span class="hljs-function"><span class="hljs-keyword">uint8_t</span> <span class="hljs-title">SDRAM_Send_Cmd</span><span class="hljs-params">(SDRAM_HandleTypeDef *SDRAM_Handler, <span class="hljs-keyword">uint8_t</span> bankx,<span class="hljs-keyword">uint8_t</span> cmd,<span class="hljs-keyword">uint8_t</span> refresh,<span class="hljs-keyword">uint16_t</span> regval)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">uint32_t</span> target_bank=<span class="hljs-number">0</span>;<br>    FMC_SDRAM_CommandTypeDef Command;<br>    <br>    <span class="hljs-keyword">if</span>(bankx==<span class="hljs-number">0</span>) target_bank=FMC_SDRAM_CMD_TARGET_BANK1;       <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bankx==<span class="hljs-number">1</span>) target_bank=FMC_SDRAM_CMD_TARGET_BANK2;   <br>    Command.CommandMode=cmd;                <span class="hljs-comment">//命令</span><br>    Command.CommandTarget=target_bank;      <span class="hljs-comment">//目标SDRAM存储区域</span><br>    Command.AutoRefreshNumber=refresh;      <span class="hljs-comment">//自刷新次数</span><br>    Command.ModeRegisterDefinition=regval;  <span class="hljs-comment">//要写入模式寄存器的值</span><br>    <span class="hljs-keyword">if</span>(HAL_SDRAM_SendCommand(SDRAM_Handler,&amp;Command,<span class="hljs-number">0X1000</span>)==HAL_OK) <span class="hljs-comment">//向SDRAM发送命令</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SDRAM_Initialization_Sequence</span><span class="hljs-params">(SDRAM_HandleTypeDef *SDRAM_Handler)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">uint32_t</span> temp=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//SDRAM控制器初始化完成以后还需要按照如下顺序初始化SDRAM</span><br>    SDRAM_Send_Cmd(SDRAM_Handler, <span class="hljs-number">0</span>,FMC_SDRAM_CMD_CLK_ENABLE,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//时钟配置使能</span><br>    HAL_Delay(<span class="hljs-number">1</span>);                                  <span class="hljs-comment">//至少延时200us</span><br>    SDRAM_Send_Cmd(SDRAM_Handler, <span class="hljs-number">0</span>,FMC_SDRAM_CMD_PALL,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);       <span class="hljs-comment">//对所有存储区预充电</span><br>    SDRAM_Send_Cmd(SDRAM_Handler, <span class="hljs-number">0</span>,FMC_SDRAM_CMD_AUTOREFRESH_MODE,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//设置自刷新次数 </span><br>    <span class="hljs-comment">//配置模式寄存器,SDRAM的bit0~bit2为指定突发访问的长度，</span><br>      <span class="hljs-comment">//bit3为指定突发访问的类型，bit4~bit6为CAS值，bit7和bit8为运行模式</span><br>      <span class="hljs-comment">//bit9为指定的写突发模式，bit10和bit11位保留位</span><br>      temp=(<span class="hljs-keyword">uint32_t</span>)SDRAM_MODEREG_BURST_LENGTH_1          |    <span class="hljs-comment">//设置突发长度:1(可以是1/2/4/8)</span><br>              SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |    <span class="hljs-comment">//设置突发类型:连续(可以是连续/交错)</span><br>              SDRAM_MODEREG_CAS_LATENCY_3           |    <span class="hljs-comment">//设置CAS值:3(可以是2/3)</span><br>              SDRAM_MODEREG_OPERATING_MODE_STANDARD |   <span class="hljs-comment">//设置操作模式:0,标准模式</span><br>              SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;     <span class="hljs-comment">//设置突发写模式:1,单点访问</span><br>    SDRAM_Send_Cmd(SDRAM_Handler, <span class="hljs-number">0</span>,FMC_SDRAM_CMD_LOAD_MODE,<span class="hljs-number">1</span>,temp);   <span class="hljs-comment">//设置SDRAM的模式寄存器</span><br>    <br>    <span class="hljs-comment">//刷新频率计数器(以SDCLK频率计数),计算方法:</span><br>      <span class="hljs-comment">//COUNT=SDRAM刷新周期/行数-20=SDRAM刷新周期(us)*SDCLK频率(Mhz)/行数</span><br>    <span class="hljs-comment">//我们使用的SDRAM刷新周期为64ms,SDCLK=180/2=90Mhz,行数为8192(2^13).</span><br>      <span class="hljs-comment">//所以,COUNT=64*1000*90/8192-20=683</span><br>    HAL_SDRAM_ProgramRefreshRate(SDRAM_Handler,<span class="hljs-number">683</span>);<br><br>&#125;<br><span class="hljs-comment">/* USER CODE END 0 */</span><br></code></pre></td></tr></table></figure><p>接着，在MX_FMC_Init函数中，添加如下代码，在FMC外设初始化完成后，发送SDRAM初始化序列，对SDRAM进行初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/* USER CODE BEGIN FMC_Init 2 */</span><br>SDRAM_Initialization_Sequence(&amp;hsdram1);<br> <span class="hljs-comment">/* USER CODE END FMC_Init 2 */</span><br></code></pre></td></tr></table></figure><h3 id="进行SDRAM读写测试"><a href="#进行SDRAM读写测试" class="headerlink" title="进行SDRAM读写测试"></a>进行SDRAM读写测试</h3><p>在main.c文件中，添加对串口Handle的外部声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN PV */</span><br><span class="hljs-keyword">extern</span> UART_HandleTypeDef huart1;<br><span class="hljs-comment">/* USER CODE END PV */</span><br></code></pre></td></tr></table></figure><p>在main函数的while循环中，添加测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Infinite loop */</span><br><span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">sprintf</span>((__IO <span class="hljs-keyword">uint8_t</span>*) (<span class="hljs-number">0XC0000000</span>), <span class="hljs-string">&quot;SDRAM test success!\r\n&quot;</span>);        <span class="hljs-comment">//将字符串写入SDRAM空间内</span><br>HAL_UART_Transmit(&amp;huart1, (__IO <span class="hljs-keyword">uint8_t</span>*) (<span class="hljs-number">0XC0000000</span>), <span class="hljs-number">21</span>, <span class="hljs-number">0xff</span>);    <span class="hljs-comment">//用串口直接打印SDRAM空间内的字符串</span><br>  <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>&#125;<br><span class="hljs-comment">/* USER CODE END 3 */</span><br></code></pre></td></tr></table></figure><p>如果SDRAM功能正常，打开串口调试助手，能够看到不断有字符串输出，表明SDRAM已经能够正常使用了。</p><p><img src="/images/STM32_SDRAM_01/Snipaste_2022-03-21_02-29-31.png"></p><h3 id="测试SDRAM的空间大小"><a href="#测试SDRAM的空间大小" class="headerlink" title="测试SDRAM的空间大小"></a>测试SDRAM的空间大小</h3><p>正点原子提供了一个简单测试SDRAM空间大小的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fsmc_sdram_test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">uint32_t</span> i=<span class="hljs-number">0</span>;        <br>    <span class="hljs-keyword">uint32_t</span> temp=<span class="hljs-number">0</span>;       <br>    <span class="hljs-keyword">uint32_t</span> sval=<span class="hljs-number">0</span>;    <span class="hljs-comment">//在地址0读到的数据                         </span><br>    <span class="hljs-comment">//每隔16K字节,写入一个数据,总共写入2048个数据,刚好是32M字节</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;i+=<span class="hljs-number">16</span>*<span class="hljs-number">1024</span>)<br>    &#123;<br>        *(__IO <span class="hljs-keyword">uint32_t</span>*)(<span class="hljs-number">0xc0000000</span>+i)=temp; <br>        temp++;<br>    &#125;<br>    <span class="hljs-comment">//依次读出之前写入的数据,进行校验          </span><br>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;i+=<span class="hljs-number">16</span>*<span class="hljs-number">1024</span>) <br>    &#123;    <br>          temp=*(__IO <span class="hljs-keyword">uint32_t</span>*)(<span class="hljs-number">0xc0000000</span>+i);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)sval=temp;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp&lt;=sval)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//后面读出的数据一定要比第一次读到的数据大.       </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SDRAM Capacity:%dKB\r\n&quot;</span>,(<span class="hljs-keyword">uint16_t</span>)(temp-sval+<span class="hljs-number">1</span>)*<span class="hljs-number">16</span>);<span class="hljs-comment">//打印SDRAM容量</span><br>     &#125;                     <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数利用不断向SDRAM内写入递增的值，并依次读取写入过的值，判断后面的数据是否比前一次读取的大，并通过printf函数输出当前测试的SDRAM的大小。使用printf函数注意需要在工程选项中勾选<code>USE MicroLIB</code>并增大堆栈空间。测试结果如图。</p><p><img src="/images/STM32_SDRAM_01/Snipaste_2022-03-21_02-38-54.png"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> SDRAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正点原子F429开发板使用STM32CubeMX驱动4.3寸 RGB LCD</title>
      <link href="/STM32_LTDC_RGB_800x480_01/"/>
      <url>/STM32_LTDC_RGB_800x480_01/</url>
      
        <content type="html"><![CDATA[<h1 id="正点原子F429开发板使用STM32CubeMX驱动4-3寸-RGB-LCD"><a href="#正点原子F429开发板使用STM32CubeMX驱动4-3寸-RGB-LCD" class="headerlink" title="正点原子F429开发板使用STM32CubeMX驱动4.3寸 RGB LCD"></a>正点原子F429开发板使用STM32CubeMX驱动4.3寸 RGB LCD</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>​    我不是买了一块4.3寸野火和正点原子双兼容的屏幕嘛，在测试和使用过程中积累了些许的经验，在此分享一下。</p><h2 id="为什么这块屏幕能够做到双兼容？"><a href="#为什么这块屏幕能够做到双兼容？" class="headerlink" title="为什么这块屏幕能够做到双兼容？"></a>为什么这块屏幕能够做到双兼容？</h2><p>​    首先要说明的是这块屏幕使用的是RGB的接口，并不是使用的MCU接口。RGB屏幕在使用时只需要配置好屏幕的时钟和一些扫描参数就可以了，而MCU屏幕需要对其写入指令，较为复杂。因此找到一款扫描参数和原厂相同的RGB屏幕要比找到一款使用相同主控的MCU屏幕容易得多，甚至你可以找到不同面板（TN和IPS）的RGB屏幕，而MCU屏幕除了进行定制，往往只能找到和原厂一样面板的屏幕（吐槽正点原子4.3寸800*480分辨率的MCU屏使用的是TN面板）。</p><h2 id="STM32CubeMX配置步骤"><a href="#STM32CubeMX配置步骤" class="headerlink" title="STM32CubeMX配置步骤"></a>STM32CubeMX配置步骤</h2><p>首先配置F429的RCC时钟部分，使用外部时钟信号。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-01-39.png"></p><p>接下来配置GPIO部分。</p><p>PB5为背光控制引脚，高电平时背光打开。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-04-45.png"></p><p>接下来是LTDC部分的引脚。因为正点原子F429开发板使用的是重映射后的引脚，所以这里需要手动设置这部分引脚复用为LTDC。引脚列表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**LTDC GPIO Configuration</span><br><span class="hljs-comment">    PI9     ------&gt; LTDC_VSYNC</span><br><span class="hljs-comment">    PI10     ------&gt; LTDC_HSYNC</span><br><span class="hljs-comment">    PF10     ------&gt; LTDC_DE</span><br><span class="hljs-comment">    PH9     ------&gt; LTDC_R3</span><br><span class="hljs-comment">    PH10     ------&gt; LTDC_R4</span><br><span class="hljs-comment">    PH11     ------&gt; LTDC_R5</span><br><span class="hljs-comment">    PH12     ------&gt; LTDC_R6</span><br><span class="hljs-comment">    PG6     ------&gt; LTDC_R7</span><br><span class="hljs-comment">    PG7     ------&gt; LTDC_CLK</span><br><span class="hljs-comment">    PH13     ------&gt; LTDC_G2</span><br><span class="hljs-comment">    PH14     ------&gt; LTDC_G3</span><br><span class="hljs-comment">    PH15     ------&gt; LTDC_G4</span><br><span class="hljs-comment">    PI0     ------&gt; LTDC_G5</span><br><span class="hljs-comment">    PI1     ------&gt; LTDC_G6</span><br><span class="hljs-comment">    PI2     ------&gt; LTDC_G7</span><br><span class="hljs-comment">    PG11     ------&gt; LTDC_B3</span><br><span class="hljs-comment">    PI4     ------&gt; LTDC_B4</span><br><span class="hljs-comment">    PI5     ------&gt; LTDC_B5</span><br><span class="hljs-comment">    PI6     ------&gt; LTDC_B6</span><br><span class="hljs-comment">    PI7     ------&gt; LTDC_B7</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-05-41.png"></p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-05-55.png"></p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-06-04.png"></p><p>接下来打开<code>DMA2D</code>，选择数据格式为<code>RGB565</code>。传输方向为<code>寄存器到内存</code>。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-02-21.png"></p><p>接着设置LTDC部分的参数。根据屏幕的参数来输入<code>水平同步时钟宽度</code>、<code>水平后廊宽度</code>、<code>水平像素宽度</code>、<code>水平前廊宽度</code>、<code>垂直同步时钟宽度</code>、<code>垂直后廊宽度</code>、<code>垂直像素宽度</code>、<code>垂直前廊宽度</code>。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-04-18.png"></p><p>设置显存地址，显存大小，显示层数。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-03-49.png"></p><p>设置像素参数和数据格式。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-02-56.png"></p><p>设置时钟树。系统主时钟为180MHz，LCD-TFT时钟经过倍频和分频后为30MHz。这里需要注意LCD-TFT的频率不要过高也不能过低，否则屏幕无法正常显示。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-07-54.png"></p><p>设置完毕。</p><h2 id="Image2Lcd-生成图片数据"><a href="#Image2Lcd-生成图片数据" class="headerlink" title="Image2Lcd 生成图片数据"></a>Image2Lcd 生成图片数据</h2><p>打开<code>Image2Lcd</code>软件，生成图片数据。这里输出数据类型设置为c语言数组，方便我们进行测试。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-34-28.png"></p><h2 id="Keil-修改工程并下载测试"><a href="#Keil-修改工程并下载测试" class="headerlink" title="Keil 修改工程并下载测试"></a>Keil 修改工程并下载测试</h2><p>使用<code>Keil</code>打开工程，并将刚才生成的<code>.c</code>文件添加到工程，添加外部数组声明，并修改显存地址。让屏幕直接输出图片内容。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-38-25.png"></p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-39-15.png"></p><p>至此，工程修改完毕，尽行下载测试，下载过程稍慢，测试效果如图。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/IMG_20220320_204254.jpg"></p><p>效果不错，就是最下面有条白色的bar。后来发现是因为我选择的图片比例与屏幕的比例不匹配导致，Image2Lcd软件并没有自动拉伸图片的功能，在生成图片数组时，Image2Lcd软件已经给出了提示，如图。</p><p><img src="/images/STM32_LTDC_RGB_800x480_01/Snipaste_2022-03-20_20-46-37.png"></p><p>后选择合适的图片后，图像可以全屏显示。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式STM32笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> F429 </tag>
            
            <tag> RGBLCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪文串口屏T5L STM32 51驱动程序分享</title>
      <link href="/DWinUart_Driver/"/>
      <url>/DWinUart_Driver/</url>
      
        <content type="html"><![CDATA[<h1 id="迪文串口屏T5L-STM32-51驱动程序分享"><a href="#迪文串口屏T5L-STM32-51驱动程序分享" class="headerlink" title="迪文串口屏T5L STM32 51驱动程序分享"></a>迪文串口屏T5L STM32 51驱动程序分享</h1><p>最近在研究迪文的串口屏，网络上好像没有找到迪文的串口驱动程序。虽然这个东西不难，就是发送几个命令的事，但是仍然踩了不少坑。我用的型号是DMG48270C043_03WTC，不过应该和型号没关系。使用前需要用DGUS工具做好界面并设置好变量地址和描述地址，具体可以看迪文官方在bilibili发布的教程<a href="https://www.bilibili.com/video/BV1D64y1T7JL">迪文智能屏T5L_DGUSII教程1_开发步骤_哔哩哔哩_bilibili</a>和 原子哥上的教程<a href="https://www.yuanzige.com/course/detail/80041?section_id=81072">T5L迪文屏C51开发教程 - 原子哥，专注电子技术教学 (yuanzige.com)</a>。</p><p>这个驱动只实现了极少一部分功能，可供快速调试时使用。移植时只需要实现DWin_SendDat函数即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DWin_SendDat</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* dat, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    USART2_SendData(dat, length);<br>    HAL_Delay(<span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>驱动地址：—上传中—</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32 HAL库 使用DMA同时收发串口数据</title>
      <link href="/STM32_UART_TxRx_DMA/"/>
      <url>/STM32_UART_TxRx_DMA/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-HAL库-使用DMA同时收发串口数据"><a href="#STM32-HAL库-使用DMA同时收发串口数据" class="headerlink" title="STM32 HAL库 使用DMA同时收发串口数据"></a>STM32 HAL库 使用DMA同时收发串口数据</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>在上个文章里，我介绍了使用串口空闲中断的方法来接收任意长度的数据，但是在我调试串口屏的的时候，发现了一个严重的问题。我是用的是北京迪文科技的串口屏，当向串口屏发送写入数据指令的时候，串口屏会返回一个应答，正是这个应答就导致了STM32在运行的时候会卡死。</p><p>于是我开始在网络上查找资料（顺便吐槽一下，网络上的资料大部分都是转载，原创资料少之又少，就连老子的文章也被哪个阉人转载到了其他地方），发现HAL库有一个锁定机制，如果串口在发送数据的时候又接收数据，就会导致程序锁住，表现为卡死。于是我用STLink调试跟踪，发现最终程序死在了HAL_UART_IRQHandler函数中。网友大多表示要么放弃HAL库，要么就自己实现接收函数。我为了保证整个程序的移植性，最后决定继续使用HAL库，尝试使用其他办法解决串口同时收发的问题。</p><p>我突然想到之前有一个项目里使用的DMA来接收串口数据，哪个项目里串口是可以同时收发数据且多个串口都是可以同时使用的。于是我在此项目中使用DMA接收数据，发现程序运行良好，不再卡死。</p><p>使用DMA需要在CubeMX中串口的选项中添加DMA通道：</p><p><img src="/images/STM32_UART_TxRx_DMA/1.png" alt="添加DMA通道"></p><p>接着打开串口接收中断，如果不打开接收中断DMA无法接收到数据。</p><p><img src="/images/STM32_UART_TxRx_DMA/2.png" alt="打开串口中断"></p><p>为了防止DMA的中断优先级与滴答定时器冲突，更改一下DMA的优先级，并保持滴答定时器的优先级最高。</p><p><img src="/images/STM32_UART_TxRx_DMA/3.png" alt="调整优先级"></p><p>在代码中，删除原来的接收回调函数，接收工作全部交给DMA去完成，所以不需要自己处理接收函数。然后在main函数中开启DMA接收，指定DMA接收的缓冲区。由于串口是否接收完毕还是靠串口空闲中断来完成，所以仍然需要打开串口空闲中断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ...;<br>    __HAL_UART_ENABLE_IT(&amp;huart2,UART_IT_IDLE);    <br>    HAL_UART_Receive_DMA(&amp;huart2, (<span class="hljs-keyword">uint8_t</span> *)RxBuffer2, <span class="hljs-keyword">sizeof</span>(RxBuffer2));<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>在串口服务函数中，添加串口中断处理部分的代码。当串口进入空闲中断时（表示数据接收完毕），关闭DMA接收，并将接收标志置1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">USART2_IRQHandler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_IRQn 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END USART2_IRQn 0 */</span><br>  HAL_UART_IRQHandler(&amp;huart2);<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_IRQn 1 */</span><br>    <span class="hljs-keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart2, UART_FLAG_IDLE))<br>    &#123;<br>        __HAL_UART_CLEAR_IDLEFLAG(&amp;huart2);<br>        HAL_UART_DMAStop(&amp;huart2);<br>        RxFlag2 = <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">/* USER CODE END USART2_IRQn 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在回到main函数中，根据接收标志去处理接收到的串口数据就好了，最后不要忘记处理完了还要将缓冲区清空并再打开DMA接收并将接收标志置0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(RxFlag2)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;uart2 dma :%s\r\n&quot;</span>, RxBuffer2);<br>            RxFlag2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">memset</span>(RxBuffer2, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(RxBuffer2));<br>            HAL_UART_Receive_DMA(&amp;huart2, (<span class="hljs-keyword">uint8_t</span> *)RxBuffer2, <span class="hljs-keyword">sizeof</span>(RxBuffer2));<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后测试，串口可以同时收发数据，不会发生卡死的情况了。<br>如果发送的时候不想占用CPU资源，也可以使用DMA来发送数据，在CubeMX里面添加串口发送的DMA通道，并设置优先级，这里的优先级可以设置与接收相同。发送时只需要调用HAL_UART_Transmit_DMA这个函数就可以发送了。</p><p>HAL_UART_Transmit_DMA(&amp;huart2, “uart2 send test\r\n”, sizeof(“uart2 send test\r\n”));</p><p>比如fputc函数可以这样改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ch,FILE *f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">uint8_t</span> temp[<span class="hljs-number">1</span>]=&#123;ch&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> USE_HAL_DRIVER</span><br>    HAL_UART_Transmit_DMA(&amp;huart1,temp,<span class="hljs-number">1</span>);        <span class="hljs-comment">//UartHandle是串口的句柄</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    USART1-&gt;DR = temp[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">while</span>((USART1-&gt;SR &amp; <span class="hljs-number">0x40</span>) == <span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32 HAL库多串口任意长度接收的方法（无起始和结束标志，不使用DMA）</title>
      <link href="/STM32_UART_TxRx_noDMA/"/>
      <url>/STM32_UART_TxRx_noDMA/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-HAL库多串口任意长度接收的方法（无起始和结束标志，不使用DMA）"><a href="#STM32-HAL库多串口任意长度接收的方法（无起始和结束标志，不使用DMA）" class="headerlink" title="STM32 HAL库多串口任意长度接收的方法（无起始和结束标志，不使用DMA）"></a>STM32 HAL库多串口任意长度接收的方法（无起始和结束标志，不使用DMA）</h1><p>发现最近随便转载的很多啊，未经授权禁止转载！抄袭！！否则转载者死全家！！另外这是我的笔记，不是教程，难免会有错误，不具有很高的参考性，望周知。</p><p>今天在HAL库串口接收任意长度上卡了好久，之前用的都是标准库或者HAL库+DMA的方式来写，今天这个项目用的是F429木有标准库可用，需要和其他模块配合，其他模块发的是不定长的数据且无起始和结束标志，串口又不能用DMA，所以只得使用接收中断和空闲中断的方式来解决。</p><p>我也尝试了使用网络上的例程来实现，不知是HAL库的原因还是什么，要么是无法正常接收数据，要么就是无法进入空闲中断，因此自己摸索了好久。</p><p>现在的代码思路是：STM32的串口有一个空闲中断的功能，串口在没有数据传输的时候会进入空闲中断，因此利用空闲中断可以接收任意不定长且无起始和结束标志的数据。</p><p>首先在STM32 CubeMX中正常配置串口接收，并打开串口中断，我这里勾选了创建默认HAL_UART_IRQHandler函数的选项。</p><p>工程创建完毕之后，在main.c文件中，创建两个串口缓冲数组，以及两个unsigned char型变量用来存放接收到的串口数据。在main函数中，需要调用HAL_UART_Receive_IT函数来对串口接收中断进行配置。</p><p>还需要在main()函数中添加开启串口空闲中断的代码，有几个串口就开启几个，这里比较坑的是在HAL库中开启空闲中断的方法使用的是宏定义，鼠标在语句上不会有参数提示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">main.c:<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxBuffer1[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxBuffer2[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxByte1;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxByte2;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HAL_UART_Receive_IT(&amp;huart1,&amp;RxByte1,<span class="hljs-number">1</span>);                    <span class="hljs-comment">/*开启串口接收中断并指定将接收到的数据放进RxByte1变量中，第三个参数为接收n个字符进入接收回调函数，这里设置为1，即一个字符一个字符地接收*/</span><br>    HAL_UART_Receive_IT(&amp;huart2,&amp;RxByte2,<span class="hljs-number">1</span>);<br>    <br>    __HAL_UART_ENABLE_IT(&amp;huart1,UART_IT_IDLE);<br>    __HAL_UART_ENABLE_IT(&amp;huart2,UART_IT_IDLE);<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>当串口接收到数据以后，会将数据放进RxByte1变量中并调用HAL_UART_RxCpltCallback函数，因此在main.c文件中创建void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">main.c:<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> RxCount1;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> RxCount2;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxFlag1;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxFlag2;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)                                <span class="hljs-comment">// 判断是由哪个串口触发的中断</span><br>    &#123;<br>        RxBuffer1[RxCount1] = RxByte1;                          <span class="hljs-comment">//将接收到的数据放进RxBuffer1缓冲区中</span><br>        RxCount1++;                                                <span class="hljs-comment">//RxBuffer1下标累加</span><br>        HAL_UART_Receive_IT(&amp;huart1,&amp;RxByte1,<span class="hljs-number">1</span>);                <span class="hljs-comment">//处理完毕还需要重新打开接收中断，否则不会接收下一个数据</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br>    &#123;<br>        RxBuffer2[RxCount2] = RxByte2;<br>        RxCount2++;<br>        HAL_UART_Receive_IT(&amp;huart2,&amp;RxByte2,<span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在stm32f4xx_it.c文件中，找到串口中断服务函数，添加以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">stm32f4xx_it.c:<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> RxCount1;                                    <span class="hljs-comment">//声明外部变量，与main.c文件中的变量联系在一起</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> RxCount2;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxFlag1;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> RxFlag2;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">USART1_IRQHandler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN USART1_IRQn 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END USART1_IRQn 0 */</span><br>  HAL_UART_IRQHandler(&amp;huart1);<br>  <span class="hljs-comment">/* USER CODE BEGIN USART1_IRQn 1 */</span><br>    <span class="hljs-keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_IDLE) != RESET)    <span class="hljs-comment">/*判断是空闲中断标志位,要注意的是这个语句不要写到HAL_UART_RxCpltCallback函数中，因为HAL_UART_RxCpltCallback只是接收回调函数，不是接收的情况下是不会调用的，如果写到HAL_UART_RxCpltCallback中永远也处理不了空闲中断*/</span><br>    &#123;<br>        __HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);                        <span class="hljs-comment">//清除空闲中断标志</span><br>        RxFlag1 = <span class="hljs-number">1</span>;                                            <span class="hljs-comment">//接收标志置1，表示收到了一帧数据</span><br>    &#125;<br>  <span class="hljs-comment">/* USER CODE END USART1_IRQn 1 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">USART2_IRQHandler</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_IRQn 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END USART2_IRQn 0 */</span><br>  HAL_UART_IRQHandler(&amp;huart2);<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_IRQn 1 */</span><br>    <span class="hljs-keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart2, UART_FLAG_IDLE) != RESET)<br>    &#123;<br>        __HAL_UART_CLEAR_IDLEFLAG(&amp;huart2);<br>        RxFlag2 = <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">/* USER CODE END USART2_IRQn 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着就可以在mian.c文件中处理接收到的数据了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">main.c:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br>        <span class="hljs-keyword">if</span>(RxFlag1 == <span class="hljs-number">1</span>)                                    <span class="hljs-comment">//如果串口1收到了一帧数据</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;USART1:%s\r\n&quot;</span>, RxBuffer1);                <span class="hljs-comment">//printf内容</span><br>            <span class="hljs-built_in">memset</span>(RxBuffer1,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(RxBuffer1));            <span class="hljs-comment">//清空缓冲区，一定要清空</span><br>            RxFlag1 = <span class="hljs-number">0</span>;                                    <span class="hljs-comment">//接收标志置0</span><br>            RxCount1 = <span class="hljs-number">0</span>;                                    <span class="hljs-comment">//清零计数</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(RxFlag2 == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;USART2:%s\r\n&quot;</span>, RxBuffer2);<br>            <span class="hljs-built_in">memset</span>(RxBuffer2,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(RxBuffer2));<br>            RxFlag2 = <span class="hljs-number">0</span>;<br>            RxCount2 = <span class="hljs-number">0</span>；<br>        &#125;<br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>}</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32的寻呼发射器开源啦！！</title>
      <link href="/STM32_POCSAG_Transmit/"/>
      <url>/STM32_POCSAG_Transmit/</url>
      
        <content type="html"><![CDATA[<h1 id="基于STM32的寻呼发射器开源啦！！"><a href="#基于STM32的寻呼发射器开源啦！！" class="headerlink" title="基于STM32的寻呼发射器开源啦！！"></a>基于STM32的寻呼发射器开源啦！！</h1><p>这个项目是我第一个独立自主的项目，从PCB设计、程序编写到上位机编写、外观设计都是我一个人独立完成，前后耗费近一年时间。现学业繁忙，没有精力继续维护下去，并且我觉得我代码写的稀烂。所以将这个项目开源，供广大朋友自己DIY。该项目遵循GPL协议，STM32部分代码、上位机全部代码和ESP8266全部代码仅用于个人研究和DIY，不可用于商业用途！！！商业授权请联系<a href="mailto:&#x33;&#x35;&#57;&#x33;&#48;&#51;&#50;&#x36;&#x37;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x33;&#x35;&#57;&#x33;&#48;&#51;&#50;&#x36;&#x37;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a>  </p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>这个项目主要由STM32F103RCT6、ESP8266-01S、SR_FRS_1WV模块组成，需要配合上位机进行使用。主要用于生成POCSAG编码并进行NFM调制发送，使接收设备可以收到消息。可以向老式的BP机发送消息，前提是BP机必须工作在V段频率且支持POCSAG编码，关于这方面的知识可以从这里学习：<a href="https://www.bilibili.com/video/BV1YE411N7p7/">https://www.bilibili.com/video/BV1YE411N7p7/</a></p><p>相当于小型寻呼台。<br>这款发射器支持手机wifi追频追码，支持所有POCSAG编码的机器，暂时不支持高速机。</p><p>5V2A供电，在户外可使用充电宝供电。支持摩托罗拉大顾问，精英王，八达等常见低速型号，发射低功率0.5W，高功率1W（只会多不会少），空旷发射距离1km多，条件好的距离可达2km（不是吹的，我实际测试过，天线在二楼，骑着小电驴测试距离，你也可以用设备测功率，不够1W我吃了它！由此可见其他那些100mW功率的发射器距离有多远了吧…），可外接功放增加距离（前提是在合规合法的情况下），可设置PTT延时，可提前和延后打开功放，避免误码。频率范围136MHz～174MHz，支持512、1200、2400速率的机器，可支持数字机和汉字机，也就是说，只要你的呼机上没有flex花花标志，都是支持的。</p><p>一次可发送400个字符，200个汉字，可以群呼，可以组呼，内置存储器，可存储20组呼机参数和常用语，可连接家里的Wifi，也可工作在热点模式。在户外没有wifi也可以通过手机连接自带的wifi网络进行控制。如果你有技术，可以自己做内网穿透（比如花生壳之类的，个人免费），实现随时随地都可以发送消息。这样的优势就是不怕我跑路。</p><p>发射器自带OLED显示屏，可显示重要参数和提示，产品支持固件升级。</p><ul><li><p>STM32F103RCT6可以更换成其他M3内核的单片机。</p></li><li><p>ESP8266-01S模块需要进行改装，需要将自带的1MB Flash更换成4MB，不能直接使用。如果不需要WIfi控制功能，也可以不装ESP8266。</p></li><li><p>SR_FRS_1WV模块也需要改装，不可直接使用，需要拆开屏蔽罩，将压控振荡器的输入端（26M晶振1脚）引出并与模块的第四脚相接才可以进行正常的发送。</p></li><li><p>进行无线发送时需要注意，不可空载测试，必须要接上V段天线或者假负载，否则会烧坏RF模块的功放！！</p></li><li><p>由于发送功率较大，已达到1W，空旷通信距离可以超过1km，因此务必遵守当地无线电相关法则，不可干扰其他设备正常运行，不可干扰其他人通信和卫星通信，务必通过业余无线电考试之后再进行操作！！</p></li></ul><p>PCB地址：<a href="https://lceda.cn/verylk/xun-hu-fa-ye-jiv1-0_copy_copy">https://lceda.cn/verylk/xun-hu-fa-ye-jiv1-0_copy_copy</a></p><p>源码地址：<a href="https://github.com/359303267/STM32_POCSAG_Transmit">https://github.com/359303267/STM32_POCSAG_Transmit</a></p><p>软件地址：<a href="https://github.com/359303267/STM32_POCSAG_Transmit/releases">https://github.com/359303267/STM32_POCSAG_Transmit/releases</a></p><p>使用教程：<a href="https://www.bilibili.com/video/BV1sZ4y1u76M">https://www.bilibili.com/video/BV1sZ4y1u76M</a></p><h1 id="成品外观"><a href="#成品外观" class="headerlink" title="成品外观"></a>成品外观</h1><p><img src="/images/STM32_POCSAG_Transmit/1.png" alt="正面">  </p><p><img src="/images/STM32_POCSAG_Transmit/2.png" alt="反面"></p><h1 id="假如你有问题"><a href="#假如你有问题" class="headerlink" title="假如你有问题"></a>假如你有问题</h1><p>本人开源这个项目即表示放弃这个项目，所以有任何问题都不要找我（当然，给我送钱除外，毕竟谁会跟钱过不去呢~），你需要增加自己的知识储备。更不要试图加我，我不会同意。</p><p>没有成品卖！！</p><h1 id="其他要说的"><a href="#其他要说的" class="headerlink" title="其他要说的"></a>其他要说的</h1><p>看到下面红色的打赏了吗？你懂我意思~</p>]]></content>
      
      
      <categories>
          
          <category> BP机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> PCB </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GY906传感器校准数据备份</title>
      <link href="/GY906jiaozhunshuju/"/>
      <url>/GY906jiaozhunshuju/</url>
      
        <content type="html"><![CDATA[<ul><li>最近在做一个项目，测试GY906红外测温传感器的时候，不小心把配置寄存器1中的校准数据刷掉了，并且没有备份。无奈之下又买了一个，读出配置寄存器的值为<strong>0xaff4</strong>（BCC型号，其他型号不确定）。如果不小心将这个寄存器的值刷掉了，重新写入即可。 </li><li>在做其他传感器测试的时候，一定要先备份原始数据，否则可能会出大问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GY906 </tag>
            
            <tag> 人体红外 </tag>
            
            <tag> 红外测温 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(2020)一个不知道叫什么好的U盘启动工具集</title>
      <link href="/PE/"/>
      <url>/PE/</url>
      
        <content type="html"><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>​        没错，这是最后一个版本，以后不再更新。<br>​        我从2013年开始制作这个U盘启动工具集，到现在已经有七年之久了，当初的目的只是想把自己需要的工具集成到一起并提高工具的兼容性，后来出于互联网的分享精神，开始在CSDN和无忧论坛上发布，上传到百度网盘供大家免费使用。    </p><h1 id="再见"><a href="#再见" class="headerlink" title="再见"></a>再见</h1><p>​        为什么不继续做了呢？当时我才初中毕业，无忧无虑的时光总是过得很快，如今已经大学毕业，已经不再是小孩子，需要自己挣钱。很显然，这个工具无法带给我收入，前几版当中内置浏览器中有2345联盟的主页，后来网友们觉得2345恶心，就去掉了，2345联盟中的收入只有30元，充了话费。这个工具我单独开了一个支付宝账号来计算捐赠收入，七年时间通过二维码捐赠（微信和支付宝一共）拿到的收入有600元左右（最近这两个月收入只有7元）。我的博客是搭建在github上的，所以不需要额外的支出。</p><p>​        好像看起来还是有一些油水可以拿的，不过大家不要忘了时间成本，每次我发布新的版本之前，几乎都是通宵来进行更新，每次都要花大量的时间来寻找PE内核、移植脚本、编写PECMD.ini、寻找驱动、集成驱动、增删系统组件、对比注册表、甚至是快捷方式、Grub4DOS菜单文件等等一系列工作，有时候甚至集成一个驱动要反复测试确保不会蓝屏、改一下注册表要重启验证、出一个问题就要找几个小时……只到最后还需要完整打包测试，保证所有功能能够正常使用。最后结果就是眼也花了，背也驼了，没有收入，心态崩了。这种工具我觉得它稳定、兼容性好就够了，不需要去追求什么新的PE内核版本，新的PETools软件。其实新版工具完全可以放在你自己的U盘当中找到打开，你自己只是懒而已。很多人反映的问题其实就是使用技巧的问题，之前还想完善一下wiki，分享一下使用经验之类的，现在算了算了。</p><h1 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h1><p>虽然不再更新，但是作者（我）依然保留所有权，对于抄袭和贩卖软件之事一概不能容忍。<br>Win10PE内核部分版权属于WinBuilder2作者。禁止抄袭！！如发现有侵权行为，会走程序。  </p><h1 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h1><p>最为最后一个版本，有哪些更新呢？</p><ol><li>如愿以偿，更新了DISM++、DiskGenium、Everything、WinNTSetup等等常用的PETools工具。</li><li>如愿以偿，更新了Win10PEx86、Win10x64PE的内核（使用伟大的WinBuilder2工具构建）。</li><li>更新了Grub2文件管理。</li><li>Win10PE完美支持安卓手机MTP文件传输和USB网络分享。</li><li>PETools分立单独下载，你可以选择不加载PETools，这样你就会得到一个非常纯净的PE内核。</li><li>Win10PE只集成了USB3.0驱动和intel RST驱动，其他驱动一律没有集成（不合适的驱动会导致蓝屏花屏死</li><li>机，如果想自行加载驱动可以放到PETools文件夹里）。</li><li>如果检测到磁盘根目录有PETools文件夹，就会自动加载PETools，不用手动加载。</li><li>启动页面加入版本信息，不过没啥用，这是最后一个版本。</li><li>CDROM版本同步更新，支持UEFI和BIOS两种启动方式。</li></ol><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><h2 id="启动界面"><a href="#启动界面" class="headerlink" title="启动界面"></a>启动界面</h2><p><img src="/images/PE/33.png"></p><p><img src="/images/PE/34.png"></p><p><img src="/images/PE/35.png"></p><h2 id="Windows-2003-PE"><a href="#Windows-2003-PE" class="headerlink" title="Windows 2003 PE"></a>Windows 2003 PE</h2><p><img src="/images/PE/36.png"></p><p><img src="/images/PE/37.png"></p><h2 id="Windows-10-PE"><a href="#Windows-10-PE" class="headerlink" title="Windows 10 PE"></a>Windows 10 PE</h2><p><img src="/images/PE/38.png"></p><p><img src="/images/PE/39.png"></p><p><img src="/images/PE/40.png"></p><h2 id="Slitaz-5-0-Linux-系统"><a href="#Slitaz-5-0-Linux-系统" class="headerlink" title="Slitaz 5.0 Linux 系统"></a>Slitaz 5.0 Linux 系统</h2><p><img src="/images/PE/26.png"></p><h2 id="内置基于-Linux-的-Acronis-工具"><a href="#内置基于-Linux-的-Acronis-工具" class="headerlink" title="内置基于 Linux 的 Acronis 工具"></a>内置基于 Linux 的 Acronis 工具</h2><p><img src="/images/PE/27.png"></p><p><img src="/images/PE/28.png"></p><h2 id="UEFI-启动模式下的工具"><a href="#UEFI-启动模式下的工具" class="headerlink" title="UEFI 启动模式下的工具"></a>UEFI 启动模式下的工具</h2><p><img src="/images/PE/29.png"></p><p><img src="/images/PE/30.png"></p><h2 id="丰富又强大的外置-PETools"><a href="#丰富又强大的外置-PETools" class="headerlink" title="丰富又强大的外置 PETools"></a>丰富又强大的外置 PETools</h2><p><img src="/images/PE/31.png"></p><h2 id="制作工具主界面"><a href="#制作工具主界面" class="headerlink" title="制作工具主界面"></a>制作工具主界面</h2><p><img src="/images/PE/32.png"></p><h1 id="体积占比"><a href="#体积占比" class="headerlink" title="体积占比"></a>体积占比</h1><h2 id="U盘完整版"><a href="#U盘完整版" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><table><thead><tr><th align="center">BIOS占用</th><th align="center">UEFI占用</th><th align="center">外置PETools</th><th align="center">总计占用</th></tr></thead><tbody><tr><td align="center">1450MB</td><td align="center">1413MB</td><td align="center">762MB</td><td align="center">3625MB</td></tr></tbody></table><h2 id="CD-ROM版"><a href="#CD-ROM版" class="headerlink" title="CD-ROM版"></a>CD-ROM版</h2><p>2.44GB（已集成PETools包，直接使用普通4.7GB DVD光碟刻录即可）</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>支持大部分的机器和硬件。新机器使用Win10PE，老机器使用Win2003PE，配合Slitaz Linux系统基本可以做到维护所有家用机型。</li><li>Win2003PE和Win10PE支持网络功能，内置一定的网卡驱动，部分机型需要手动安装驱动，Win10PE支持声音。</li><li><strong>Win10PE自适应DPI</strong>高分辨率下会自动调节字体缩放。</li><li>附带的<strong>PETools搜集了很多兼顾体积和功能的程序</strong>，装机无忧。</li><li>Win10PE支持MTP功能，可以从安卓手机上拷贝文件。</li><li>可以打开常见的文件格式（包括jpg、gif、png、bmp等常见图片格式，mp3、wav、mp4、avi、mkv等常见媒体格式，doc、docx、xls、xlsx、ppt、pptx、chm、pdf等常见文稿格式等等）</li><li>在不加载外置PETools的情况下，自带的工具足够给磁盘分区和装系统用，以便内存不够造成无法加载PETools。</li><li>可以把常用的驱动放在”U盘根目录\PETools\外置驱动程序”目录当中，进入PE之后只需要点击开始菜单里的快捷方式就可以自动安装驱动程序。</li><li>附带基于Linux内核的Acronis True Image Home和Acronis Disk Director工具。</li><li>界面好看，UEFI启动界面使用<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=157812&extra=page=1">XorBoot Uefi</a>工具制作。<a href="/files/PE/XorBootUx64.exe.zip">在此</a>上传一个我使用的版本，以免绝版。</li><li>没有推广和广告以及任何影响工具纯净的东西。</li></ol><h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><h2 id="U盘完整版-1"><a href="#U盘完整版-1" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><ol><li><p>首先准备一个容量大于或等于4GB的存储设备（使用USB3.0设备可以大幅度提高进入PE的速度）  </p></li><li><p>一台运行Windows XP及以上系统的电脑（建议使用Windows 7系统，Windows 10可能出现兼容性问题）</p></li><li><p>备份重要资料（制作过程需要抹除数据）</p></li><li><p>打开USEC文件夹里的“开始制作.exe”</p></li><li><p>选择对应的磁盘，其他参数不要改，直接单击“全新制作”</p></li><li><p>制作完成后，将PETools文件夹拷贝到你的存储设备，注意是文件夹和里面的文件，不是只发送里面的文件，**保证文件结构类似于”G:\PETools\Tools.wim”**。当然如果不需要PETools的话，这一步可以忽略。</p></li></ol><h2 id="光盘版"><a href="#光盘版" class="headerlink" title="光盘版"></a>光盘版</h2><p>​    使用刻录软件刻录到DVD光盘即可，这里不提供刻录方法。</p><h1 id="各PE最低启动内存"><a href="#各PE最低启动内存" class="headerlink" title="各PE最低启动内存"></a>各PE最低启动内存</h1><p>​    Win2003PE最低启动内存：512MB<br>​    Win10PE 32位版最低启动内存：2G<br>​    Win10PE 64位版最低启动内存：2G<br>​    机器内存少于512MB建议使用DOS工具替代使用  </p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><h2 id="U盘完整版-2"><a href="#U盘完整版-2" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><p>下载地址：链接: <a href="https://pan.baidu.com/s/1zjtw-_dre2WvlaVN-fZXUg">https://pan.baidu.com/s/1zjtw-_dre2WvlaVN-fZXUg</a> 提取码: xeyk</p><p>文件: 2020.04.23_Full.zip<br>大小: 2903399760 字节<br>修改时间: 2020年4月22日, 17:32:42<br>MD5: 7676F3F8C5FDF586C051681869E657D4<br>SHA1: 7B6846A4824FB2F8402A8A160A89B7674F556C99<br>CRC32: EF275AC8</p><h2 id="PETools软件包"><a href="#PETools软件包" class="headerlink" title="PETools软件包"></a>PETools软件包</h2><p>下载地址：链接: <a href="https://pan.baidu.com/s/1kUiURkHww5uGSANz5ZwDmg">https://pan.baidu.com/s/1kUiURkHww5uGSANz5ZwDmg</a> 提取码: brye</p><p>文件: PETools.zip<br>大小: 797045015 字节<br>修改时间: 2020年4月22日, 17:30:54<br>MD5: 1659983336421FA964B6D1A6B336B69E<br>SHA1: 04D3AADB50725C663930DC6B7062484096421410<br>CRC32: 9600EDD0</p><h2 id="CD-ROM版-1"><a href="#CD-ROM版-1" class="headerlink" title="CD-ROM版"></a>CD-ROM版</h2><p>下载地址：链接: <a href="https://pan.baidu.com/s/1gfl8enEVNvsGRsAbz9NJsw">https://pan.baidu.com/s/1gfl8enEVNvsGRsAbz9NJsw</a> 提取码: n83y</p><p>文件: 2020.04.23_CDROM.iso<br>大小: 2626191360 字节<br>修改时间: 2020年4月22日, 16:31:59<br>MD5: 2D536CA5721483B4684C4CEA73EDCCBB<br>SHA1: 5FF0089DC1CA167E0DCB4AD473B3FE16474A3674<br>CRC32: 7025AFEE</p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol><li>PE可以点击右下角回到桌面啦！</li><li>刷新Explorer.exe在鼠标右键“打开加加”里面！</li><li>加载外置工具后可以按PrtSc键进行截图！</li><li>搜索文件的话，用“文件工具”里的“Everything”要比系统自带的搜索快得多！</li><li>PE识别不到硬盘，有两种解决方案。如果是Win2003PE就进“Win2003PE蓝屏黑屏不认硬盘解决方案”看看吧。如果是Win10PE，嗯。。。。。这个可以进BIOS把硬盘模式设置为IDE模式试试，装好系统之后再改回来。</li><li>想要快速拷贝可以用FastCopy软件哦~</li><li>正确加载PETools的方式是保证所有磁盘根目录只有一个PETools（搜索方式是倒序盘符搜索），然后打开桌面的“加载外置程序”，等待几秒就可以了。加载PETools之后最好刷新一下Explorer.exe（当然也可以不刷新，嘿嘿···）</li><li>更改分辨率可以在右下角的彩色屏幕图标上右击，可以看到你想更改的分辨率，然后手动刷新Explorer。</li><li>按住shift键并在空白处右击可以打开命令提示符。</li><li>机器与机器之间传输文件可以利用网络工具里的FTP服务器和FTP客户端哦~也可以使用飞鸽传书或者使用HFS搭建HTTP服务器来传输文件。</li><li>用PE自带的DISM++可以完成大多数的系统维护功能（安装系统，离线补丁，注入驱动，修复引导等等）。</li><li>点击右下角PENetWork的图标可以直接连接Wifi。</li><li>连接手机到Win10PE之后可以在PE里面使用fastboot工具来刷机，<a href="/fastboot-01">刷机教程在此</a>。</li><li>如果你想在正常的系统使用PETools里面的程序，可以使用7-Zip打开PETools.wim，将需要的工具解压出来就可以使用了。</li></ol><h1 id="和平问答"><a href="#和平问答" class="headerlink" title="和平问答"></a>和平问答</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">问：为什么体积占用如此之大？<br>答：本工具采用UD分区和EFI分区独立的方式，如果一个分区挂了，还有另外一种启动方式可以用，这对于一些紧急情况是非常有用的。<br><br>问：可不可以换壁纸？<br>答：可以，自己解包Wim文件自己改，没那个本事就不要想。<br><br>问：可不可以加入XX功能？<br>答：不可以，最后一个版本，绝不更新，就算更新也是自己用，绝不上传。<br><br>问：能不能换个快点的网盘？<br>答：大文件分享除了百度网盘还有其他选择吗？要是你给我付高速服务器费用可以另当别论。<br><br>问：为什么你的眼睛里充满了幽怨？<br>答：没钱没钱没钱啊<br><br></code></pre></td></tr></table></figure><h1 id="那些神奇的链接"><a href="#那些神奇的链接" class="headerlink" title="那些神奇的链接"></a>那些神奇的链接</h1><p>赞助名单：<a href="/PEDonation">/PEDonation</a><br>历史版本：<a href="/history/PE-2019-08-08">2019-08-08</a>  <a href="/history/PE-2018-09-04">2018-09-04</a><br>原帖地址：<a href="http://blog.csdn.net/tw359303267/article/details/74075075">http://blog.csdn.net/tw359303267/article/details/74075075</a><br>Github：<a href="https://359303267.github.io/PE">https://359303267.github.io/PE</a><br>以前的版本在无忧论坛：<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=378683&extra=">http://bbs.wuyou.net/forum.php?mod=viewthread&amp;tid=378683&amp;extra=</a>  </p><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><p>就算你打钱了，也不会再更新，所以别打了。</p>]]></content>
      
      
      <categories>
          
          <category> WinPE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WinPE </tag>
            
            <tag> U盘启动 </tag>
            
            <tag> 工具集 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.02.05博客更新说明</title>
      <link href="/blog-update-info01/"/>
      <url>/blog-update-info01/</url>
      
        <content type="html"><![CDATA[<ol><li>原Coding Page已经失效，且无法删除，所以重新更换了域名并关闭了https访问（开启https会大幅度降低网站的访问速度）。</li><li>更新了ARIA主题，对原来一些失效的链接进行重定向。</li><li>更换了评论系统，由于Github业务调整，所以原来的Gitment评论系统换成Valine，所以原有的评论不会显示在页面上。请大家在评论的时候主动提交昵称和邮箱，这样才会接到回复提醒，也可以使用Github账号在原来的<a href="https://github.com/359303267/Gitment/issues">https://github.com/359303267/Gitment/issues</a>链接上进行评论。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次kindle Paperwhite3 拆机降级</title>
      <link href="/kindle-02/"/>
      <url>/kindle-02/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次kindle-Paperwhite3-拆机降级"><a href="#记一次kindle-Paperwhite3-拆机降级" class="headerlink" title="记一次kindle Paperwhite3 拆机降级"></a>记一次kindle Paperwhite3 拆机降级</h1><h1 id="降级步骤"><a href="#降级步骤" class="headerlink" title="降级步骤"></a>降级步骤</h1><p><strong>拆机降级理论上支持任何版本，也可以救砖。</strong>  </p><p>原理就是进入<code>fastboot</code>模式，使用fastboot刷写内核和文件系统。懂的就不用往下看了，不懂得继续please.  </p><ol><li><p>先拆机，使用<code>usb转串口模块</code>连接kpw3，我用的3.3v电平的模块，kindle是1.8v电平的，所以最好别使用5v TTL电平。  </p></li><li><p>打开<code>putty</code>软件，打开对应的串口号，波特率是115200。  </p></li><li><p>重启kindle，putty此时会输出一大堆debug信息，不要管，重启之后立即狂按enter键（一定是记得是重启之后立马狂按，否则就会错过进入uboot的机会）。  </p></li><li><p>几秒之后会出现<code>uboot</code>命令行，这时候输入命令进入bist：  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">bist<br></code></pre></td></tr></table></figure><ol start="5"><li>接着再输入命令进入fastboot模式：  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">fastboot<br></code></pre></td></tr></table></figure><ol start="6"><li><p>使用<code>zadig</code>安装驱动，驱动类型选择<code>libusb</code>  </p></li><li><p>使用kindletool.exe对固件进行解包，想刷哪个版本的就解对应的包，解包命令： </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">kindletool extract [固件.bin] [输出文件夹]<br></code></pre></td></tr></table></figure><p><strong>解包输出的uImage文件就是内核，可以直接刷入，rootfs.img.gz是文件系统，需要使用7-zip或者winrar对rootfs.img.gz再次解压出rootfs.img才可以刷入。</strong>  </p><ol start="8"><li><p>在cmd里打开fastboot工具，这时候就和手机刷机是一样的了，可以只刷内核不刷系统，也可以只刷系统不换内核。  </p></li><li><p>先刷内核：  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">fastboot flash kernel [uImage文件路径]<br></code></pre></td></tr></table></figure><ol start="10"><li>再刷系统：  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">fastboot flash system [rootfs.img文件路径]<br></code></pre></td></tr></table></figure><ol start="11"><li>然后输入：  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">fastboot reboot<br></code></pre></td></tr></table></figure><p><strong>重启kindle，就可以发现系统已经降回来了，最好再重置一下系统，防止文件不匹配导致其他问题。下面该越狱越狱，该折腾折腾。</strong>  </p><ol start="12"><li>过程结束，Over~  </li><li>为什么没有图？？因为我懒得截，就酱~~  </li></ol><h2 id="工具下载："><a href="#工具下载：" class="headerlink" title="工具下载："></a>工具下载：</h2><p>kindle 版fastboot.exe:<a href="/files/kindle-02/fastboot_win_public_Kindle.rar">/files/kindle-02/fastboot_win_public_Kindle.rar</a><br>zadig驱动安装工具:<a href="/files/kindle-02/Zadig.zip">/files/kindle-02/Zadig.zip</a><br>kindletool固件解包工具：<a href="/files/kindle-02/kindletool-v1.6.5-mingw.zip">/files/kindle-02/kindletool-v1.6.5-mingw.zip</a><br>putty中文版：<a href="/files/kindle-02/Putty.zip">/files/kindle-02/Putty.zip</a>  </p><h2 id="资料参考："><a href="#资料参考：" class="headerlink" title="资料参考："></a>资料参考：</h2><p><a href="https://www.nmza.net/archives/kindle-downgrade-silu.html">[1.]Kindle TTL 强刷降级 救砖 思路讲解</a><br><a href="http://learn.diynova.com/2015/11/fix-kindle-booting-problem/">[2.]Kindle阅读器“卡大树“的修复过程</a><br><a href="http://blog.sina.cn/dpool/blog/s/blog_53d874320102vx6d.html">[3.]Kindle Paperwhite3 拆机越狱安装Koreader的攻略</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的Kindle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> 经验 </tag>
            
            <tag> Kindle </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种BP机的解密方法</title>
      <link href="/BP-Password/"/>
      <url>/BP-Password/</url>
      
        <content type="html"><![CDATA[<p>摩托罗拉大顾问型号解密：</p><p>一、首先你需要一个BP机写码设备（USB转TTL串口小板也可以，要保证写入数据时接触良好）。<br>二、你需要一个配套的解密软件，可以从<a href="https://market.m.taobao.com/app/idleFish-F2e/widle-taobao-rax/page-detail?wh_weex=true&wx_navbar_transparent=true&id=598356115148&ut_sk=1.XQe6E2%252FASVwDAPP0NEMf5WRD_21407387_1566724004188.Copy.detail.598356115148.1944924120&forceFlush=1">闲鱼平台</a>向我购买。这个软件是我自己编写的，为了防止他人盗用，加入了一个简单的激活码认证。购买时留言从博客上看到的只需要十块钱就可以得到这个软件，比什么60块钱的解密小板靠谱多了，经过了很多大顾问的测试。</p><p>其原理是向CPU写入一段特殊的数据，使其将EEPROM中的加密使能位清除。</p><p><img src="/images/BP-Password/%E9%A1%BE%E9%97%AE%E5%9E%8B%E5%AF%BB%E5%91%BC%E6%9C%BA%E8%A7%A3%E5%AF%86%E5%B8%AE%E5%8A%A9.jpg" alt="顾问型寻呼机解密帮助">    </p><p>其他资料来源中国知网学问： </p><p><img src="/images/BP-Password/%E5%87%A0%E7%A7%8D%E6%91%A9%E6%89%98%E7%BD%97%E6%8B%89%E5%AF%BB%E5%91%BC%E6%9C%BA%E7%9A%84%E9%99%A4%E5%AF%86%E8%A7%A3%E9%94%8101.jpg" alt="几种摩托罗拉寻呼机的除密解锁01">  </p><p><img src="/images/BP-Password/%E5%87%A0%E7%A7%8D%E6%91%A9%E6%89%98%E7%BD%97%E6%8B%89%E5%AF%BB%E5%91%BC%E6%9C%BA%E7%9A%84%E9%99%A4%E5%AF%86%E8%A7%A3%E9%94%8102.jpg" alt="几种摩托罗拉寻呼机的除密解锁02">  </p><p><img src="/images/BP-Password/%E5%87%A0%E7%A7%8D%E6%91%A9%E6%89%98%E7%BD%97%E6%8B%89%E5%AF%BB%E5%91%BC%E6%9C%BA%E7%9A%84%E9%99%A4%E5%AF%86%E8%A7%A3%E9%94%8103.jpg" alt="几种摩托罗拉寻呼机的除密解锁02">  </p>]]></content>
      
      
      <categories>
          
          <category> BP机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> BP机 </tag>
            
            <tag> 大顾问 </tag>
            
            <tag> 单片机 </tag>
            
            <tag> 摩托罗拉 </tag>
            
            <tag> 寻呼机解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源！使用单片机发送POCSAG编码呼响BP机</title>
      <link href="/POCSAG/"/>
      <url>/POCSAG/</url>
      
        <content type="html"><![CDATA[<p><strong>禁止转载</strong></p><p>​    <strong>需要注意的是，现在BP机工作频段已经被国家收回，所以自己使用手台、车台等大功率无线发射器在这个频段发射无线电波是违法的，所以需要进行发射信号的衰减，无线发射功率控制在0.1W之内是没有问题的。</strong></p><p>​    单片机使用STC公司的IAP15W4K58S4，时钟频率为27MHz，使用串口1来发送数据，串口波特率为115200。支持1200和512比特速率的POCSAG编码，支持正负相位，可以发送数字信息和汉字信息（不支持混输）</p><p>​    对讲机我用的是宝峰UV-5R。单片机的P36接对讲机的压控振荡器输入端，P35接对讲机的PTT控制端，还要和对讲机共地（至于这三个接线端具体接在哪一个位置，网上一搜就有了）。对讲机的发射频率需要调到BP机的工作频率一样。 </p><p>​    BP机我用摩托罗拉精英王和大顾问实验成功，如果不响可以试试切换一下相位。如果显示乱码就换一个响声/功能位。<br>​<br>​    如果就是不响，要知道哪有这么容易响？地址码、BP机工作频率、对讲机频率调到和BP机工作频率一致、对讲机不能有频偏。如果就是不响，要考虑BP机是否被改过频率，很多BP机在使用的时候都是改过频率的，或者就是对讲机有频偏，可以使用SDR（软件无线电）测试对讲机的频率。</p><p>​    关于如何准确获得BP机的工作频率和地址码，跳转这里：</p><p><a href="/Get-BP-Code">如何获得BP机的地址码和工作频率？</a></p><p>​    开源！单片机源码和上位机源码都开源！讨厌那种一个单片机加个Si4463模块就卖你几百块的商家，虽然我知道写程序画板子也不容易，但是价格是成本的十倍着实太坑。</p><p>​    单片机源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stc15.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrins.h&gt;  </span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TX                   P36    <span class="hljs-comment">//数据输出端</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PTT                  P35    <span class="hljs-comment">//PTT控制端</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGH                 1      <span class="hljs-comment">//高电平</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOW                  0      <span class="hljs-comment">//低电平</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NILL_DATA            0x7A89C197  <span class="hljs-comment">//闲置码</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYNC_DATA            0x7CD215D8  <span class="hljs-comment">//同步码</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DATA_START           12     <span class="hljs-comment">//串口中数据开始位置</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TEXT_OR_NUM          11     <span class="hljs-comment">//串口中文字或数字标志位置</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SPEED                10     <span class="hljs-comment">//串口中速率标志位置</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UARTBUFF_SIZE        400    <span class="hljs-comment">//串口接收缓冲区</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TXBUFF_SIZE          200    <span class="hljs-comment">//TX发送缓冲区</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOWSPEED_TIMER_L     0xE7   <span class="hljs-comment">//512bit/s时定时器初值，需要微调</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LOWSPEED_TIMER_H     0x31</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGHTSPEED_TIMER_L   0x1A   <span class="hljs-comment">//1200bit/s时定时器初值，需要微调</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HIGHTSPEED_TIMER_H   0xA8</span><br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> TxBuff[TXBUFF_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//TX发送缓冲区</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> Tx_Num;<span class="hljs-comment">//地址码发射次序</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> beep;<span class="hljs-comment">//功能位，1，2，3，4</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> UartBuff[UARTBUFF_SIZE] = <span class="hljs-string">&quot;#P12345674HT0001$&quot;</span>;<span class="hljs-comment">//串口缓冲区</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> UartCount = <span class="hljs-number">13</span>;<span class="hljs-comment">//串口接收计数</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> UartTmp;<br>bit TM0_FLAG=<span class="hljs-number">0</span>;<span class="hljs-comment">//定时器0标志</span><br>bit NewData = <span class="hljs-number">0</span>;<span class="hljs-comment">//串口是否有新数据收到标志</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UartInit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<span class="hljs-comment">//函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delay200ms</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">calc_bch_and_parity</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cw_e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">calc_addr</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> add,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> fun)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Timer0Init</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WaitTF0</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Send_Num</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> s)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetAddrNumber</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc_NumberData</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendTxBuff</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Empty_Buff</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc_TextData</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UartInit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>        <span class="hljs-comment">//115200bps@27.000MHz</span></span><br><span class="hljs-function"></span>&#123;<br>    SCON = <span class="hljs-number">0x50</span>;        <span class="hljs-comment">//8位数据,可变波特率</span><br>    AUXR |= <span class="hljs-number">0x40</span>;        <span class="hljs-comment">//定时器1时钟为Fosc,即1T</span><br>    AUXR &amp;= <span class="hljs-number">0xFE</span>;        <span class="hljs-comment">//串口1选择定时器1为波特率发生器</span><br>    TMOD &amp;= <span class="hljs-number">0x0F</span>;        <span class="hljs-comment">//设定定时器1为16位自动重装方式</span><br>    TL1 = <span class="hljs-number">0xC5</span>;        <span class="hljs-comment">//设定定时初值</span><br>    TH1 = <span class="hljs-number">0xFF</span>;        <span class="hljs-comment">//设定定时初值</span><br>    ET1 = <span class="hljs-number">0</span>;        <span class="hljs-comment">//禁止定时器1中断</span><br>    TR1 = <span class="hljs-number">1</span>;        <span class="hljs-comment">//启动定时器1</span><br>    ES = <span class="hljs-number">1</span>;    <span class="hljs-comment">//开启接收中断</span><br>    EA = <span class="hljs-number">1</span>;    <span class="hljs-comment">//开总中断</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Timer0Init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    AUXR |= <span class="hljs-number">0x80</span>;        <span class="hljs-comment">//定时器时钟1T模式</span><br>    TMOD &amp;= <span class="hljs-number">0xF0</span>;        <span class="hljs-comment">//设置定时器模式</span><br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;L&#x27;</span>)<span class="hljs-comment">//为L表示512bit/s速率，下同</span><br>    &#123;<br>        TL0 = LOWSPEED_TIMER_L;          <span class="hljs-comment">//设置定时初值</span><br>        TH0 = LOWSPEED_TIMER_H;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;H&#x27;</span>)<br>    &#123;<br>        TL0 = HIGHTSPEED_TIMER_L;        <span class="hljs-comment">//设置定时初值</span><br>        TH0 = HIGHTSPEED_TIMER_H;<br>    &#125;<br>    ET0=<span class="hljs-number">1</span>; <span class="hljs-comment">//定时器0充许中断</span><br>    TR0=<span class="hljs-number">0</span>;    <br>    EA=<span class="hljs-number">1</span>;  <span class="hljs-comment">//开总中断</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UartSendString</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* ch, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> n)</span>  <span class="hljs-comment">//串口发送字符串函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        SBUF = *ch++;<br>        <span class="hljs-keyword">while</span>(TI == <span class="hljs-number">0</span>);<br>        TI = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delay200ms</span><span class="hljs-params">()</span>        <span class="hljs-comment">//@27.000MHz</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> i, j, k;<br><br>    _nop_();<br>    _nop_();<br>    i = <span class="hljs-number">21</span>;<br>    j = <span class="hljs-number">133</span>;<br>    k = <span class="hljs-number">210</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (--k);<br>        &#125; <span class="hljs-keyword">while</span> (--j);<br>    &#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">calc_bch_and_parity</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cw_e)</span> <span class="hljs-comment">//BCH校验和奇偶校验函数</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> i;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>  parity = <span class="hljs-number">0</span>; <span class="hljs-comment">//奇偶校验计数    </span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> local_cw; <span class="hljs-comment">//临时存放数      </span><br>    local_cw=cw_e;<span class="hljs-comment">//保存cw_e参数值</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">21</span>; i++,cw_e&lt;&lt;=<span class="hljs-number">1</span>)       <br>        <span class="hljs-keyword">if</span> (cw_e &amp; <span class="hljs-number">0x80000000</span>) cw_e ^= <span class="hljs-number">0xED200000</span>;  <br>    cw_e=cw_e&amp;<span class="hljs-number">0xFFC00000</span>;<span class="hljs-comment">//保留前10位，BCH校验值共11位，只保留前10位有效数据      </span><br>    local_cw |= (cw_e &gt;&gt; <span class="hljs-number">21</span>); <span class="hljs-comment">//BCH校验数移至第22位到31位，BCH共10位，并和原始数据相加</span><br>    cw_e=local_cw;     <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">31</span>; i++, cw_e&lt;&lt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span>(cw_e&amp;<span class="hljs-number">0x80000000</span>) parity++;        <br>    <span class="hljs-keyword">if</span>(parity%<span class="hljs-number">2</span>) local_cw+=<span class="hljs-number">1</span>;<span class="hljs-comment">//从1至31位判断为奇数则后面加1补充为偶数</span><br>    <span class="hljs-keyword">return</span> local_cw;     <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">calc_addr</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> add,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> fun)</span> <span class="hljs-comment">//地址转换，第1参数为地址，第2参数为功能</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> adr;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> tem;    <br>    Tx_Num=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>)(add&amp;<span class="hljs-number">0x00000007</span>);<span class="hljs-comment">//获取地址发射的帧位次，111位第7帧，后3位地址数据隐藏不发送，接收按帧位还原</span><br>    adr=<span class="hljs-number">0x00</span>;<br>    adr=add&amp;<span class="hljs-number">0xFFFFFFF8</span>;    <span class="hljs-comment">//去掉地址码后3位</span><br>    adr=adr&lt;&lt;<span class="hljs-number">10</span>;  <span class="hljs-comment">//地址左移10位</span><br>    tem=<span class="hljs-number">0x00</span>;<br>    tem=fun;  <span class="hljs-comment">//功能位</span><br>    tem=tem&lt;&lt;<span class="hljs-number">11</span>;<span class="hljs-comment">//功能位左移11位，功能位为00 01 10 11四种状态，代表4个地址码</span><br>    adr=adr|tem; <span class="hljs-comment">//地址码和功能位合成地址码；</span><br>    <span class="hljs-keyword">return</span> adr;<br>&#125;<br> <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WaitTF0</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!TM0_FLAG);<span class="hljs-comment">//等待定时器溢出</span><br>    TM0_FLAG=<span class="hljs-number">0</span>;<span class="hljs-comment">//清标志位</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Send_Num</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> s)</span><span class="hljs-comment">//发送数据</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> n; <br>   <span class="hljs-keyword">for</span> (n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">32</span>;n++)<br>    &#123;  <br>      <span class="hljs-keyword">if</span>(s&amp;<span class="hljs-number">0x80000000</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(UartBuff[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;N&#x27;</span>)<span class="hljs-comment">//判断正负相位，下同</span><br>                TX = LOW;<br>            <span class="hljs-keyword">else</span><br>                TX= HIGH;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(UartBuff[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;N&#x27;</span>)<br>                TX = HIGH;<br>            <span class="hljs-keyword">else</span><br>                TX=LOW;<br>        &#125;<br>      WaitTF0();<span class="hljs-comment">//等待延时结束 0.833ms                    </span><br>      s&lt;&lt;=<span class="hljs-number">1</span>;<br>    &#125;   <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Empty_Buff</span><span class="hljs-params">()</span><span class="hljs-comment">//清空缓冲区</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = TEXT_OR_NUM; i &lt; UARTBUFF_SIZE; i++)<br>    &#123;<br>        UartBuff[i] = <span class="hljs-number">0x00000000</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = TEXT_OR_NUM; i &lt; TXBUFF_SIZE; i++)<br>    &#123;<br>        TxBuff[i] = <span class="hljs-number">0x00000000</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetAddrNumber</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> i;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> tem;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> addr_tmp;<br>    <br>    addr_tmp = (UartBuff[<span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">1000000</span>;<span class="hljs-comment">//提取地址码</span><br>    addr_tmp += (UartBuff[<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">100000</span>;<br>    addr_tmp += (UartBuff[<span class="hljs-number">4</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10000</span>;<br>    addr_tmp += (UartBuff[<span class="hljs-number">5</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">1000</span>;<br>    addr_tmp += (UartBuff[<span class="hljs-number">6</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">100</span>;<br>    addr_tmp += (UartBuff[<span class="hljs-number">7</span>] - <span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>;<br>    addr_tmp += (UartBuff[<span class="hljs-number">8</span>] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    beep = UartBuff[<span class="hljs-number">9</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//提取功能位</span><br><br>    tem=calc_addr(addr_tmp,beep);<span class="hljs-comment">//前面是地址码，后面是BB机内00 01 10 11  代表0，1，2，3种不同的声音</span><br>    <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == Tx_Num)<span class="hljs-comment">//地址码放入对应的帧中</span><br>            TxBuff[i*<span class="hljs-number">2</span>] = calc_bch_and_parity(tem);<span class="hljs-comment">//取得BCH校验后的地址码序列 </span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            TxBuff[i*<span class="hljs-number">2</span>] = NILL_DATA;<span class="hljs-comment">//其他帧填充闲置码</span><br>            TxBuff[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = NILL_DATA;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc_NumberData</span><span class="hljs-params">()</span> <span class="hljs-comment">//计算数值数据（数字机）</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Num_Negate[UARTBUFF_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i, j, k, n;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> byte_tmp[<span class="hljs-number">10</span>], byte_tmp_negate[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">float</span> TxCount = <span class="hljs-number">0.0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(i = DATA_START; i &lt; UARTBUFF_SIZE; i++)  <span class="hljs-comment">//表意字符替换</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0A</span>;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0B</span>;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;C&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0C</span>;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;D&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0D</span>;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0E</span>;<br>        <span class="hljs-keyword">if</span>(UartBuff[i] == <span class="hljs-string">&#x27;F&#x27;</span>)<br>            UartBuff[i] = <span class="hljs-number">0x0F</span>;<br>    &#125;<br>    <br>    n = DATA_START;<br>    <span class="hljs-keyword">for</span>(i = DATA_START; i &lt; UARTBUFF_SIZE; i++)      <span class="hljs-comment">//数字的ASIIC码只用到第四位，所以将所有数字的低四位合并，高四位丢弃</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            UartBuff[n] = UartBuff[i] &lt;&lt; <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            UartBuff[n] |= UartBuff[i] &amp; <span class="hljs-number">0x0f</span>;<br>            n++;<br>        &#125;<br>    &#125;<br>    <br>    k = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;                               <span class="hljs-comment">//定位到地址码后数据所在的位置</span><br>    <span class="hljs-keyword">for</span>(i = DATA_START; i &lt; UARTBUFF_SIZE; i += <span class="hljs-number">5</span>)                      <span class="hljs-comment">//按四位取出并放在高四位准备倒序</span><br>    &#123;<br>        byte_tmp[<span class="hljs-number">0</span>] = (UartBuff[i] &amp; <span class="hljs-number">0xf0</span>);<br>        byte_tmp[<span class="hljs-number">1</span>] = (UartBuff[i] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>        byte_tmp[<span class="hljs-number">2</span>] = (UartBuff[i + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xf0</span>);<br>        byte_tmp[<span class="hljs-number">3</span>] = (UartBuff[i + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>        byte_tmp[<span class="hljs-number">4</span>] = (UartBuff[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xf0</span>);<br>        byte_tmp[<span class="hljs-number">5</span>] = (UartBuff[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>        byte_tmp[<span class="hljs-number">6</span>] = (UartBuff[i + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xf0</span>);<br>        byte_tmp[<span class="hljs-number">7</span>] = (UartBuff[i + <span class="hljs-number">3</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>        byte_tmp[<span class="hljs-number">8</span>] = (UartBuff[i + <span class="hljs-number">4</span>] &amp; <span class="hljs-number">0xf0</span>);<br>        byte_tmp[<span class="hljs-number">9</span>] = (UartBuff[i + <span class="hljs-number">4</span>] &amp; <span class="hljs-number">0x0f</span>) &lt;&lt; <span class="hljs-number">4</span>;<br>        <br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)                           <span class="hljs-comment">//倒序</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">8</span>; n++)<br>            &#123;<br>                byte_tmp_negate[j] &lt;&lt;= <span class="hljs-number">1</span>;<br>                byte_tmp_negate[j] |= (byte_tmp[j] &gt;&gt; n) &amp; <span class="hljs-number">0x01</span>;<br>            &#125;<br>        &#125;<br>        <br>        Num_Negate[k] = <span class="hljs-number">0x80000000</span>;                                        <span class="hljs-comment">//重新组合</span><br>        Num_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">27</span>;<br>        Num_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">23</span>;<br>        Num_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">19</span>;<br>        Num_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">15</span>;<br>        Num_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">11</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] = <span class="hljs-number">0x80000000</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">27</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">23</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">19</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">8</span>] &lt;&lt; <span class="hljs-number">15</span>;<br>        Num_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)byte_tmp_negate[<span class="hljs-number">9</span>] &lt;&lt; <span class="hljs-number">11</span>;<br>        k = k + <span class="hljs-number">2</span>;<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">//UartCount = 25;</span><br>    n = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;                                                   <span class="hljs-comment">//将数据合并到Tx发送缓冲区并计算校验码</span><br>    TxCount = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(i = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i &lt; UARTBUFF_SIZE; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(TxCount &gt;= (UartCount - DATA_START - <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)                                                     <span class="hljs-comment">//每8帧（16个码字）插入一个同步码</span><br>            TxBuff[n++] = SYNC_DATA;<br>        TxBuff[n++] = calc_bch_and_parity( Num_Negate[i]);<br>        TxCount += <span class="hljs-number">5</span>;                                                     <span class="hljs-comment">//串口接收5个数字相当于POCSAG码中一个码字</span><br>        <span class="hljs-keyword">if</span>(n &gt;= TXBUFF_SIZE || i &gt;= UARTBUFF_SIZE)                        <span class="hljs-comment">//超出缓冲区退出</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc_TextData</span><span class="hljs-params">()</span>  <span class="hljs-comment">//计算汉字数据</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Text_Negate[UARTBUFF_SIZE] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n, i, k, byte_tmp;<br>    <span class="hljs-keyword">float</span> TxCount = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(k = DATA_START; k &lt; UARTBUFF_SIZE; k++)         <span class="hljs-comment">//字节按位倒序</span><br>    &#123;<br>        byte_tmp = UartBuff[k];<br>        UartBuff[k] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">8</span>; n++)   <span class="hljs-comment">//倒序</span><br>        &#123;<br>            UartBuff[k] &lt;&lt;= <span class="hljs-number">1</span>;<br>            UartBuff[k] |= (byte_tmp &gt;&gt; n) &amp; <span class="hljs-number">0x01</span>;<br>        &#125;<br>        UartBuff[k] &amp;= <span class="hljs-number">0xFE</span>;    <span class="hljs-comment">//倒序后丢弃最低位</span><br>    &#125;<br><br>    k = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(n = DATA_START; n &lt; UARTBUFF_SIZE; n += <span class="hljs-number">20</span>)                 <span class="hljs-comment">//移位，20个字节一循环</span><br>    &#123;<br>        Text_Negate[k] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n] &lt;&lt; <span class="hljs-number">23</span>;<br>        Text_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>;<br>        Text_Negate[k] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">9</span>;<br>        Text_Negate[k] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">1</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">29</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xC0000000</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">22</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">15</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">8</span>;<br>        Text_Negate[k + <span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">2</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">28</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] &amp;= <span class="hljs-number">0xE0000000</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">21</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">14</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">8</span>] &lt;&lt; <span class="hljs-number">7</span>;<br>        Text_Negate[k + <span class="hljs-number">2</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">3</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">8</span>] &lt;&lt; <span class="hljs-number">27</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] &amp;= <span class="hljs-number">0xF0000000</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">9</span>] &lt;&lt; <span class="hljs-number">20</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">10</span>] &lt;&lt; <span class="hljs-number">13</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">11</span>] &lt;&lt; <span class="hljs-number">6</span>;<br>        Text_Negate[k + <span class="hljs-number">3</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">4</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">11</span>] &lt;&lt; <span class="hljs-number">26</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] &amp;= <span class="hljs-number">0xF8000000</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">12</span>] &lt;&lt; <span class="hljs-number">19</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">13</span>] &lt;&lt; <span class="hljs-number">12</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">14</span>] &lt;&lt; <span class="hljs-number">5</span>;<br>        Text_Negate[k + <span class="hljs-number">4</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">5</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">14</span>] &lt;&lt; <span class="hljs-number">25</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] &amp;= <span class="hljs-number">0xFC000000</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">15</span>] &lt;&lt; <span class="hljs-number">18</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">16</span>] &lt;&lt; <span class="hljs-number">11</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">17</span>] &lt;&lt; <span class="hljs-number">4</span>;<br>        Text_Negate[k + <span class="hljs-number">5</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        Text_Negate[k + <span class="hljs-number">6</span>] = <span class="hljs-number">0x80000000</span>;<br>        Text_Negate[k + <span class="hljs-number">6</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">17</span>] &lt;&lt; <span class="hljs-number">24</span>;<br>        Text_Negate[k + <span class="hljs-number">6</span>] &amp;= <span class="hljs-number">0xFE000000</span>;<br>        Text_Negate[k + <span class="hljs-number">6</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">18</span>] &lt;&lt; <span class="hljs-number">17</span>;<br>        Text_Negate[k + <span class="hljs-number">6</span>] |= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)UartBuff[n + <span class="hljs-number">19</span>] &lt;&lt; <span class="hljs-number">10</span>;<br>        Text_Negate[k + <span class="hljs-number">6</span>] &amp;= <span class="hljs-number">0xfffff800</span>;<br>        <br>        k += <span class="hljs-number">7</span>;<br>    &#125;<br>    <br>    n = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    TxCount = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(i = Tx_Num * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i &lt; UARTBUFF_SIZE; i++)                       <span class="hljs-comment">//将数据合并到Tx发送缓冲区并计算校验码</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(TxCount &gt;= (UartCount - DATA_START - <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)                                                     <span class="hljs-comment">//每8帧（16个码字）插入一个同步码</span><br>            TxBuff[n++] = SYNC_DATA;<br>        TxBuff[n++] = calc_bch_and_parity( Text_Negate[i]);<br>        TxCount += <span class="hljs-number">2.8571428571</span>;                                            <span class="hljs-comment">//串口接收2.8571428571个字节相当于POCSAG码中一个码字</span><br>        <span class="hljs-keyword">if</span>(n &gt;= TXBUFF_SIZE || i &gt;= UARTBUFF_SIZE)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendTxBuff</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i;<br>    <br>    PTT = <span class="hljs-number">0</span>;                    <span class="hljs-comment">//触发PTT</span><br>    Delay200ms();                  <span class="hljs-comment">//PTT延时，根据对讲机不同进行调整</span><br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;L&#x27;</span>)<br>    &#123;<br>        TL0 = LOWSPEED_TIMER_L;        <span class="hljs-comment">//设置定时初值</span><br>        TH0 = LOWSPEED_TIMER_H;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;H&#x27;</span>)<br>    &#123;<br>        TL0 = HIGHTSPEED_TIMER_L;        <span class="hljs-comment">//设置定时初值</span><br>        TH0 = HIGHTSPEED_TIMER_H;<br>    &#125;<br>    TR0 = <span class="hljs-number">1</span>; <span class="hljs-comment">//启动定时器</span><br>    <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)<span class="hljs-comment">//至少发送576个前导码，只能多，不能少</span><br>    &#123;<br>        Send_Num(<span class="hljs-number">0xAAAAAAAA</span>);<br>    &#125;<br>    <br>    Send_Num(SYNC_DATA);<span class="hljs-comment">//发送同步码</span><br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TXBUFF_SIZE; i++)<span class="hljs-comment">//将TX发送缓冲区中的数据发出</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(TxBuff[i] == <span class="hljs-number">0x00000000</span> || TxBuff[i] == <span class="hljs-number">0xffffffff</span>)<span class="hljs-comment">//如果缓冲区中数据为全0或全1则表示发送完毕</span><br>            <span class="hljs-keyword">break</span>;<br>        Send_Num(TxBuff[i]);<br>    &#125;<br>    <br>    TX=LOW; <br>    TR0 = <span class="hljs-number">0</span>;<br>    Delay200ms();                       <span class="hljs-comment">//发送完毕PTT延时，根据对讲机不同进行调整</span><br>    Delay200ms();<br>    Delay200ms();<br>    PTT = <span class="hljs-number">1</span>;<br><br>    UartSendString(<span class="hljs-string">&quot;OK\r\n&quot;</span>,<span class="hljs-number">4</span>);          <span class="hljs-comment">//串口输出调试信息</span><br>    UartSendString(<span class="hljs-string">&quot;UartCount=&quot;</span>,<span class="hljs-number">10</span>);<br>    SBUF = UartCount / <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(TI == <span class="hljs-number">0</span>);<br>    TI = <span class="hljs-number">0</span>;<br>    SBUF = (UartCount / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(TI == <span class="hljs-number">0</span>);<br>    TI = <span class="hljs-number">0</span>;<br>    SBUF = UartCount % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(TI == <span class="hljs-number">0</span>);<br>    TI = <span class="hljs-number">0</span>;<br>    UartSendString(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    UartInit();<span class="hljs-comment">//串口初始化</span><br>    Timer0Init();<span class="hljs-comment">//定时器0初始化</span><br><br>    TX = <span class="hljs-number">0</span>;     <span class="hljs-comment">//初始化IO引脚</span><br>    PTT= <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">//NewData = 1;</span><br>        <span class="hljs-keyword">if</span>(NewData == <span class="hljs-number">1</span> &amp;&amp; (UartBuff[TEXT_OR_NUM] == <span class="hljs-string">&#x27;N&#x27;</span> || UartBuff[TEXT_OR_NUM] == <span class="hljs-string">&#x27;T&#x27;</span>))<br>        &#123;<br>            GetAddrNumber();<span class="hljs-comment">//获取地址码及功能位</span><br>            <span class="hljs-keyword">if</span>(UartBuff[TEXT_OR_NUM] == <span class="hljs-string">&#x27;N&#x27;</span>)<br>                calc_NumberData();<span class="hljs-comment">//计算数字数据</span><br>            <span class="hljs-keyword">if</span>(UartBuff[TEXT_OR_NUM] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>                calc_TextData();<span class="hljs-comment">//计算文字数据</span><br>            SendTxBuff();<span class="hljs-comment">//发送数据</span><br>            Empty_Buff();<span class="hljs-comment">//清空TX发送缓冲区和串口接收缓冲区</span><br>            NewData = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UART_RxData</span><span class="hljs-params">()</span> interrupt 4   <span class="hljs-comment">//串口接收中断函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(RI == <span class="hljs-number">1</span>)<br>    &#123;<br>        RI = <span class="hljs-number">0</span>;<br>        UartTmp = SBUF;<br>        <span class="hljs-keyword">if</span>(UartTmp == <span class="hljs-string">&#x27;#&#x27;</span>)              <span class="hljs-comment">//串口开头</span><br>            UartCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(UartTmp == <span class="hljs-string">&#x27;$&#x27;</span>)              <span class="hljs-comment">//串口结尾</span><br>        &#123;<br>            UartTmp = <span class="hljs-number">0x00</span>;<br>            NewData = <span class="hljs-number">1</span>;<br>        &#125;<br>        UartBuff[UartCount] = UartTmp;<br>        UartCount++;                     <span class="hljs-comment">//串口计数</span><br>        <span class="hljs-keyword">if</span>(UartCount &gt;= UARTBUFF_SIZE)   <span class="hljs-comment">//超出缓冲区归零</span><br>            UartCount = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IntTimer0</span><span class="hljs-params">()</span> interrupt 1 <span class="hljs-comment">//定时器0中断函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;L&#x27;</span>)<br>    &#123;<br>        TL0 = LOWSPEED_TIMER_L;           <span class="hljs-comment">//设置定时初值</span><br>        TH0 = LOWSPEED_TIMER_H;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(UartBuff[SPEED] == <span class="hljs-string">&#x27;H&#x27;</span>)<br>    &#123;<br>        TL0 = HIGHTSPEED_TIMER_L;        <span class="hljs-comment">//设置定时初值</span><br>        TH0 = HIGHTSPEED_TIMER_H;<br>    &#125;<br>    TM0_FLAG=<span class="hljs-number">1</span>; <br>&#125; <br>        <br></code></pre></td></tr></table></figure><p>上位机源码（易语言）：<br><a href="/files/Get-BP-Code/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E6%BA%90%E7%A0%81.e">上位机源码</a></p><p>上位机可执行二进制文件：<br><a href="/files/Get-BP-Code/%E4%B8%8A%E4%BD%8D%E6%9C%BA.exe.zip">上位机可执行二进制文件</a></p><p>上位机截图：<br><img src="/images/POCSAG/01.png" alt="01"></p><p>如果你用的单片机型号和我的一样，并且对讲机没有频差的话，应该是直接可以使用的。  </p><p>搞定了POCSAG编码的问题，剩下的加入GSM模块，蓝牙模块，接入公网什么的就容易多了。  </p><p>PS？我是不是应该在github建一个仓库？我没用过啊~  </p><h1 id="还有，希望某些人不要太过自信"><a href="#还有，希望某些人不要太过自信" class="headerlink" title="还有，希望某些人不要太过自信"></a>还有，希望某些人不要太过自信</h1><p><img src="/images/POCSAG/02.jpg" alt="02">  </p><p><img src="/images/POCSAG/03.jpg" alt="03">    </p><p><img src="/images/POCSAG/04.jpg" alt="04">    </p>]]></content>
      
      
      <categories>
          
          <category> BP机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> BP机 </tag>
            
            <tag> 单片机 </tag>
            
            <tag> POCSAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获得BP机的地址码和工作频率？</title>
      <link href="/Get-BP-Code/"/>
      <url>/Get-BP-Code/</url>
      
        <content type="html"><![CDATA[<p><strong>禁止转载</strong></p><h1 id="前言少叙"><a href="#前言少叙" class="headerlink" title="前言少叙"></a>前言少叙</h1><p>现在玩BP机的应该都是为了那点情怀吧？奈何我家穷，当年买不起BP机，所以直到最近才在网络上购买了几个二手BP机。</p><p>现在是2019年。在2006年，中国最后一家寻呼运营商停止了寻呼服务，BP机寻呼台的信号也随之消失，老百姓手中的BP机也随之成了收藏品。</p><p>现在电商平台上有个人制作的小型寻呼台在卖，但是都太贵（坑）了，也许很多人只是想简单的让自己的呼机响起来，并不需要GSM、蓝牙、Wifi各种花里胡哨的功能，因此，本文出于情怀和让人人呼响BP机的目的，介绍如何呼响手中的BP机。</p><p>寻呼服务到底是怎样的呢？呼号、地址码、工作频率都是什么？</p><p>根据我的了解和猜测，当年买了寻呼机之后是不能直接使用的，需要到当地运营商哪里对BP机进行写码（这里是地址码）和改频（BP机的工作频率），改好之后可能会对BP机进行加密，加密之后的BP机如果没有解密，是不能再次进行写码操作的（读取也不可以）。完了之后呢，运营商会给这个BP机分配一个呼号（相当于现在的手机号码），一个呼号对应一个地址码和工作频率。然后BP机就可以装上电池拿回家使用了。</p><p>当有人拨通你的呼号时，运营商会将此呼号对应的地址码和工作频率找出，然后将地址码和需要发送的信息一起进行<code>POCSAG</code>编码，最后通过寻呼台的无线电发送设备（调制模式为NFM，无线电的频率要和BP机的工作频率一致）将数据发送出去。BP机接收到寻呼台发送过来的信号，就会响起来和显示信息了。</p><p>现在寻呼运营商早就没有了，因此通过呼号来呼响BP机肯定是行不通的，只能通过地址码和工作频率来呼响你的BP机。</p><p>根据我这几个月的摸索和网上找到的资料，做了一套POCSAG编码系统，配合手台（手持对讲机，需要UV双频段的才可以）可以将你手中的BP机重新响起来。这个系统我只用摩托罗拉的大顾问和精英王两个型号测试过，其他型号我手头没有，所以没办法测试。理论支持所有摩托罗拉POCSAG编码的BP机（FLEX高速机，比如智囊股票机就不支持）。</p><h1 id="怎么获得BP机的工作频率？"><a href="#怎么获得BP机的工作频率？" class="headerlink" title="怎么获得BP机的工作频率？"></a>怎么获得BP机的工作频率？</h1><p>了解了BP机工作频率和地址码的重要性，下面说说怎样获得工作频率？</p><p><strong>需要注意的是，现在BP机工作频段已经被国家收回，所以自己使用手台、车台等大功率无线发射器在这个频段发射无线电波是违法的，所以需要进行发射信号的衰减，无线发射功率控制在0.1W之内是没有问题的。</strong></p><p>有两个方法可以得到工作频率：</p><h2 id="一、使用专用BP机追频设备进行追频"><a href="#一、使用专用BP机追频设备进行追频" class="headerlink" title="一、使用专用BP机追频设备进行追频"></a>一、使用专用BP机追频设备进行追频</h2><p>市面上可以买到BP 机追频设备，这样的设备可以从BP机最低的工作频率开始，逐次增加频点并且发送一段信息给BP机直至BP机的最高工作频率，如果BP工作在其间某个频点上，就会响起来。</p><p>这个方法的优点是：1、不需要拆机</p><p>缺点：1、速度非常慢，如果提前知道BP机的地址码会快很多，如果连地址码都不晓得，要追到何年何月哦~</p><h2 id="二、拆机，根据晶振计算工作频率"><a href="#二、拆机，根据晶振计算工作频率" class="headerlink" title="二、拆机，根据晶振计算工作频率"></a>二、拆机，根据晶振计算工作频率</h2><p>如何拆机就不说了，大顾问型号应该是最好拆的了，都不需要用螺丝刀，直接用手就可以拆开。</p><p>拆开之后将频率板取出（一般BP机内部会有两个电路板，比较小的有天线的那个电路板是频率板）</p><p>一般频率板上会有1~3个晶体振荡器，把它们的频率分别记下来。这里先以大顾问为例：</p><p><img src="/images/Get-BP-Code/01.png" alt="image-20190823062444669"></p><p>三个晶振频率分别为9705KHz、17.9MHz、44975KHz。</p><p>计算工作频率只需要用到后面两个晶振频率（准确的来说应该是17.9MHz加上一个40MHz~60MHz的频率），前面那个比较低的频率用不到。</p><p>计算结果为<br>$$<br>工作频率=44975KHz*3 + 17.9MHz = 152.825MHz<br>$$<br>还有可能BP机里面只有一个或者两个晶体振荡器，没有17.9MHz的晶体振荡器，那么就不需要将17.9MHz的频率加上去，以精英王型号为例：</p><p><img src="/images/Get-BP-Code/02.png" alt="image-20190823062748259"></p><p>晶振频率为50900KHz。</p><p>那么计算结果为：<br>$$<br>工作频率=50900KHz*3=152.700MHz<br>$$<br>其他BP机关于频率的计算也是如此。</p><p>这个方法的优点是：1、速度快，几分钟就搞定  2、顺便还能清清灰</p><p>缺点：1、需要一定的动手能力，不能手贱，不能相信大力出奇迹</p><h1 id="如何获得地址码？"><a href="#如何获得地址码？" class="headerlink" title="如何获得地址码？"></a>如何获得地址码？</h1><h2 id="一、使用追码设备追出地址码"><a href="#一、使用追码设备追出地址码" class="headerlink" title="一、使用追码设备追出地址码"></a>一、使用追码设备追出地址码</h2><p>和追频一样，目前市面上可以购买到BP机专用追码设备，通常追频和追码是集成在一起的。追码设备可以从起始地址逐次增加并发送信号给BP机，如果发送的信号地址码和手中的BP机地址码相同，BP机就响起来了。</p><p>这个方法的优点：1、简单无脑</p><p>缺点：1、速度慢，如果知道工作频率的话可能需要追十几个小时，不晓得工作频率时间会更长。</p><h2 id="二、使用读码设备读取地址码"><a href="#二、使用读码设备读取地址码" class="headerlink" title="二、使用读码设备读取地址码"></a>二、使用读码设备读取地址码</h2><p>工作频率的问题解决了，地址码怎么获得呢？</p><p>地址码是存放在BP机CPU中一块EEPROM存储器当中的，如果你的BP机没有被加密，可以通过读码设备读出。当然有些型号被加密也是有办法进行解密的。</p><p>如果你的动手能力强，有一定的电路基础，可以自己做一个读码设备（其实就是个串口，CH340、FT232芯片甚至MAX232都可以）。其实很简单，十几块钱就搞得定。  </p><p>原理图（已经通过测试的）：  </p><p><img src="/images/Get-BP-Code/05.png" alt="IMG_20190722_191136"></p><p>实物图：  </p><p><img src="/images/Get-BP-Code/03.png" alt="IMG_20190722_191136"></p><p>只有读码设备是不行的，还得有配套的读码软件才可以。读码软件使用<code>雷霆2000</code>系列光盘，大多数的寻呼机写码软件都集成在里面了，只是这些软件只能跑在DOS或者WinXP系统下，为了能使现在主流的Windows7、10能够运行，我将它集了DOSBOX和VMware，可以直接在现有系统下打开。</p><p><img src="/images/Get-BP-Code/04.png" alt="04"></p><p>可以看到，每个呼机可以设置四个不同的地址码，可以自定义每个地址码下的功能位，除了读码写码的功能，还有更改BP机的很多参数。不小心改错了也不用怕，恢复缺省参数即可。</p><p>找不到写码软件怎么办？<br>去各大搜索引擎搜索BP机写码软件，应该找得到。摩托罗拉官网现在还保留了几个型号的BP机写码软件，现在是可以下载的。（DOS环境下运行）  </p><p>动手能力不强自己做不出板子怎么办？<br>我自己做板子的时候多做了几个，可以通过<a href="https://market.m.taobao.com/app/idleFish-F2e/widle-taobao-rax/page-detail?wh_weex=true&wx_navbar_transparent=true&id=598353867729&ut_sk=1.XQe6E2%252FASVwDAPP0NEMf5WRD_21407387_1566722074532.Copy.detail.598353867729.1944924120&forceFlush=1">闲鱼平台</a>向我购买，附带视频教程和摩托罗拉写码软件集合。我只焊了几个板子，数量有限。</p><p>这个方法的优点：1、速度快  2、可以自定义地址码和更改其他参数</p><p>缺点：1、需要自制或者购买读码设备  2、如果BP机加密并且没有密码，就无法读出地址码。  3、可能要多花点零钱</p>]]></content>
      
      
      <categories>
          
          <category> BP机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> BP机 </tag>
            
            <tag> 单片机 </tag>
            
            <tag> 摩托罗拉 </tag>
            
            <tag> POCSAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用PCB板做一把尺子</title>
      <link href="/PCB_Ruler/"/>
      <url>/PCB_Ruler/</url>
      
        <content type="html"><![CDATA[<h1 id="信仰"><a href="#信仰" class="headerlink" title="信仰"></a>信仰</h1><p>前些天在某宝上发现了刻有电子专业信仰的尺子，做工不错，上面不仅有mm，mil这样的常用单位，还有各种元器件的封装和焊盘，用沉金工艺做的，简直是又好看又使用。<br>没错，又是没钱，正好自己刚考了CAED认证，决定画一个自己的信仰。<br>正好赶上某PCB打样的厂家放出5块钱打样还包邮的优惠，连夜赶出两个图纸。绿色阻焊和黑色阻焊各打了两版，花了20个大洋，这波羊毛薅的还行哈~<br>刻度我是放置的焊盘，这样做PCB的时候刻度可以喷锡保护，还耐磨。<br>下面直接放置器件就好了，原理图都不用画，这可简单多了。<br>免费为厂家打个广告：<br>厂家的链接：<a href="https://www.sz-jlc.com/">嘉立创</a></p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-30-39.png"></p><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-30-58.png"></p><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-31-12.png"></p><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-31-27.png"></p><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-31-42.png"></p><p><img src="/images/PCB_Ruler/Snipaste_2019-05-09_12-31-56.png"></p><h1 id="实物图"><a href="#实物图" class="headerlink" title="实物图"></a>实物图</h1><p><img src="/images/PCB_Ruler/IMG_20190509_124609.jpg"></p><p><img src="/images/PCB_Ruler/IMG_20190507_134210.jpg"></p><p>实物到手后手感还是不错了，黑色阻焊表面是磨砂的，手感非常好。<br>以后有钱了，就打个沉金的，然后收藏，哈哈~</p><h1 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h1><p>当然大部分尺子都送给我们班妹子了，果然还是把东西分享给被人看到别人快乐时的快乐要比自己得到东西时的快乐更要快乐˚‧<em>♡ॢ˃̶̤̀◡˂̶̤́♡ॢ</em>‧˚</p><h1 id="PCB文件"><a href="#PCB文件" class="headerlink" title="PCB文件"></a>PCB文件</h1><p>现将PCB文件分享出来，水平不高见谅。<br>链接：<a href="/files/PCB_Ruler/PCB_Ruler.zip">本地文件</a></p>]]></content>
      
      
      <categories>
          
          <category> PCB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> PCB </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floppy内核关闭温控教程</title>
      <link href="/FloppyKernel-02/"/>
      <url>/FloppyKernel-02/</url>
      
        <content type="html"><![CDATA[<ul><li>按照上一篇<a href="/FloppyKernel-01">Floppy 内核关闭背光调节器的方法</a>介绍的方法，我们直接打开<strong>ramdisk</strong>目录里的<strong>init.floppy.rc</strong>文件，我们开始修改脚本。  </li><li>我们可以看到类似这种的配置，这些数据便是Floppy内核的温控配置  </li></ul><p><img src="/images/FloppyKernel-02/01.png">  </p><ul><li>还要注意这里，这两个<em>on boot</em>和<em>on charger</em>分别代表启动时和充电时的状态，所以如果要修改启动时的温度控制代码，就修改<em>on boot</em>下面的，同理，想要修改充电时的温度控制代码，就修改<em>on charger</em>下面的。  </li></ul><p><img src="/images/FloppyKernel-02/02.png"></p><ul><li>下面这一行代码表示系统启动完成要修改的配置，所以当手机正常使用并且没有充电时，是这一行代码下面的配置在起作用。  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">on property:sys.boot_completed&#x3D;1<br></code></pre></td></tr></table></figure><ul><li>如果我们只是想关闭内核的温控，那么就好办了，直接将<br>文件中所有的这样一行代码后面的<strong>1</strong>改为<strong>0</strong>就好了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">write &#x2F;sys&#x2F;kernel&#x2F;msm_thermal&#x2F;enabled 1<br></code></pre></td></tr></table></figure><p>改为如图这样就好了，CPU烧到100度都不降频，贼鸡儿爽！<br><img src="/images/FloppyKernel-02/03.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米5 </tag>
            
            <tag> 内核 </tag>
            
            <tag> 折腾 </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floppy 内核关闭背光调节器的方法</title>
      <link href="/FloppyKernel-01/"/>
      <url>/FloppyKernel-01/</url>
      
        <content type="html"><![CDATA[<h1 id="这是个假的二级标题"><a href="#这是个假的二级标题" class="headerlink" title="这是个假的二级标题"></a>这是个假的二级标题</h1><p>用了两年的<code>小米5</code>逐渐老了，新游戏也拉不动了，就去找找有没有什么能流畅吃鸡的方法。<br>然后啊，，，就找到了这个<code>Floppy</code>超频的内核，可以将820这个渣U的大核拉到2.2GHz，小核拉到1.8GHz，简直比满血版820都厉害啊，并且好像还没有温控，嘿嘿嘿（在内核调校APP里没有发现温控选项，在System\etc里也没有发现温控文件）😏<br>然而发现了另外一个问题，就是在升级到了<code>MIUI10.2</code>（安卓O）之后，滑动亮度条的时候会出现跳变的现象，亮度从一个亮度一下子调到另外一个亮度，很难受。。。。(╯﹏╰)<br>没错，在内核调校里把内核的背光调节器关闭，然后使用系统自带的亮度调节就好了。然后我就想能不能直接改一下内核，让它不用每次开机都要进APP里手动关闭呢。<br>（所以就找到了╮(╯_╰)╭）</p><h1 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h1><p>我们使用的内核是被封装在zip刷机包里的，我们可以通过解包zip包来修改它的参数。<br>以<code>FloppyKernel-Mi5-Lite-Prime-Pro-05012019-UBERTC-Oreo-MIUI.zip</code>文件为例，解压之后会发现有下面这样的文件<br><img src="/images/FloppyKernel-01/01.png" alt="img"></p><p>既然是以刷机包的形式给用户使用的，我们可以从它的刷机脚本开始研究。<br>我们打开**/META-INF/com/google/android/update-binary<strong>文件，可以看到里面有很多操作是使用</strong>anykernel.sh**脚本来操作的<br><img src="/images/FloppyKernel-01/02.png" alt="img"></p><p>那我们就来研究一下这个脚本。打开这个脚本之后可以发现有这样一行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">nsert_line init.rc &quot;import &#x2F;init.floppy.rc&quot; before &quot;import &#x2F;init.environ.rc&quot; &quot;import &#x2F;init.floppy.rc&quot;;<br><br></code></pre></td></tr></table></figure><p><img src="/images/FloppyKernel-01/03.png" alt="img"></p><p>很显然这句有很多的.rc文件，rc文件属于命令脚本，我们可以将关闭背光调节器的命令写在这些脚本里就好了。  </p><p>另外可以发现这些.rc文件都是在一个叫做<strong>ramdisk</strong>的文件夹里面，就可以肯定是可以操作内核的脚本无疑了，因为内核会在开机之前加载到内存里，而ramdisk就是<code>内存磁盘</code>的意思。  </p><p>打开<strong>init.floppy.rc</strong>文件可以发现有很多的命令，我们需要把关闭背光调节器的命令下载下面，那么怎么获取关闭调节器的命令呢？<br>我们可以使用<code>内核调校</code>这个工具，利用开启启动操作，就可以获取到命令了。<br><img src="/images/FloppyKernel-01/04.png" alt="img"></p><p>好了，我们把这个命令添加在<strong>init.floppy.rc</strong>文件里面就可以了<br><img src="/images/FloppyKernel-01/05.png" alt="img"></p><p>最后我们把它保存，重新打包成zip，通过recovery刷入就好了。开机后发现背光调节器默认是关闭的了，哈哈哈哈，奈斯~~😁  </p><h1 id="为什么不用init-d？"><a href="#为什么不用init-d？" class="headerlink" title="为什么不用init.d？"></a>为什么不用init.d？</h1><p>当时我第一个考虑的就是利用init.d开机自动执行，写个脚本往里面一丢就好了，可是后来发现init.d执行的比较早，内核的配置随后才会重写，所以用init.d是更改这个内核的配置是无效的。  </p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>@<a href="https://github.com/JonasCardoso/">JonasCardoso</a>维护的kernel版本：<a href="https://github.com/JonasCardoso/android_kernel_xiaomi_msm8996/releases">https://github.com/JonasCardoso/android_kernel_xiaomi_msm8996/releases</a><br>已将关闭背光调节器的Floppy Kernel: <a href="https://www.lanzous.com/i2tw0zi">https://www.lanzous.com/i2tw0zi</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米5 </tag>
            
            <tag> 内核 </tag>
            
            <tag> 折腾 </tag>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《知识就是力量第六期笔记分享》</title>
      <link href="/zhishijiushililiang/"/>
      <url>/zhishijiushililiang/</url>
      
        <content type="html"><![CDATA[<ul><li>最近发现一个节目非常的不错，我妈推荐给我的，名为《知识就是力量》，里面的罗胖会分享很多人生的经验和方法。  </li><li>我更推荐大家去<a href="http://www.iqiyi.com/a_19rrh5xzvl.html">爱奇艺专题页面</a>去看视频，里面罗胖讲的更为详细，语言也更为幽默轻松。  </li><li>现将第六期<a href="http://www.iqiyi.com/v_19rqzkzeok.html">《怎样逼自己成为一个上进的人》(怎样让日子过的不丧)</a>的笔记整理分享出来，大家一起来看看，不足之处望指正。  </li></ul><blockquote><ul><li><strong>不是上进反人性，而是让人上瘾的事物迎合人类</strong><br>人生所有的上瘾的事在你第一次接触的时候其实都不舒服，让我们上瘾的事物都是通过精心设计，让我们把时间花进去。<br>所以，上瘾就是上进的智力资源，要自己设计自己让上进成为上瘾的事。</li><li><strong>如何做到上瘾？</strong>  </li></ul><p><strong>1、先把自己放进一个更让自己容易上进的环境（设计环境）</strong><br>想上进，进尽可能的选择从事朝阳行业。（理由有二：一是学习氛围更好，聪明人更多，而是更容易拥抱建设性心智模式）<br>那如何衡量自己身边的环境？<br><code>傻瓜指数</code>：<br>觉得N年前自己是个傻瓜，N越小越说明自己现处的环境越好。<br><code>朋友指数</code>：<br>新环境中的新朋友越多，表明环境就越好<br><strong>2、“绑架”自己（寻求外部监督）</strong><br>在起步的第一天，设计一种方式，让自己被“绑架”。<br><strong>3、获得不确定反馈（不确定的魅力要比确定性的事物大得多）</strong><br><strong>4、选择一条长远的职业阶梯（选择无止境晋升的职业）</strong><br><strong>所有的好行业都有这样的特征：</strong><br>(1)<strong>有无穷无尽的台阶</strong><br>(2)<strong>而且能随时随地地给从业者不确定的及时反馈</strong><br>给自己设计一套上进机制，关键要控制好技能挑战比。<br>*<code>技能挑战比</code>的设定*：<br>不能太简单，太简单没意思，也不能太难，太难容易放弃。有一点点挑战是最容易坚持下去的。  </p><p>PS：行业的高手能把职业目标变成一级又一级台阶<br>现在的时代，对于想上进的人来说，是一个友好的时代。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 爱奇艺 </tag>
            
            <tag> 知识就是力量 </tag>
            
            <tag> 分享 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用好fastboot命令，刷机加锁不用再找工具！</title>
      <link href="/fastboot-01/"/>
      <url>/fastboot-01/</url>
      
        <content type="html"><![CDATA[<ul><li>手机刷机我想很多人都折腾过吧，我想大多数人都是去找对应品牌的专用刷机工具。其实现在很多手机都有fastboot模式（可以重启到Bootloader进入），这是可以说是一种快速通用的刷机模式，那么我们通过fastboot这个工具就可以对手机进行刷写了。fastboot工具由Google官方进行提供  </li><li>上次这篇教程我发布在MIUI论坛的小米5板块，结果审核没有通过。不知道这样一篇纯经验分享的帖子为什么没有通过呢？心中顿生不快。于是在这里再次分享出来。</li><li>教程图片由Word转PDF再转PNG生成，看不清楚的话可以把图片下载下来哦<del>_</del><br><img src="/images/fastboot-01/main.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> 刷机 </tag>
            
            <tag> 经验 </tag>
            
            <tag> fastboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈Kindle这个玩意儿</title>
      <link href="/kindle-01/"/>
      <url>/kindle-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Kindle只能看书"><a href="#Kindle只能看书" class="headerlink" title="Kindle只能看书"></a>Kindle只能看书</h1><ul><li>Kindle快要到货的那天，我真是那个激动哇······想想自己就要成为一个学识渊博的人了，前夜还失眠了。</li><li>有人问我：你买这个东西干嘛？我说：看书啊。那人回我：手机还看不开你了？也许在他看来花几百块钱买这个只能看书其他又毫无用处的东西就是浪费Money，用手机，用电脑还不是一样看么？讲真，手机和电脑的阅读感受是差了Kindle一大截的。对，Kindle只能看书，就像是为喜爱阅读的人专门定制的机器，只能看书，让你免去了QQ和微信的打扰，让你专注阅读。也许在别人眼中Kindle是个毫无用处的东西，但在爱读书的人眼中，它是个宝。</li><li>我现在有点后悔为什么没有早点买Kindle呢？这样就可以看更多的书了。想想去年我连一本东野圭吾的《假面饭店》都没有读完，倒是拿它压了几次泡面，心中不免唏嘘。</li><li>读书可以干什么？不好意思，我对这个问题还真是回答不了。就说说我自己吧。我也许只是为了追求一份精神上的满足，也许只是为了吹嘘自己看了多少多少书。到现在我也不知道自己看的书中有多少进了脑子，就当是找乐子吧，就像别人玩PS游戏机、打麻将、刷抖音一样的找乐子。</li></ul><h1 id="关于盗版"><a href="#关于盗版" class="headerlink" title="关于盗版"></a>关于盗版</h1><ul><li>我觉得还是不要下载盗版书的好，因为盗版的书不花钱呐。没有金钱的投入就会不珍惜，也许下载了几十本乃至几个GB的书到最后一本都没有看完。我当然不是全盘否定盗版，毕竟盗版也是可以推动经济发展的。如果实在是囊中羞涩的话，下载几本盗版书也可以，等到有了钱以后在买回来收藏也不错嘛~</li><li>再一个，下载盗版就失去了亚马逊对这本书的所有服务，不能在线更新书籍，没有X-Ray，甚至没有封面，排版糟糕，不能推送到各个平台的客户端。</li></ul><h1 id="一些使用Kindle的小小经验"><a href="#一些使用Kindle的小小经验" class="headerlink" title="一些使用Kindle的小小经验"></a>一些使用Kindle的小小经验</h1><ul><li>开飞行模式比较省电，如果打开wifi的话，是不可能达到官方所说的<em>一次充电可以使用数周</em>的。</li><li>邮箱推送真的很方便，格式化Kindle以后还可以再通过亚马逊的服务同步回来，这是网上所卖的不能绑定账号的机器没有的功能，也是亚马逊卖点之一，相当于现在的云备份。</li><li>我喜欢打开屏保广告。有的人不喜欢广告，千方百计的想要关掉。我认为开着屏保广告可以增加对陌生书本的认知，知道这本书原来是写这个的，博览多识。</li><li>在搜索框输入下面的命令即可关闭自动待机，在摘抄文字的时候十分有用。摘抄完毕重启Kindle即可恢复</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">~dm<br></code></pre></td></tr></table></figure><ul><li>我认为没有必要进行越狱，现在官方的固件可以满足基本的阅读需要（除了看PDF，但是很多书都可以找到mobi版本的），折腾越狱的话会很耗费时间，还会增加耗电量。现在Kindle越狱的进度缓慢，新版本的固件没有办法越狱，估计要等半年左右吧。</li><li>推荐一个网站：<a href="https://bookfere.com/">书伴(原Kindle伴侣)</a><br>里面有很多优质的资源以及关于Kindle的技术资料。</li><li>如果你真的想研究Kindle固件······好吧，用<code>KindleTool</code>这个工具可以解包Kindle的固件供你研究。<code>KindleTool</code>下载可以到<strong>Mobileread</strong>论坛去下载。</li><li>Kindle想安装安卓系统？大哥，咱能不能<strong>不折腾</strong>？······好吧，<a href="http://kdroid.org/"><del>http://kdroid.org</del></a>（<strong>不要刷！！开机会提示输入密码，并且破解极为复杂</strong>）这个网址可以下载安卓固件，不过安装方法比较麻烦，需要有点专业的玩机知识。</li></ul><h1 id="听首歌吧"><a href="#听首歌吧" class="headerlink" title="听首歌吧"></a>听首歌吧</h1><ul><li>最近听到一首歌确实不错的：许巍《我的爱》<br>老许的声音很有灵性，这首单曲依旧是那种生灵的感觉，我很喜欢，现在在这里推给大家，希望你们在劳累了一天之后能够得到放松。</li><li>许巍和他们的团队正在越来越好，未来也会越来越好。</li></ul><center><iframe src="//player.bilibili.com/player.html?aid=30931304&cid=54009249&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="479" height="360" allowfullscreen="true"> </iframe></center>]]></content>
      
      
      <categories>
          
          <category> 我的Kindle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> 经验 </tag>
            
            <tag> Kindle </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我修改PE的一点小经验</title>
      <link href="/PE-01/"/>
      <url>/PE-01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>我觉得应该把这些经验分享出来，因为我觉得我的技术算是非常的差，基本上用的都是别人制作好的东西，我只是把他们简单的拼合在一起，事实上确是如此。下面我所说的PE是指的整个工具的集合，而非特指Win2003或者Win10PE，我又比较懒，多打几个字就不是滋味，所以PE就是那个不知道叫什么好的工具集  </li></ul><h1 id="PE中的注册表部分"><a href="#PE中的注册表部分" class="headerlink" title="PE中的注册表部分"></a>PE中的注册表部分</h1><ul><li>PE内核中的注册表是PE的核心部分，每个大神制作的PE内核都有他们独到的部分，可谓是百家齐放。这部分很难，网上搜集到的资料也比较少。我曾经也是有自己精简注册表的想法的，但是发现这样太耗费时间，不如直接用别人修改好的，站在巨人的肩膀上可以少费力很多。我用的就是无忧论坛<strong>wimboot</strong>大神制作好的内核，Win10x86和x64都有，而且他的注册表精简的非常到位，我觉得不错，在此表示致敬。  </li><li>下面就是外置软件部分的注册表了，当然是用<strong>RegShot</strong>这个工具，这个工具可以非常快速方便的对比出安装软件之前和安装之后的注册表和Windows目录中文件的变化，并且生成报告文件，这样就可以讲安装式的软件变成绿色免安装版的，就可以放进PE中啦。RegShot生成的TXT报告文件其实是reg文件，可以直接修改后缀为.reg，双击就可以直接导进目录了。<br>还有一种导入reg格式注册表的方法，就是利用<strong>注册表转换工具</strong>，将reg格式的注册表文件转换成cmd格式或者inf格式，利用cmd命令就可以导入注册表了。  </li><li>导入reg格式注册表的命令行： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">regedit &#x2F;s X:\\Windows\system32\RegPE.reg<br></code></pre></td></tr></table></figure></li></ul><h1 id="GRUB引导部分"><a href="#GRUB引导部分" class="headerlink" title="GRUB引导部分"></a>GRUB引导部分</h1><ul><li>我的PE的界面是用<code>GRUB4DOS</code>做成的，从官方下载来的GRUB4DOS运行以后是命令行版本，没点功底还真是操作不了。<br>GRUB4DOS可以加载常见的ISO、IMG格式的磁盘文件，也可以直接引导Linux内核。Linux内核要和initrd一起加载，否则引导成功也只是进入了内核而没有图形界面，只能敲bash命令。  </li><li>懒得敲命令就写一个<strong>LST列表文件</strong>，把需要引导的文件做成一个列表，这样就省去了每次敲命令的麻烦。具体的LST语法可以参考我PE中的LST文件，很简单的，基本上就是复制粘贴一下就好。  </li><li>所以给GRUB4DOS应用主题就是一个非常明智的选择。GRUB4DOS的主题文件在GRUB/MESSAGE文件，这个文件包含了界面的背景和倒计时等一系列控件。有人问我可不可以更改PE的背景图？当然可以！你下载一个<strong>MESSAGE编辑工具</strong>就可以更改了，而且还有很多模板哦，可以自己DIY。  </li><li>GRUB4DOS寻找默认LST的位置是在/GURB/memu.lst，这个路径和许多<code>Linux系统</code>默认的路径是一样的，如果直接使用的话可能导致引导的是你本地的系统而非PE，所以应该修改一下默认的路径免得GRUB混淆。可以使用<strong>磁盘引导扇区修复工具</strong>中得GRUB内置命令修改工具打开PE目录的GRUB文件，将所有的<strong>menu.lst改成UDmenu.lst</strong>这样独一无二的文件名，这样就不会引起混乱。还要注意的是保存的时候千万不要选择进行GZ压缩，这样会导致GRUB4DOS出问题的，直接以UTF-8编码保存就好。因为新版本的<strong>fbinsttool</strong>会默认进行GZ压缩GRUB文件，所以不要用fbinsttool工具直接修改GRUB文件。  </li><li>GRUB4DOS可以自动识别GZ压缩过的磁盘文件，所以把ISO或者IMG文件进行GZ压缩一下体积会减小许多哦。  </li></ul><h1 id="UEFI引导部分"><a href="#UEFI引导部分" class="headerlink" title="UEFI引导部分"></a>UEFI引导部分</h1><ul><li>现在的机器应该都是UEFI引导的了，发展的趋势如浪如潮哇。UEFI是个很好的趋势，因为我不用再担心MBR损坏了，也不用再考虑将哪个分区设置为主分区（MBR有主分区个数的限制，而GPT可以说没有），也可以购买3T4T的大硬盘了。就算引导文件损坏了，我只需要把引导文件拷贝进FAT32的U盘里一样可以引导进入系统，备份重要数据，所以我是非常喜欢UEFI方式的。  </li><li>UEFI中的一个很重要的工具就是<strong>UEFIshell</strong>，就是那个壳子。shell这个东西在Linux可是神器，前提是你得会命令。用这玩意可以引导任何EFI文件，用来调试EFI再好不过了，而且它能提供你机器BIOS的原生UEFI环境。shell是一个efi文件，通过改名为bootx64.efi的方式引导它，它在引导其他文件，很方便的。但是对于不愿意敲命令的同学就非常的差劲了。  </li><li>我PE中的UEFI引导部分的列表是用<strong>XorBoot</strong>，出自无忧论坛的Pauly大师。这个工具可以做出精美的引导界面。我才学疏漏，并且没有艺术大脑，最终只做成了这个样子：黑背景黄框框。这不是重点，我想说的是在BIOS的环境下做一个图形界面是不容易的，所以说XorBoot可谓是一个极好的工具，也是我PE的UEFI部分中的核心。  </li></ul><h1 id="Linux部分"><a href="#Linux部分" class="headerlink" title="Linux部分"></a>Linux部分</h1><ul><li>我PE中Linux用的是无忧大神<strong>wintoflash</strong>定制的<code>Porteus</code>，这是网友公认的比价好的小型Linux了。可惜驱动不是很全，较新的的机器上还会有兼容性问题，作者现在也不再更新了。如果大家还有什么比较好的Linux发行版的话（我是指体积比较小，界面好看，支持网络的），可以自行更换哦，也可以告知我。  </li><li>Linux启动的话就两点。一个是内核（体积大概十几MB到几十MB），一个是initrd（体积几百兆甚至几个G）。只要这两个文件在启动器中定义好，启动基本是没有问题的。有的Linux还要在其内核后面添加一些命令，比如–noroot，用来指定启动方式的。自行添加的时候要注意这些。</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>我当然是希望大家能够轻松的DIY出自己喜欢的PE。所以大家可以解包我的PE，进行研究之。不过要注意的是，切莫拿这个PE进行商用，这里面有很多的开源软件和破解软件，如果拿来商用的话，小心收到律师函罒ω罒。  </li></ul>]]></content>
      
      
      <categories>
          
          <category> WinPE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> WinPE </tag>
            
            <tag> U盘启动 </tag>
            
            <tag> 工具集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8" homePageUrl="https://359303267.github.io" homePageName="返回小小小日天的博客首页"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/PEDonation/index.html"/>
      <url>/PEDonation/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="https-359303267-github-io-PE"><a href="#https-359303267-github-io-PE" class="headerlink" title="https://359303267.github.io/PE/"></a><center><a href="https://359303267.github.io/PE/">https://359303267.github.io/PE/</a></center></h1><h1 id="一个不知道叫什么好的U盘启动工具集"><a href="#一个不知道叫什么好的U盘启动工具集" class="headerlink" title="一个不知道叫什么好的U盘启动工具集"></a><center>一个不知道叫什么好的U盘启动工具集</center></h1><h2 id="非常感谢以下赞助者"><a href="#非常感谢以下赞助者" class="headerlink" title="非常感谢以下赞助者"></a><center>非常感谢以下赞助者</center></h2><h3 id="（名单随机排序）"><a href="#（名单随机排序）" class="headerlink" title="（名单随机排序）"></a><center>（名单随机排序）</center></h3><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">Blood of SKY</td><td align="center">*宽明</td><td align="center"><a href="mailto:&#x37;&#x38;&#x36;&#53;&#x32;&#x31;&#49;&#56;&#x34;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#x37;&#x38;&#x36;&#53;&#x32;&#x31;&#49;&#56;&#x34;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a></td><td align="center">芋筅</td><td align="center">*光辉</td></tr><tr><td align="center">TonyYAO</td><td align="center"><em>雷　lev**</em>@gamil.com</td><td align="center">落弃</td><td align="center">2018-07-10微信赞助用户</td><td align="center">Singapore</td></tr><tr><td align="center">*震</td><td align="center">Alisren</td><td align="center">alcoholic</td><td align="center">源</td><td align="center">WXQ</td></tr><tr><td align="center">*敬龙</td><td align="center">mzg</td><td align="center">2018-08-30微信赞助用户</td><td align="center">成师</td><td align="center">铭豆</td></tr><tr><td align="center">195648521</td><td align="center">李伟华</td><td align="center">丹羽子</td><td align="center"><em>邓冲　zdc**</em>@163.com</td><td align="center">2018-03-18微信赞助用户</td></tr><tr><td align="center">洋</td><td align="center">执念っつ</td><td align="center">简单爱</td><td align="center">一清</td><td align="center">男人的骄傲</td></tr><tr><td align="center">2019-02-13微信赞助用户*💪🏻</td><td align="center">2019-04-21微信赞助用户*龙</td><td align="center">2019-05-27支付宝用户*祥博</td><td align="center">2019-07-19微信用户*è</td><td align="center">2019-07-20微信用户*红</td></tr><tr><td align="center">2019-07-22微信用户*秃</td><td align="center">2019-07-22支付宝用户*子骆</td><td align="center">2019-08-08微信用户*乐</td><td align="center">2019-08-09支付宝用户*靖</td><td align="center">2019-10-26支付宝用户*雷</td></tr><tr><td align="center">2019-11-03支付宝用户*清华</td><td align="center">2020-02-08微信用户*林</td><td align="center">2020-03-12支付宝用户**章</td><td align="center">2020-04-14支付宝用户**清</td><td align="center">2020-04-30支付宝用户**颖</td></tr><tr><td align="center">2020-06-05微信用户*士</td><td align="center">2020-04-26微信用户*子</td><td align="center">2020-07-15微信用户*學</td><td align="center">2020-07-15微信用户*X</td><td align="center">2020-07-23微信用户*六</td></tr><tr><td align="center">2020-06-19微信用户*μ</td><td align="center">2020-07-22支付宝用户*辉</td><td align="center">2020-08-17微信用户A*2</td><td align="center">2021-01-01微信用户*R</td><td align="center">2021-01-04微信用户*（那个字打不出）</td></tr><tr><td align="center">2021-02-1微信用户*市</td><td align="center">2022-02-23微信用户*来</td><td align="center">2021-09-11微信用户*力</td><td align="center">2021-06-18微信用户*白</td><td align="center">2022-03-13支付宝用户**亮</td></tr><tr><td align="center">2022-01-23支付宝用户**鑫</td><td align="center">2021-09-09支付宝用户*昕</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="以及以下的无忧论坛用户："><a href="#以及以下的无忧论坛用户：" class="headerlink" title="以及以下的无忧论坛用户："></a><center>以及以下的无忧论坛用户：</center></h2><table><thead><tr><th align="right"></th><th align="left"></th><th align="right"></th><th align="left"></th></tr></thead><tbody><tr><td align="right"><code>wimboot</code>:</td><td align="left">非常棒的<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=402673">Win10PE</a>内核</td><td align="right"><code>立帮电子</code>:</td><td align="left">优质的<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=397706">一键备份还原工具</a> 以及<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=403550">WinPE生成器</a></td></tr><tr><td align="right"><code>2010kva</code>:</td><td align="left"><a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=364890">界面友好的一键制作工具</a></td><td align="right"><code>wintoflash</code>:</td><td align="left">非常棒的Porteus 4.0 口袋Linux系统以及<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=410086">Grub2文件管理</a></td></tr><tr><td align="right"><code>jsgh1983</code>:</td><td align="left"><a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=365856">Message启动菜单个性化制作工具</a></td><td align="right"><code>红毛樱木</code>:</td><td align="left">搜集大量<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=372840">网卡、显卡驱动</a></td></tr><tr><td align="right"><code>hhh333</code>:</td><td align="left">搜集整理的<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=388395&fromuid=570450">NVME驱动程序</a></td><td align="right"><code>slore</code>:</td><td align="left"><a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=409685">Wimbuilder2 PE生成器项目</a></td></tr><tr><td align="right"><code>sinoxer</code>:</td><td align="left"><a href="https://www.xyboot.com/usb3_drivers_smart_install/">搜集整理的USB3.0驱动</a></td><td align="right"><code>Pauly</code>:</td><td align="left"><a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=157812&extra=page=1">XORBOOT Uefi: 多系统引导程序</a></td></tr><tr><td align="right"><code>slorelee</code>:</td><td align="left"><a href="https://github.com/slorelee/wimbuilder2">WinBuilder2项目</a></td><td align="right"></td><td align="left"></td></tr></tbody></table><h2 id="好用的话，请作者喝杯茶吧🙂"><a href="#好用的话，请作者喝杯茶吧🙂" class="headerlink" title="好用的话，请作者喝杯茶吧🙂"></a><center>好用的话，请作者喝杯茶吧🙂</center></h2><div class="reward" id="reward">  <button id="reward-button" class="button" disable="enable">打赏</button>  <div id="qr" class="qr" style="display: none;" aria-hidden="true">    <div id="alipay">      <img id="alipay_qr" src="/images/AliPay.jpg" alt="支付宝">    </div>  </div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么我要叫这个名字呢？因为它霸气啊！"><a href="#为什么我要叫这个名字呢？因为它霸气啊！" class="headerlink" title="为什么我要叫这个名字呢？因为它霸气啊！"></a>为什么我要叫这个名字呢？因为它霸气啊！</h1><p>还在睡梦中的博主：一个什么都折腾但是又什么都折腾不好的宅，偶尔看看书，耍耍吃鸡。最喜欢的事莫过于睡觉了。  </p><h1 id="访问速度好慢哦···"><a href="#访问速度好慢哦···" class="headerlink" title="访问速度好慢哦···"></a>访问速度好慢哦···</h1><p>使用SSR等服务可以极大提升访问本站的速度。</p><h1 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h1><p>现评论系统已经更换为Valine，可以免注册进行评论，请大家在提交评论的时候主动留下昵称和邮箱，方便联系！</p><h1 id="关于小站"><a href="#关于小站" class="headerlink" title="关于小站"></a>关于小站</h1><p>整个博客使用静态页面搭建，使用<code>HEXO</code>生成静态页面，博客主题使用<code>ARIA</code>，评论系统使用<code>Valine</code>，整个网站托管在<code>Github Pages</code>😜</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/xunhufasheqi-help/index.html"/>
      <url>/xunhufasheqi-help/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="寻呼发射器帮助"><a href="#寻呼发射器帮助" class="headerlink" title="寻呼发射器帮助"></a>寻呼发射器帮助</h1><p>视频教程：</p><blockquote><ul><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M">演示（一）</a></li><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M?p=2">演示（二）</a></li><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M?p=3">第一步：安装驱动</a></li><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M?p=4">连接Wifi的方法</a></li><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M?p=5">群呼和组呼的配置及使用</a></li><li><a href="https://www.bilibili.com/video/BV1sZ4y1u76M?p=6">固件升级方法</a></li></ul></blockquote><p>如有其他问题，可在下方评论区留言</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/xunhufasheqi-update/index.html"/>
      <url>/xunhufasheqi-update/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="寻呼发射器固件更新"><a href="#寻呼发射器固件更新" class="headerlink" title="寻呼发射器固件更新"></a>寻呼发射器固件更新</h1><p>单片机固件更新：</p><blockquote><ul><li><p>2020-07-21 V1.2</p></li><li><p>1、增加支持2400速率的呼机</p></li><li><p>下载地址：<a href="https://wwa.lanzous.com/i8LsAetysqb">https://wwa.lanzous.com/i8LsAetysqb</a></p></li></ul><ul><li><p>2020-07-16 V1.1</p></li><li><p>1、修复数字机中括号显示颠倒问题</p></li><li><p>2、修复群呼组呼时OLED不显示频率的问题</p></li><li><p>下载地址：<a href="https://wwa.lanzous.com/iDcPzenliqh">https://wwa.lanzous.com/iDcPzenliqh</a></p></li></ul></blockquote><p>Wifi模块固件更新：</p><blockquote><ul><li>2020-07-21 V1.1</li><li>1、增加支持2400速率的呼机</li><li>2、可在Web端连接其他Wifi</li><li>3、更改一些串口输出</li><li>下载地址：<a href="https://wwa.lanzous.com/i2eLgetyssd">https://wwa.lanzous.com/i2eLgetyssd</a></li></ul></blockquote><p>PC端控制软件更新：</p><blockquote><ul><li>2020-07-21 V2.1</li><li>1、增加支持2400速率的呼机</li><li>2、增加了一些用户提示</li><li>3、修复长WIFI密码连接失败的问题</li><li>4、支持单个呼机配置上传</li><li>5、单呼界面支持读取已保存的呼机配置</li><li>6、单呼界面的配置可保存</li><li>7、修复追频功能</li><li>下载地址：<a href="https://wwa.lanzous.com/iNveCetyspa">https://wwa.lanzous.com/iNveCetyspa</a></li></ul></blockquote><p>如有问题需要反馈，可在下方评论区留言。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>一个不知道叫什么好的U盘启动工具集</title>
      <link href="/history/PE-2019-08-08/index.html"/>
      <url>/history/PE-2019-08-08/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="先说版权"><a href="#先说版权" class="headerlink" title="先说版权"></a>先说版权</h1><p>　　这个PE工具集已经被一些商人盯上了！<br>　　所以先把版权放在前面，这个工具个人免费下载和使用，也可以解包研究，但是请不要拿它来卖钱！你以为把这个东西装到U盘里然后卖U盘的方法我没想到吗？长点脑子好吧。我不卖钱肯定是有原因的。也希望已经拿这个工具来挣钱的人停止这种行为，否则我将撤下所有资源，这样对谁都没有好处。<br>　　现在b站关于商标注册的事情闹得沸沸扬扬，我从一开始也考虑了这个问题，但是我觉得无论什么样的手段，最终都是挡得住君子防不住小人，所以我也希望各位都要点脸，不要因为钱而变成畜生。所以我在一些背景图上打了很浅的水印，防止别人盗用。<br>　　这个工具不是给小白用户使用的，而是给我这种半吊子来用的，如果你只是想偶尔给自己装个系统我劝你别用这个，省的到时候跟我说：啊……你这个没有那个什么工具……你带的工具不好用……你这个工具集太大了，看别人的就一百多兆……¯_༼ •́ ͜ʖ •̀ ༽_/¯<br>　　所以，新版本<strong>只提供完整版和光盘版</strong>，不再提供其他版本，你喜欢用小体积的用别人家的去，望悉知。<br>　　这个PE工具集<strong>不允许拿来做任何商业活动</strong>，但是<strong>个人是免费下载和使用和研究</strong>的！<strong>禁止转载到远景论坛</strong>！<br>　　有些商家用这个赚钱不说还不愿意放出官方的帖子链接，用意何在？用我的东西好歹给我说一声是吧？这样才能促进社会和谐，民族安定，国家富强。。。<br>　　<strong>PECMD.ini未加密</strong>，并且进行整理标注，欢迎研究和分析。禁止抄袭！！如发现有侵权行为，会走程序。  </p><h1 id="2019-08-08，嘻嘻···嘻······"><a href="#2019-08-08，嘻嘻···嘻······" class="headerlink" title="2019-08-08，嘻嘻···嘻······"></a>2019-08-08，嘻嘻···嘻······</h1><p>　　很开心，又更新了，但是我发誓以后绝不轻易更新。鼓捣这个东西很耗费时间和精力，搞这几天我睡的很晚，又不挣钱。以后的时间越来越少，所以等下次更新？等着吧~！<br>　　你们所期望的功能，我没有添加进去，无非就是一键装系统的工具而已，DISM++体积小功能多，足矣！<br>　　说一下吧，更新了啥？我劝你仔细看  </p><ol><li>没有更新PE内核，呃……盲目追求新版本是错误的，目前的内核很稳定，体积和功能也控制的很好，我没有必要去换个新的内核然后重新弄一遍</li><li>但是注入了USB3.0，NVME，IRST驱动。其实这些个驱动不注入也行……win10自带的驱动足矣驱动这些东西，IRST模式蓝屏你就不能把磁盘模式改为AHCI吗？</li><li>更新了Diskgenus、DISM++、WinNTSetup、CPU-Z……算了，太麻烦不写，最讨厌写更新日志了，就像敲代码不想写注释一样讨厌。</li><li>加入了安装外置驱动的功能。把驱动放进“PETools\外置驱动程序”目录里面，进入PE之后运行桌面的“安装外置驱动”快捷方式就可以安装了，支持多级目录，驱动是需要解压的，含有inf文件的那种。</li><li>优化了一些操作逻辑，比如说UEFI启动界面将32位和64位的菜单分开了，还有会自动搜索PETools，如果搜索不到PETools的话，就不会创建”加载外置工具”的快捷方式。</li><li>Win10PE加入了右下角显示网络状态和连接wifi的图标（使用PENetWork），所以开机以后会自动弹出PENetWork的窗口，点击关闭就好了。</li><li>优化一些界面显示，现在启动页面可以显示当前的启动方式了。Win10PE优化了任务管理器默认的窗口大小。</li><li>替换微型Linux系统为Slitaz 5.0。</li><li>打包了光盘版，光盘版支持UEFI和Legacy BIOS两种启动方式，两种启动方式共用了一些文件，所以一些界面和U盘版会有差别。</li><li>不支持上个版本无损升级，需要将U盘格式化后重新制作。</li><li>Win10PE加入了MTP组件，可以连接手机拷贝文件。Win10PEx86支持比较完美，Win10PEx64只可以从手机拷贝到电脑，不能从电脑拷贝到手机，会发生错误，不知原因出在哪里，期望有高手出现能够解决。</li><li>Win10PE将世界之窗浏览器更新到了7，支持Html5视频直接播放，不需要flash插件了。也支持ip地址直接访问（需要在标签栏上右击，使用chrome内核才可以）。支持HIDPI显示。</li><li>其他的想不起来了，第三条曾经说过我讨厌写更新日志，所以忘了就忘了吧。　　</li></ol><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><h2 id="启动界面"><a href="#启动界面" class="headerlink" title="启动界面"></a>启动界面</h2><p><img src="/images/PE/13.png"></p><p><img src="/images/PE/14.png"></p><p><img src="/images/PE/15.png"></p><h2 id="丰富的菜单项"><a href="#丰富的菜单项" class="headerlink" title="丰富的菜单项"></a>丰富的菜单项</h2><p><img src="/images/PE/16.png"></p><p><img src="/images/PE/17.png"></p><p><img src="/images/PE/18.png"></p><h2 id="Windows-2003-PE"><a href="#Windows-2003-PE" class="headerlink" title="Windows 2003 PE"></a>Windows 2003 PE</h2><p><img src="/images/PE/19.png"></p><p><img src="/images/PE/20.png"></p><h2 id="Windows-10-PE"><a href="#Windows-10-PE" class="headerlink" title="Windows 10 PE"></a>Windows 10 PE</h2><p><img src="/images/PE/21.jpg"></p><p><img src="/images/PE/22.jpg"></p><p><img src="/images/PE/23.jpg"></p><p><img src="/images/PE/24.jpg"></p><p><img src="/images/PE/25.jpg"></p><h2 id="Slitaz-5-0-Linux-系统"><a href="#Slitaz-5-0-Linux-系统" class="headerlink" title="Slitaz 5.0 Linux 系统"></a>Slitaz 5.0 Linux 系统</h2><p><img src="/images/PE/26.png"></p><h2 id="内置基于-Linux-的-Acronis-工具"><a href="#内置基于-Linux-的-Acronis-工具" class="headerlink" title="内置基于 Linux 的 Acronis 工具"></a>内置基于 Linux 的 Acronis 工具</h2><p><img src="/images/PE/27.png"></p><p><img src="/images/PE/28.png"></p><h2 id="UEFI-启动模式下的工具"><a href="#UEFI-启动模式下的工具" class="headerlink" title="UEFI 启动模式下的工具"></a>UEFI 启动模式下的工具</h2><p><img src="/images/PE/29.png"></p><p><img src="/images/PE/30.png"></p><h2 id="丰富又强大的外置-PETools"><a href="#丰富又强大的外置-PETools" class="headerlink" title="丰富又强大的外置 PETools"></a>丰富又强大的外置 PETools</h2><p><img src="/images/PE/31.png"></p><h2 id="制作工具主界面"><a href="#制作工具主界面" class="headerlink" title="制作工具主界面"></a>制作工具主界面</h2><p><img src="/images/PE/32.png"></p><h1 id="体积占比"><a href="#体积占比" class="headerlink" title="体积占比"></a>体积占比</h1><h2 id="U盘完整版"><a href="#U盘完整版" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><table><thead><tr><th align="center">BIOS占用</th><th align="center">UEFI占用</th><th align="center">外置PETools</th><th align="center">总计占用</th></tr></thead><tbody><tr><td align="center">1350MB</td><td align="center">1350MB</td><td align="center">671.1MB</td><td align="center">3371.1MB</td></tr></tbody></table><h2 id="光盘版"><a href="#光盘版" class="headerlink" title="光盘版"></a>光盘版</h2><p>​    使用普通4.7GB DVD光盘刻录足够</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>支持大部分的机器和硬件。新机器使用Win10PE，老机器使用Win2003PE，配合Slitaz Linux系统基本可以做到维护所有家用机型。</li><li>Win2003PE和Win10PE支持网络功能，内置一定的网卡驱动，部分机型需要手动安装驱动，Win10PE支持声音。</li><li>附带的<strong>PETools搜集了很多兼顾体积和功能的程序</strong>，装机无忧。</li><li>Win10PE支持MTP功能，可以从安卓手机上拷贝文件。</li><li>可以打开常见的文件格式（包括jpg、gif、png、bmp等常见图片格式，mp3、wav、mp4、avi、mkv等常见媒体格式，doc、docx、xls、xlsx、ppt、pptx、chm、pdf等常见文稿格式等等）</li><li>在不加载外置PETools的情况下，自带的工具足够给磁盘分区和装系统用，以便内存不够造成无法加载PETools。</li><li>可以把常用的驱动放在”U盘根目录\PETools\外置驱动程序”目录当中，进入PE之后只需要点击开始菜单里的快捷方式就可以自动安装驱动程序。</li><li>附带基于Linux内核的Acronis True Image Home和Acronis Disk Director工具。</li><li>界面好看，UEFI启动界面使用<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=157812&extra=page=1">XorBoot Uefi</a>工具制作。<a href="/files/PE/XorBootUx64.exe.zip">在此</a>上传一个我使用的版本，以免绝版。</li><li>没有推广和广告以及任何影响工具纯净的东西。</li></ol><h1 id="正确的安装方式（是安装不是使用，看清楚喽-）"><a href="#正确的安装方式（是安装不是使用，看清楚喽-）" class="headerlink" title="正确的安装方式（是安装不是使用，看清楚喽~）"></a>正确的安装方式（是安装不是使用，看清楚喽~）</h1><h2 id="U盘完整版-1"><a href="#U盘完整版-1" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><ol><li><p>首先准备一个容量大于或等于4GB的存储设备（使用USB3.0设备可以大幅度提高进入PE的速度）  </p></li><li><p>一台运行Windows XP及以上系统的电脑（建议使用Windows 7系统，Windows 10可能出现兼容性问题）</p></li><li><p>备份重要资料（制作过程需要抹除数据）</p></li><li><p>打开USEC文件夹里的“开始制作.exe”</p></li><li><p>选择对应的磁盘，其他参数不要改，直接单击“全新制作”</p></li><li><p>制作完成后，将PETools文件夹拷贝到你的存储设备，注意是文件夹和里面的文件，不是只发送里面的文件，**保证文件结构类似于”G:\PETools\Tools.wim”**。当然如果不需要PETools的话，这一步可以忽略。</p></li></ol><h2 id="光盘版-1"><a href="#光盘版-1" class="headerlink" title="光盘版"></a>光盘版</h2><p>​    使用刻录软件刻录到DVD光盘即可，这里不提供刻录方法。</p><h1 id="各PE最低启动内存"><a href="#各PE最低启动内存" class="headerlink" title="各PE最低启动内存"></a>各PE最低启动内存</h1><p>​    Win2003PE最低启动内存：512MB<br>​    Win10PE 32位版最低启动内存：1G<br>​    Win10PE 64位版最低启动内存：1G<br>​    机器内存少于512MB建议使用DOS工具替代使用  </p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><h2 id="U盘完整版-2"><a href="#U盘完整版-2" class="headerlink" title="U盘完整版"></a>U盘完整版</h2><p>百度云链接: <a href="https://pan.baidu.com/s/19Z0oc5GREB_tyMPsOw_jVA">https://pan.baidu.com/s/19Z0oc5GREB_tyMPsOw_jVA</a> 提取码: b9ma  </p><p>Google Drive链接：<a href="https://drive.google.com/open?id=1InPM0LQ9nViF0g5HdlEGpmV_iJ9WKA3k">https://drive.google.com/open?id=1InPM0LQ9nViF0g5HdlEGpmV_iJ9WKA3k</a></p><p>文件: 2019.08.08_Full.zip<br>大小: 3345512026 字节<br>修改时间: 2019年8月8日, 16:34:21<br>MD5: 7263B762AC83F2B936492FDA490C7880<br>SHA1: 479D88C2D752F4D18F681D1800225A764E0A2FF9<br>CRC32: D062C169  </p><h2 id="光盘版-2"><a href="#光盘版-2" class="headerlink" title="光盘版"></a>光盘版</h2><p>百度云链接: <a href="https://pan.baidu.com/s/1LMzW6XuaufszyZMl4947wg">https://pan.baidu.com/s/1LMzW6XuaufszyZMl4947wg</a> 提取码: kj52  </p><p>Google Drive链接：<a href="https://drive.google.com/open?id=14WRu-smOfxBKF4HzaEHeWkD7ZPdJKLhK">https://drive.google.com/open?id=14WRu-smOfxBKF4HzaEHeWkD7ZPdJKLhK</a></p><p>文件: 2019.08.08_CDROM.iso<br>大小: 2396276736 字节<br>修改时间: 2019年8月8日, 15:19:02<br>MD5: 0D5C1ADDE81D8020BB91B41ADFEA73D8<br>SHA1: 97BA12184A28269B683DD2E970104172F09E6D0A<br>CRC32: 661F1DB6  </p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol><li>PE可以点击右下角回到桌面啦！</li><li>刷新Explorer.exe在鼠标右键“打开加加”里面！</li><li>加载外置工具后可以按PrtSc键进行截图！</li><li>搜索文件的话，用“文件工具”里的“Everything”要比系统自带的搜索快得多！</li><li>PE识别不到硬盘，有两种解决方案。如果是Win2003PE就进“Win2003PE蓝屏黑屏不认硬盘解决方案”看看吧。如果是Win10PE，嗯。。。。。这个可以进BIOS把硬盘模式设置为IDE模式试试，装好系统之后再改回来。</li><li>想要快速拷贝可以用FastCopy软件哦~</li><li>正确加载PETools的方式是保证所有磁盘根目录只有一个PETools（搜索方式是倒序盘符搜索），然后打开桌面的“加载外置程序”，等待几秒就可以了。加载PETools之后最好刷新一下Explorer.exe（当然也可以不刷新，嘿嘿···）</li><li>更改分辨率可以在右下角的彩色屏幕图标上右击，可以看到你想更改的分辨率，然后手动刷新Explorer。</li><li>按住shift键并在空白处右击可以打开命令提示符。</li><li>机器与机器之间传输文件可以利用网络工具里的FTP服务器和FTP客户端哦~也可以使用飞鸽传书或者使用HFS搭建HTTP服务器来传输文件。</li><li>用PE自带的DISM++可以完成大多数的系统维护功能（安装系统，离线补丁，注入驱动，修复引导等等）。</li><li>点击右下角PENetWork的图标可以直接连接Wifi。</li><li>连接手机到Win10PE之后可以在PE里面使用fastboot工具来刷机，<a href="/fastboot-01">刷机教程在此</a>。</li><li>如果你想在正常的系统使用PETools里面的程序，可以使用7-Zip打开PETools.wim，将需要的工具解压出来就可以使用了。</li></ol><h1 id="和平问答"><a href="#和平问答" class="headerlink" title="和平问答"></a>和平问答</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">问：这个工具集有什么缺点吗？<br>答：缺点嘛···很多啊，比如不能穿越时空到1937年打小日本~<br><br>问：背景图好难看！我可以更改背景吗？<br>答：可以的，换成妹子吧，顺便把那图片也发给我好啦<br><br>问：你的PETools可以在其他PE上使用吗？<br>答：可以的，解压或挂载后用PECMD加载对应系统的ini文件就好啦<br><br>问：你的PE可以玩游戏吗？<br>答：我是不会告诉你可以的，而且还能搞核武器实验，控制美军核导弹的！<br><br>问：赞助和不赞助有什么区别？<br>答：使用上没区别，但捐助后你的心灵得到了净化，精神得到了满足，人民会因此更加和谐，国家会为此再度强盛······<br><br>问：体积太大了，能做的小点吗？我连4GB的SD卡都买不起~<br>答：不仅能大能小，还能长能短，能硬能软~<br><br>问：楼猪好厉害，能教我怎么制作PE吗？<br>答：能啊，等我找到女盆友···或者帮我买一个女朋友！<br><br>问：电脑修得好，备胎当到老 是真的吗？<br>答：佛曰：不可说，不可说啊······<br><br>问：这一年都过去了，大佬还没有女朋友？？<br>答：哈哈哈哈哈，没有！我好Happy啊！<br><br>问：还会继续更新吗？<br>答：要我死~<br><br></code></pre></td></tr></table></figure><h1 id="那些神奇的链接"><a href="#那些神奇的链接" class="headerlink" title="那些神奇的链接"></a>那些神奇的链接</h1><p>赞助名单：<a href="/PEDonation">/PEDonation</a><br>历史版本：<a href="/history/PE-2018-09-04">2018-09-04</a><br>原帖地址：<a href="http://blog.csdn.net/tw359303267/article/details/74075075">http://blog.csdn.net/tw359303267/article/details/74075075</a><br>Github：<a href="https://359303267.github.io/PE">https://359303267.github.io/PE</a><br>以前的版本在无忧论坛：<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=378683&extra=">http://bbs.wuyou.net/forum.php?mod=viewthread&amp;tid=378683&amp;extra=</a>  </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>一个不知道叫什么好的U盘启动工具集</title>
      <link href="/history/PE-2018-09-04/index.html"/>
      <url>/history/PE-2018-09-04/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="先说版权"><a href="#先说版权" class="headerlink" title="先说版权"></a>先说版权</h1><p>这个PE工具集已经被一些商人盯上了！<br>先说明一下。这个PE工具集<strong>不允许拿来做任何商业活动</strong>，但是<strong>个人是免费下载和使用和研究</strong>的！<br>有些商家用这个赚钱不说还不愿意放出官方的帖子链接，用意何在？用我的东西好歹给我说一声是吧？这样才能促进社会和谐，民族安定，国家富强。。。<br>PECMD.ini未加密，并且进行整理标注，欢迎研究和分析。禁止抄袭！！  </p><h1 id="2018-09-04更新测试版，嘻嘻···嘻······"><a href="#2018-09-04更新测试版，嘻嘻···嘻······" class="headerlink" title="2018-09-04更新测试版，嘻嘻···嘻······"></a>2018-09-04更新测试版，嘻嘻···嘻······</h1><ol><li>它又更新了，没错，我依然不认为新的版本是完美的，但它正在走向完美的路上······  </li><li>我知道大家痛恨广告和流氓的绑定行为，所以我去掉了上个版本中唯一的2345网址推广（上个版本的2345推广只存在与内置的世界之窗中，不会向本地系统注入任何文件和行为），添加的PETools都是大家公认的绿色软件，整个工具集没有任何商业行为，你们满意吗？</li><li>这次更新只有一个测试版，因为替他版本都是根据测试版修改，所以只需要搞完整版的测试就行了。</li><li>想要体积小点？不好意思，做不到！</li><li>这玩意带office，这对喜欢小体积的网友来说无疑会减分，但office在关键时刻对装机确实能起到很大作用(查找文档中的资料)</li><li>有人曾说PE就是用来分区，装系统用的，要联网功能干嘛？那我只能说你是小白，如果是装机员的话，联网功能会对他们起到很大作用（搭建网刻服务器或者搭建无盘服务器、临时搭建FTP互传文件）</li><li>这次Win10的PE采用无忧大神Wimboot的内核，真的非常的棒，原生支持nvme,USB3.0，网络和声音，非常的好用。</li><li>Win2003PE依然是我心如水大神的经典珍藏版，内存占用小，也非常的棒。</li><li>以后如果没有大的BUG和功能性缺失就暂时不更新了，没人帮我找BUG，也没人给我提建议，反正这个工具用个几年没问题。</li><li>有任何建议，欢迎在下方留言区留言。</li></ol><h1 id="最新版的截图分享"><a href="#最新版的截图分享" class="headerlink" title="最新版的截图分享"></a>最新版的截图分享</h1><h2 id="UEFI启动下虚拟机截图（前方多图！流量绕行！！！！）"><a href="#UEFI启动下虚拟机截图（前方多图！流量绕行！！！！）" class="headerlink" title="UEFI启动下虚拟机截图（前方多图！流量绕行！！！！）"></a>UEFI启动下虚拟机截图（前方多图！流量绕行！！！！）</h2><p><img src="/images/PE/1.png"></p><p><img src="/images/PE/2.png"></p><h2 id="Protrus-微型Linux系统"><a href="#Protrus-微型Linux系统" class="headerlink" title="Protrus 微型Linux系统"></a>Protrus 微型Linux系统</h2><p><img src="/images/PE/3.png"></p><h2 id="BIOS启动下虚拟机截图"><a href="#BIOS启动下虚拟机截图" class="headerlink" title="BIOS启动下虚拟机截图"></a>BIOS启动下虚拟机截图</h2><p><img src="/images/PE/4.png"></p><p><img src="/images/PE/5.png"></p><p><img src="/images/PE/6.png"></p><p><img src="/images/PE/7.png"></p><p><img src="/images/PE/8.png"></p><p><img src="/images/PE/9.png"></p><h2 id="强大的PETools程序库"><a href="#强大的PETools程序库" class="headerlink" title="强大的PETools程序库"></a>强大的PETools程序库</h2><p><img src="/images/PE/10.png"></p><h2 id="标注的PECMD代码"><a href="#标注的PECMD代码" class="headerlink" title="标注的PECMD代码"></a>标注的PECMD代码</h2><p><img src="/images/PE/11.png"></p><h1 id="各版本介绍"><a href="#各版本介绍" class="headerlink" title="各版本介绍"></a>各版本介绍</h1><p>完整版包含Win2003E，Win10x64和Win10x86三个PE、微型Linux系统、AITH备份还原、ADDS无损分区、DOS工具等全部功能，支持BIOS、UEFI双启。<br>Lite版在完整版上简化而来，去除了显卡驱动、微型Linux系统、AITH备份还原和ADDS无损分区，其他不变，支持BIOS、UEFI双启。<br>核心X64版只包含Win10PEx64，支持BIOS、UEFI双启，可以通过UEFI固件的安全启动。<br>核心X86版只包含Win10PEx86，支持BIOS、UEFI双启，可以通过UEFI固件的安全启动。<br>这四个版本的PE工具库都在PETools文件夹里，可以根据需要增删。  </p><h1 id="体积占比"><a href="#体积占比" class="headerlink" title="体积占比"></a>体积占比</h1><table><thead><tr><th align="center">版本</th><th align="center">BIOS占用</th><th align="center">UEFI占用</th><th align="center">外置PETools</th><th align="center">总计占用</th></tr></thead><tbody><tr><td align="center">测试版</td><td align="center">1415MB</td><td align="center">1275MB</td><td align="center">675MB</td><td align="center">3365MB</td></tr><tr><td align="center">完整版</td><td align="center">1390MB</td><td align="center">1230MB</td><td align="center">888MB</td><td align="center">3508MB</td></tr><tr><td align="center">Lite版</td><td align="center">883MB</td><td align="center">805MB</td><td align="center">534MB</td><td align="center">2222MB</td></tr><tr><td align="center">核心x64版</td><td align="center">485MB</td><td align="center">485MB</td><td align="center">484MB</td><td align="center">1454MB</td></tr><tr><td align="center">核心x86版</td><td align="center">315MB</td><td align="center">315MB</td><td align="center">375MB</td><td align="center">1005MB</td></tr></tbody></table><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><h2 id="2018-09-04完整测试版（推荐）"><a href="#2018-09-04完整测试版（推荐）" class="headerlink" title="2018-09-04完整测试版（推荐）"></a>2018-09-04完整测试版（推荐）</h2><p>下载地址：链接：<a href="https://eyun.baidu.com/s/3d2gghS">https://eyun.baidu.com/s/3d2gghS</a> 密码：k25u<br>文件校验：<br>文件: 2018.09.04_Full.zip<br>大小: 3498451329 字节<br>修改时间: 2018年9月4日, 18:59:22<br>MD5: 3E4977365C8FC6E783FF5C773B26C79D<br>SHA1: DCE5D38B6354BF23FF5DB6A2EA55F3E8C2541D4B<br>CRC32: 4B0A9CCA  </p><h2 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h2><p>下载地址：链接：<a href="https://eyun.baidu.com/s/3hsHzIdQ">https://eyun.baidu.com/s/3hsHzIdQ</a> 密码：AWbE<br>文件校验：<br>文件: 2017.08.02_Full.zip<br>大小: 3606728223 字节<br>修改时间: 2017年8月19日, 9:56:52<br>MD5: 9BB8FB1B07FEE9FA26643BAB4CAAE60B<br>SHA1: 35B83C77EE3F30330D5ECCADA4DD8AF66461AE25<br>CRC32: 362B3EAA  </p><h2 id="Lite版"><a href="#Lite版" class="headerlink" title="Lite版"></a>Lite版</h2><p>下载地址：链接：<a href="https://eyun.baidu.com/s/3gfrIo51">https://eyun.baidu.com/s/3gfrIo51</a> 密码：ObV5<br>文件校验：<br>文件: 2017.08.02_Lite.zip<br>大小: 2290287024 字节<br>修改时间: 2017年8月3日, 10:07:08<br>MD5: B0C755656CE95938721241B5066391B4<br>SHA1: F8035553530F1C4F9F6148199E458E2F7790FB83<br>CRC32: 26693BEB  </p><h2 id="核心x64版"><a href="#核心x64版" class="headerlink" title="核心x64版"></a>核心x64版</h2><p>下载地址：链接：<a href="https://eyun.baidu.com/s/3i5kmHDz">https://eyun.baidu.com/s/3i5kmHDz</a> 密码：MOxg<br>文件校验：<br>文件: 2017.08.02_Core_x64.zip<br>大小: 1496330269 字节<br>修改时间: 2017年8月3日, 10:10:10<br>MD5: 8D219D2C11D076B9314147FF90D4C959<br>SHA1: 76E25502BE82774569FE740D6056646CF9494AA9<br>CRC32: 46416EC4  </p><h2 id="核心x86版"><a href="#核心x86版" class="headerlink" title="核心x86版"></a>核心x86版</h2><p>下载地址：链接：<a href="https://eyun.baidu.com/s/3c3xOaa">https://eyun.baidu.com/s/3c3xOaa</a> 密码：r8Ld<br>文件校验：<br>文件: 2017.08.02_Core_x86.zip<br>大小: 1036783315 字节<br>修改时间: 2017年8月3日, 10:11:43<br>MD5: 1FAC04E7CEFD9D685647F9AF6FDB0634<br>SHA1: 47294916127C71F47A9C842BFFE1998CADAA3CA4<br>CRC32: C62F5384  </p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="在最新的Win10-64bit-1703-15063-版本下用一键制作工具会失败，一键安装失败的可以采用手动安装方法，手动安装教程看这里，视频下载下来更清晰！需要用到的工具在这里"><a href="#在最新的Win10-64bit-1703-15063-版本下用一键制作工具会失败，一键安装失败的可以采用手动安装方法，手动安装教程看这里，视频下载下来更清晰！需要用到的工具在这里" class="headerlink" title="在最新的Win10 64bit 1703 15063 版本下用一键制作工具会失败，一键安装失败的可以采用手动安装方法，手动安装教程看这里，视频下载下来更清晰！需要用到的工具在这里"></a>在最新的Win10 64bit 1703 15063 版本下用一键制作工具会失败，一键安装失败的可以采用手动安装方法，手动安装教程看<a href="https://eyun.baidu.com/s/3pKAix8f">这里</a>，视频下载下来更清晰！需要用到的工具在<a href="https://eyun.baidu.com/s/3o7Ox7ho">这里</a></h2><p><strong>下载后务必确定文件的校验码准确！</strong></p><h1 id="正确的安装方式"><a href="#正确的安装方式" class="headerlink" title="正确的安装方式"></a>正确的安装方式</h1><ol><li>首先准备一个容量大于或等于4GB的存储设备</li><li>备份重要资料（制作过程需要抹除数据）</li><li>打开USEC文件夹里的“开始制作.exe”</li><li>选择对应的磁盘，单击“全新制作”</li><li>制作完成后，将PETools文件夹发送到你的存储设备，注意是文件夹和里面的文件，而不是只发送里面的文件</li><li>测试版已经打包了完整的视频教程哦~</li></ol><h1 id="相对于上次更新了什么？（测试版）"><a href="#相对于上次更新了什么？（测试版）" class="headerlink" title="相对于上次更新了什么？（测试版）"></a>相对于上次更新了什么？（测试版）</h1><ol><li>我发现我犯了一个错误，就是没有写更新日志的习惯，导致我现在都不知道更新了什么。</li><li>刷一下版本号。</li><li>更新了一些软件。</li><li>修复了一些BUG。</li><li>卒。</li></ol><h1 id="兼容配置（测试版）"><a href="#兼容配置（测试版）" class="headerlink" title="兼容配置（测试版）"></a>兼容配置（测试版）</h1><p>Win2003PE最低启动内存：512MB<br>Win10PE 32位版最低启动内存：1G<br>Win10PE 64位版最低启动内存：1G<br>CPU，显卡，主板不限<br>机器内存少于512MB建议使用DOS工具替代使用  </p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ol><li>PE可以点击右下角回到桌面啦！</li><li>刷新Expoloer.exe在鼠标右键“打开加加”里面！</li><li>加载外置工具后可以按PrtSc键进行截图！</li><li>搜索文件的话，用“文件工具”里的“Everything”要比系统自带的搜索快得多！</li><li>PE识别不到硬盘，有两种解决方案。如果是Win2003PE就进“Win2003PE蓝屏黑屏不认硬盘解决方案”看看吧。如果是Win10PE，嗯。。。。。这个可以进BIOS把硬盘模式设置为IDE模式试试，装好系统之后再改回来。</li><li>快速拷贝可以用FastCopy软件哦~</li><li>正确加载PETools的方式是保证所有磁盘根目录只有一个PETools（搜索方式是倒序盘符搜索），然后打开桌面的“加载外置程序”，等待几秒就可以了。加载PETools之后最好刷新一下Explorer.exe（当然也可以不刷新，嘿嘿···）</li><li>更改分辨率可以在右下角的彩色屏幕图标上右击，可以看到你想更改的分辨率。</li><li>按住shift键并在空白处右击可以打开命令提示符。</li><li>机器与机器之间传输文件可以利用网络工具里的FTP服务器和FTP客户端哦~</li><li>用PE自带的DISM++可以完成大多数的系统维护功能（安装系统，离线补丁，注入驱动，修复引导等等）</li><li>连接WiFi请打开桌面的PENetWork进行连接。</li></ol><h1 id="和平问答"><a href="#和平问答" class="headerlink" title="和平问答"></a>和平问答</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plain">问：这个工具集有什么缺点吗？<br>答：缺点嘛···很多啊，比如不能穿越时空到1937年打小日本~<br><br>问：背景图好难看！我可以更改背景吗？<br>答：可以的，换成妹子吧，顺便把那图片也发给我好啦<br><br>问：你的PETools可以在其他PE上使用吗？<br>答：可以的，解压或挂载后用PECMD加载对应系统的ini文件就好啦<br><br>问：你的PE可以玩游戏吗？<br>答：我是不会告诉你可以的，而且还能搞核武器实验，控制美军核导弹的！<br><br>问：赞助和不赞助有什么区别？<br>答：使用上没区别，但捐助后你的心灵得到了净化，精神得到了满足，人民会因此更加和谐，国家会为此再度强盛······<br><br>问：体积太大了，能做的小点吗？我连4GB的SD卡都买不起~<br>答：不仅能大能小，还能长能短，能硬能软~<br><br>问：楼猪好厉害，能教我怎么制作PE吗？<br>答：能啊，等我找到女盆友···或者帮我买一个女朋友！<br><br>问：电脑修得好，备胎当到老 是真的吗？<br>答：佛曰：不可说，不可说啊······<br><br>问：这一年都过去了，大佬还没有女朋友？？<br>答：哈哈哈哈哈，没有！我好Happy啊！<br><br>问：还会继续更新吗？<br>答：那要看你们的表现呦~<br></code></pre></td></tr></table></figure><h1 id="那些神奇的链接"><a href="#那些神奇的链接" class="headerlink" title="那些神奇的链接"></a>那些神奇的链接</h1><p>赞助名单：<a href="/PEDonation">/PEDonation</a><br>原帖地址：<a href="http://blog.csdn.net/tw359303267/article/details/74075075">http://blog.csdn.net/tw359303267/article/details/74075075</a><br>Github：<a href="https://359303267.github.io/PE">https://359303267.github.io/PE</a><br>以前的版本在无忧论坛：<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&tid=378683&extra=">http://bbs.wuyou.net/forum.php?mod=viewthread&amp;tid=378683&amp;extra=</a>  </p>]]></content>
      
    </entry>
    
    
  
</search>
